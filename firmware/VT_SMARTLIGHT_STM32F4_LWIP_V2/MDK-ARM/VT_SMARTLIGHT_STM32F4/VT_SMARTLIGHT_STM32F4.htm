<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\VT_SMARTLIGHT_STM32F4\VT_SMARTLIGHT_STM32F4.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\VT_SMARTLIGHT_STM32F4\VT_SMARTLIGHT_STM32F4.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Jun 04 19:23:43 2018
<BR><P>
<H3>Maximum Stack Usage =      12752 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
iot_tls_connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC_IRQHandler</a><BR>
 <LI><a href="#[947]">ppp_slprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98b]">ppp_vslprintf</a><BR>
 <LI><a href="#[84c]">lwip_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[84d]">lwip_send</a><BR>
 <LI><a href="#[60c]">mbedtls_cipher_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[618]">mbedtls_gcm_update</a><BR>
 <LI><a href="#[7e3]">x509_crt_verify_child</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e3]">x509_crt_verify_child</a><BR>
 <LI><a href="#[823]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[823]">netconn_drain</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[76]">ADC_DMAConvCplt</a> from stm32f4xx_hal_adc.o(.text) referenced from stm32f4xx_hal_adc.o(.text)
 <LI><a href="#[78]">ADC_DMAError</a> from stm32f4xx_hal_adc.o(.text) referenced from stm32f4xx_hal_adc.o(.text)
 <LI><a href="#[77]">ADC_DMAHalfConvCplt</a> from stm32f4xx_hal_adc.o(.text) referenced from stm32f4xx_hal_adc.o(.text)
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">ADC_MultiModeDMAConvCplt</a> from stm32f4xx_hal_adc_ex.o(.text) referenced from stm32f4xx_hal_adc_ex.o(.text)
 <LI><a href="#[65]">ADC_MultiModeDMAError</a> from stm32f4xx_hal_adc_ex.o(.text) referenced from stm32f4xx_hal_adc_ex.o(.text)
 <LI><a href="#[64]">ADC_MultiModeDMAHalfConvCplt</a> from stm32f4xx_hal_adc_ex.o(.text) referenced from stm32f4xx_hal_adc_ex.o(.text)
 <LI><a href="#[111]">AMPM_GSM_MainTask</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.constdata)
 <LI><a href="#[96]">AckStatusCallback</a> from aws_iot_shadow_records.o(.text) referenced from aws_iot_shadow_records.o(.text)
 <LI><a href="#[12a]">Ampm_CallListSetEmpty</a> from ampm_gsm_call.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[91]">Ampm_GSM_GetATI</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[113]">Ampm_GSM_GetIMEI</a> from ampm_gsm_startup.o(.text) referenced from ampm_gsm_main_task.o(.constdata)
 <LI><a href="#[113]">Ampm_GSM_GetIMEI</a> from ampm_gsm_startup.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[4dd]">Ampm_GSM_GetSimCID</a> from ampm_gsm_startup.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[4dc]">Ampm_GSM_GetSimCIMI</a> from ampm_gsm_startup.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[4db]">Ampm_GSM_GetSimCPOS</a> from ampm_gsm_startup.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[104]">Ampm_GetCeer</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[103]">Ampm_GetListOfCurrentCall</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[11e]">Ampm_GetServiceCenterNumber</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[10f]">Ampm_GsmATDone</a> from ampm_gsm_dial_up.o(.text) referenced from ampm_gsm_dial_up.o(.constdata)
 <LI><a href="#[110]">Ampm_GsmATDone1</a> from ampm_gsm_dial_up.o(.text) referenced from ampm_gsm_dial_up.o(.constdata)
 <LI><a href="#[10c]">Ampm_GsmATM1EndCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[105]">Ampm_GsmCHLD_1X_Callback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[121]">Ampm_GsmCREG</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[10b]">Ampm_GsmCallDialEndCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[102]">Ampm_GsmCallDialStartCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[108]">Ampm_GsmCallEndCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[10d]">Ampm_GsmGetCENG</a> from ampm_gsm_common.o(.text) referenced from ampm_gsm_common.o(.constdata)
 <LI><a href="#[92]">Ampm_GsmGetCSQ</a> from ampm_gsm_common.o(.text) referenced from ampm_gsm_common.o(.constdata)
 <LI><a href="#[92]">Ampm_GsmGetCSQ</a> from ampm_gsm_common.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[115]">Ampm_GsmMainATPhaseFinished</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.constdata)
 <LI><a href="#[114]">Ampm_GsmMainCallPhaseFinished</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.constdata)
 <LI><a href="#[107]">Ampm_GsmRecvCallback</a> from ampm_gsm_io.o(.text) referenced 54 times from ampm_gsm_call.o(.constdata)
 <LI><a href="#[107]">Ampm_GsmRecvCallback</a> from ampm_gsm_io.o(.text) referenced from ampm_gsm_io.o(.text)
 <LI><a href="#[106]">Ampm_GsmSendCallback</a> from ampm_gsm_io.o(.text) referenced 54 times from ampm_gsm_call.o(.constdata)
 <LI><a href="#[106]">Ampm_GsmSendCallback</a> from ampm_gsm_io.o(.text) referenced from ampm_gsm_io.o(.text)
 <LI><a href="#[11b]">Ampm_GsmSmsRecv0</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[119]">Ampm_GsmSmsRecv1</a> from ampm_gsm_sms.o(.text) referenced 2 times from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[11a]">Ampm_GsmSmsRecv2</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[11c]">Ampm_GsmSmsRecv3</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[116]">Ampm_GsmSmsRecvCallback_CCLK</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[118]">Ampm_GsmSmsRecvCallback_CMGD</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[117]">Ampm_GsmSmsRecvCallback_CMGR</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[11d]">Ampm_GsmSmsRecvCallback_CheckAT_OK</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[124]">Ampm_GsmSmsSendCallback_CMGF</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[11f]">Ampm_GsmSmsSendCallback_CMGS</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[123]">Ampm_GsmSmsSendCallback_CSCA</a> from ampm_gsm_sms.o(.text) referenced 2 times from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[120]">Ampm_GsmSmsSendMessageCallback</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[122]">Ampm_GsmSmsSent</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[109]">Ampm_GsmVoiceCallCheckCeerEndCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[10a]">Ampm_GsmVoiceCallCheckStateEndCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[8f]">Ampm_MainSmsRecvCallback</a> from sms_task.o(.text) referenced from ampm_gsm_main_task.o(.text)
 <LI><a href="#[4b5]">Ampm_MainSwithToIdle</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.text)
 <LI><a href="#[129]">Ampm_SMS_Process</a> from ampm_gsm_sms.o(.text) referenced 3 times from at_command_parser.o(.constdata)
 <LI><a href="#[128]">Ampm_SMS_ReadMsg</a> from ampm_gsm_sms.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[127]">Ampm_SMS_URC_Incomming</a> from ampm_gsm_sms.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[94]">Ampm_SetCmdOK</a> from ampm_gsm_io.o(.text) referenced 2 times from ampm_gsm_startup.o(.text)
 <LI><a href="#[125]">Ampm_URC_CLIP_Process</a> from at_command_parser.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[126]">Ampm_URC_RING_Process</a> from at_command_parser.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e9]">Cmds_Status_DeltaCallback</a> from shadow_thing.o(.text) referenced 5 times from shadow_thing.o(.constdata)
 <LI><a href="#[5b]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream0_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream2_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream3_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream4_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream5_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream6_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream7_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10e]">DialupAtCallback0</a> from ampm_gsm_dial_up.o(.text) referenced from ampm_gsm_dial_up.o(.constdata)
 <LI><a href="#[4a]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f9]">ElsterRecvCmdGetP0</a> from elster_tasks.o(.text) referenced 4 times from elster_tasks.o(.constdata)
 <LI><a href="#[fd]">ElsterRecvCmdP2</a> from elster_tasks.o(.text) referenced 4 times from elster_tasks.o(.constdata)
 <LI><a href="#[f7]">ElsterRecvCmdStart</a> from elster_tasks.o(.text) referenced 4 times from elster_tasks.o(.constdata)
 <LI><a href="#[fb]">ElsterRecvData</a> from elster_tasks.o(.text) referenced 61 times from elster_tasks.o(.constdata)
 <LI><a href="#[ff]">ElsterRecvData1</a> from elster_tasks.o(.text) referenced 15 times from elster_tasks.o(.constdata)
 <LI><a href="#[101]">ElsterRecvData2</a> from elster_tasks.o(.text) referenced 3 times from elster_tasks.o(.constdata)
 <LI><a href="#[fa]">ElsterWriteCmd</a> from elster_tasks.o(.text) referenced 61 times from elster_tasks.o(.constdata)
 <LI><a href="#[fe]">ElsterWriteCmd1</a> from elster_tasks.o(.text) referenced 15 times from elster_tasks.o(.constdata)
 <LI><a href="#[100]">ElsterWriteCmd2</a> from elster_tasks.o(.text) referenced 3 times from elster_tasks.o(.constdata)
 <LI><a href="#[f8]">ElsterWriteCmdGetP0</a> from elster_tasks.o(.text) referenced 4 times from elster_tasks.o(.constdata)
 <LI><a href="#[fc]">ElsterWriteCmdP2</a> from elster_tasks.o(.text) referenced 4 times from elster_tasks.o(.constdata)
 <LI><a href="#[f6]">ElsterWriteCmdStart</a> from elster_tasks.o(.text) referenced 4 times from elster_tasks.o(.constdata)
 <LI><a href="#[f5]">ElsterWriteCmdStop</a> from elster_tasks.o(.text) referenced 8 times from elster_tasks.o(.constdata)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[112]">GsmGetTime</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.constdata)
 <LI><a href="#[93]">GsmGetUTCTime</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[5c]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d6]">LcpEchoTimeout</a> from lwip_lcp.o(.text) referenced 2 times from lwip_lcp.o(.text)
 <LI><a href="#[eb]">Line1_Status_DeltaCallback</a> from shadow_thing.o(.text) referenced from shadow_thing.o(.constdata)
 <LI><a href="#[ec]">Line2_Status_DeltaCallback</a> from shadow_thing.o(.text) referenced from shadow_thing.o(.constdata)
 <LI><a href="#[ed]">Line3_Status_DeltaCallback</a> from shadow_thing.o(.text) referenced from shadow_thing.o(.constdata)
 <LI><a href="#[ee]">Line4_Status_DeltaCallback</a> from shadow_thing.o(.text) referenced from shadow_thing.o(.constdata)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7b]">SPI_2linesRxISR_16BIT</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[7d]">SPI_2linesRxISR_8BIT</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[7c]">SPI_2linesTxISR_16BIT</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[7e]">SPI_2linesTxISR_8BIT</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[89]">SPI_AbortRx_ISR</a> from stm32f4xx_hal_spi.o(.text) referenced 2 times from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[88]">SPI_AbortTx_ISR</a> from stm32f4xx_hal_spi.o(.text) referenced 2 times from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[8c]">SPI_DMAAbortOnError</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[83]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(.text) referenced 2 times from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[84]">SPI_DMAHalfReceiveCplt</a> from stm32f4xx_hal_spi.o(.text) referenced 2 times from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[81]">SPI_DMAHalfTransmitCplt</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[86]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[85]">SPI_DMAReceiveCplt</a> from stm32f4xx_hal_spi.o(.text) referenced 2 times from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[8b]">SPI_DMARxAbortCallback</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[82]">SPI_DMATransmitCplt</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[87]">SPI_DMATransmitReceiveCplt</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[8a]">SPI_DMATxAbortCallback</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[7f]">SPI_RxISR_16BIT</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[80]">SPI_RxISR_8BIT</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[79]">SPI_TxISR_16BIT</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[7a]">SPI_TxISR_8BIT</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[9]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f0]">Schedules_Cmd_Status_DeltaCallback</a> from shadow_thing.o(.text) referenced from shadow_thing.o(.constdata)
 <LI><a href="#[ea]">Schedules_Status_DeltaCallback</a> from shadow_thing.o(.text) referenced from shadow_thing.o(.constdata)
 <LI><a href="#[f2]">Schedules_Time_Status_DeltaCallback</a> from shadow_thing.o(.text) referenced from shadow_thing.o(.constdata)
 <LI><a href="#[f1]">Schedules_wD_Status_DeltaCallback</a> from shadow_thing.o(.text) referenced from shadow_thing.o(.constdata)
 <LI><a href="#[8d]">ShadowUpdateStatusCallback</a> from shadow_thing.o(.text) referenced from shadow_thing.o(.text)
 <LI><a href="#[e8]">StartDefaultTask</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[c]">SysTick_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ab]">TIME_GET</a> from sys_time.o(.text) referenced 2 times from ssl_cli.o(.text)
 <LI><a href="#[69]">TIMEx_DMACommutationCplt</a> from stm32f4xx_hal_tim_ex.o(.text) referenced 2 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[6b]">TIM_DMACaptureCplt</a> from stm32f4xx_hal_tim.o(.text) referenced 10 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[68]">TIM_DMADelayPulseCplt</a> from stm32f4xx_hal_tim.o(.text) referenced 11 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[67]">TIM_DMAError</a> from stm32f4xx_hal_tim.o(.text) referenced 18 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[66]">TIM_DMAPeriodElapsedCplt</a> from stm32f4xx_hal_tim.o(.text) referenced 2 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[6a]">TIM_DMATriggerCplt</a> from stm32f4xx_hal_tim.o(.text) referenced from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[41]">UART4_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[75]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[6e]">UART_DMAError</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[6f]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[72]">UART_DMARxAbortCallback</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[70]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[74]">UART_DMARxOnlyAbortCallback</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[6c]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[71]">UART_DMATxAbortCallback</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[6d]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[73]">UART_DMATxOnlyAbortCallback</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[32]">USART1_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">USART6_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[99]">_iot_tls_verify_cert</a> from network_mbedtls_wrapper.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[e2]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[e3]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[e1]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[e6]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[e6]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[e7]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[e7]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[c8]">accept_function</a> from lwip_api_msg.o(.text) referenced from lwip_api_msg.o(.text)
 <LI><a href="#[9d]">add_pkcs_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[12c]">aes_crypt_cbc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[12b]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[12f]">aes_ctx_alloc</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[130]">aes_ctx_free</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[12e]">aes_setkey_dec_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[12d]">aes_setkey_enc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[a9]">buffer_alloc_calloc</a> from memory_buffer_alloc.o(.text) referenced from memory_buffer_alloc.o(.text)
 <LI><a href="#[a8]">buffer_alloc_free</a> from memory_buffer_alloc.o(.text) referenced from memory_buffer_alloc.o(.text)
 <LI><a href="#[0]">calloc</a> from calloc.o(.text) referenced 2 times from platform.o(.data)
 <LI><a href="#[134]">ccm_aes_setkey_wrap</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[135]">ccm_ctx_alloc</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[136]">ccm_ctx_free</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[177]">chap_init</a> from lwip_chap-new.o(.text) referenced from lwip_chap-new.o(.constdata)
 <LI><a href="#[178]">chap_input</a> from lwip_chap-new.o(.text) referenced from lwip_chap-new.o(.constdata)
 <LI><a href="#[17b]">chap_lowerdown</a> from lwip_chap-new.o(.text) referenced from lwip_chap-new.o(.constdata)
 <LI><a href="#[17a]">chap_lowerup</a> from lwip_chap-new.o(.text) referenced from lwip_chap-new.o(.constdata)
 <LI><a href="#[176]">chap_md5_make_response</a> from lwip_chap-md5.o(.text) referenced from lwip_chap-md5.o(.constdata)
 <LI><a href="#[179]">chap_protrej</a> from lwip_chap-new.o(.text) referenced from lwip_chap-new.o(.constdata)
 <LI><a href="#[a0]">ctr_drbg_self_test_entropy</a> from ctr_drbg.o(.text) referenced from ctr_drbg.o(.text)
 <LI><a href="#[d2]">cyclic_timer</a> from lwip_timeouts.o(.text) referenced from lwip_timeouts.o(.text)
 <LI><a href="#[cf]">dns_recv</a> from lwip_dns.o(.text) referenced from lwip_dns.o(.text)
 <LI><a href="#[175]">dns_tmr</a> from lwip_dns.o(.text) referenced from lwip_timeouts.o(.constdata)
 <LI><a href="#[169]">ecdsa_alloc_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[166]">ecdsa_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[16a]">ecdsa_free_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[168]">ecdsa_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[167]">ecdsa_verify_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[162]">eckey_alloc_wrap</a> from pk_wrap.o(.text) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[15e]">eckey_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[161]">eckey_check_pair</a> from pk_wrap.o(.text) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[164]">eckey_debug</a> from pk_wrap.o(.text) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[163]">eckey_free_wrap</a> from pk_wrap.o(.text) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[15d]">eckey_get_bitlen</a> from pk_wrap.o(.text) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[160]">eckey_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[15f]">eckey_verify_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[165]">eckeydh_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a4]">ecp_mod_p255</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[a2]">ecp_mod_p256</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[a3]">ecp_mod_p384</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[a6]">entropy_dummy_source</a> from entropy.o(.text) referenced from entropy.o(.text)
 <LI><a href="#[c4]">err_tcp</a> from lwip_api_msg.o(.text) referenced 2 times from lwip_api_msg.o(.text)
 <LI><a href="#[ca]">event_callback</a> from lwip_sockets.o(.text) referenced 2 times from lwip_sockets.o(.text)
 <LI><a href="#[e5]">fputc</a> from ampm_filestream.o(.text) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[e5]">fputc</a> from ampm_filestream.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1]">free</a> from malloc.o(i.free) referenced 2 times from platform.o(.data)
 <LI><a href="#[d4]">fsm_timeout</a> from lwip_fsm.o(.text) referenced 3 times from lwip_fsm.o(.text)
 <LI><a href="#[131]">gcm_aes_setkey_wrap</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[132]">gcm_ctx_alloc</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[133]">gcm_ctx_free</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[9f]">get_no_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[9e]">get_pkcs_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[a7]">hmac_drbg_self_test_entropy</a> from hmac_drbg.o(.text) referenced from hmac_drbg.o(.text)
 <LI><a href="#[174]">igmp_tmr</a> from lwip_igmp.o(.text) referenced from lwip_timeouts.o(.constdata)
 <LI><a href="#[58b]">iot_tls_connect</a> from network_mbedtls_wrapper.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[592]">iot_tls_dbg</a> from network_mbedtls_wrapper.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[57f]">iot_tls_destroy</a> from network_mbedtls_wrapper.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[585]">iot_tls_disconnect</a> from network_mbedtls_wrapper.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[5a7]">iot_tls_is_connected</a> from network_mbedtls_wrapper.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[589]">iot_tls_read</a> from network_mbedtls_wrapper.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[587]">iot_tls_write</a> from network_mbedtls_wrapper.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[cb]">ip4_input</a> from lwip_ip4.o(.text) referenced from lwip_tcpip.o(.text)
 <LI><a href="#[173]">ip_reass_tmr</a> from lwip_ip4_frag.o(.text) referenced from lwip_timeouts.o(.constdata)
 <LI><a href="#[17f]">ipcp_ackci</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[17e]">ipcp_addci</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[17d]">ipcp_cilen</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[18c]">ipcp_close</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[184]">ipcp_down</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[185]">ipcp_finished</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[186]">ipcp_init</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[187]">ipcp_input</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[18a]">ipcp_lowerdown</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[189]">ipcp_lowerup</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[180]">ipcp_nakci</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[18b]">ipcp_open</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[188]">ipcp_protrej</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[181]">ipcp_rejci</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[182]">ipcp_reqci</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[17c]">ipcp_resetci</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[183]">ipcp_up</a> from lwip_ipcp.o(.text) referenced from lwip_ipcp.o(.constdata)
 <LI><a href="#[d3]">ipfrag_free_pbuf_custom</a> from lwip_ip4_frag.o(.text) referenced from lwip_ip4_frag.o(.text)
 <LI><a href="#[e4]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[190]">lcp_ackci</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[18f]">lcp_addci</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[18e]">lcp_cilen</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[19f]">lcp_close</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[d5]">lcp_delayed_up</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.text)
 <LI><a href="#[195]">lcp_down</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[198]">lcp_extcode</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[197]">lcp_finished</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[199]">lcp_init</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[19a]">lcp_input</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[19d]">lcp_lowerdown</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[19c]">lcp_lowerup</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[191]">lcp_nakci</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[19e]">lcp_open</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[19b]">lcp_protrej</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[192]">lcp_rejci</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[193]">lcp_reqci</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[18d]">lcp_resetci</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[196]">lcp_starting</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[194]">lcp_up</a> from lwip_lcp.o(.text) referenced from lwip_lcp.o(.constdata)
 <LI><a href="#[b8]">lwip_netconn_do_bind</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[bc]">lwip_netconn_do_close</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[b9]">lwip_netconn_do_connect</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[c7]">lwip_netconn_do_connected</a> from lwip_api_msg.o(.text) referenced from lwip_api_msg.o(.text)
 <LI><a href="#[b6]">lwip_netconn_do_delconn</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[ba]">lwip_netconn_do_disconnect</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[c9]">lwip_netconn_do_dns_found</a> from lwip_api_msg.o(.text) referenced from lwip_api_msg.o(.text)
 <LI><a href="#[b7]">lwip_netconn_do_getaddr</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[c1]">lwip_netconn_do_gethostbyname</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[c0]">lwip_netconn_do_join_leave_group</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[bb]">lwip_netconn_do_listen</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[b5]">lwip_netconn_do_newconn</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[bd]">lwip_netconn_do_recv</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[be]">lwip_netconn_do_send</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[bf]">lwip_netconn_do_write</a> from lwip_api_msg.o(.text) referenced from lwip_api_lib.o(.text)
 <LI><a href="#[5e]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[dc]">mbed_lwip_netif_link_irq</a> from lwip_stack.o(.text) referenced from lwip_stack.o(.text)
 <LI><a href="#[dd]">mbed_lwip_netif_status_irq</a> from lwip_stack.o(.text) referenced from lwip_stack.o(.text)
 <LI><a href="#[db]">mbed_lwip_tcpip_init_irq</a> from lwip_stack.o(.text) referenced from lwip_stack.o(.text)
 <LI><a href="#[9a]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[98]">mbedtls_entropy_func</a> from entropy.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[a5]">mbedtls_hardware_poll</a> from hardware_rng.o(.text) referenced from entropy.o(.text)
 <LI><a href="#[a1]">mbedtls_hmac_drbg_random</a> from hmac_drbg.o(.text) referenced from ecdsa.o(.text)
 <LI><a href="#[9b]">mbedtls_net_recv_timeout</a> from net_socket.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[9c]">mbedtls_net_send</a> from net_socket.o(.text) referenced from network_mbedtls_wrapper.o(.text)
 <LI><a href="#[13a]">mbedtls_sha1</a> from sha1.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[ce]">mem_free</a> from lwip_mem.o(.text) referenced from lwip_tcpip.o(.text)
 <LI><a href="#[aa]">myrand</a> from rsa.o(.text) referenced from rsa.o(.text)
 <LI><a href="#[cd]">pbuf_free_int</a> from lwip_tcpip.o(.text) referenced from lwip_tcpip.o(.text)
 <LI><a href="#[2]">platform_exit_uninit</a> from platform.o(.text) referenced 2 times from platform.o(.data)
 <LI><a href="#[c3]">poll_tcp</a> from lwip_api_msg.o(.text) referenced 2 times from lwip_api_msg.o(.text)
 <LI><a href="#[d7]">ppp_do_connect</a> from lwip_ppp.o(.text) referenced from lwip_ppp.o(.text)
 <LI><a href="#[de]">ppp_link_status</a> from ppp_lwip.o(.text) referenced from ppp_lwip.o(.text)
 <LI><a href="#[d9]">ppp_netif_init_cb</a> from lwip_ppp.o(.text) referenced from lwip_ppp.o(.text)
 <LI><a href="#[d8]">ppp_netif_output_ip4</a> from lwip_ppp.o(.text) referenced from lwip_ppp.o(.text)
 <LI><a href="#[df]">ppp_output</a> from ppp_lwip.o(.text) referenced from ppp_lwip.o(.text)
 <LI><a href="#[8e]">ppp_output_cb</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.text)
 <LI><a href="#[1a0]">pppos_connect</a> from lwip_pppos.o(.text) referenced from lwip_pppos.o(.constdata)
 <LI><a href="#[1a2]">pppos_destroy</a> from lwip_pppos.o(.text) referenced from lwip_pppos.o(.constdata)
 <LI><a href="#[1a1]">pppos_disconnect</a> from lwip_pppos.o(.text) referenced from lwip_pppos.o(.constdata)
 <LI><a href="#[da]">pppos_input_callback</a> from lwip_pppos.o(.text) referenced from lwip_pppos.o(.text)
 <LI><a href="#[1a4]">pppos_netif_output</a> from lwip_pppos.o(.text) referenced from lwip_pppos.o(.constdata)
 <LI><a href="#[1a6]">pppos_recv_config</a> from lwip_pppos.o(.text) referenced from lwip_pppos.o(.constdata)
 <LI><a href="#[1a5]">pppos_send_config</a> from lwip_pppos.o(.text) referenced from lwip_pppos.o(.constdata)
 <LI><a href="#[1a3]">pppos_write</a> from lwip_pppos.o(.text) referenced from lwip_pppos.o(.constdata)
 <LI><a href="#[60]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[5f]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[c5]">recv_tcp</a> from lwip_api_msg.o(.text) referenced from lwip_api_msg.o(.text)
 <LI><a href="#[c6]">recv_udp</a> from lwip_api_msg.o(.text) referenced from lwip_api_msg.o(.text)
 <LI><a href="#[15a]">rsa_alloc_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[170]">rsa_alt_alloc_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[16c]">rsa_alt_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[16f]">rsa_alt_check_pair</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[16e]">rsa_alt_decrypt_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[171]">rsa_alt_free_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[16b]">rsa_alt_get_bitlen</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[16d]">rsa_alt_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[154]">rsa_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[159]">rsa_check_pair_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[15c]">rsa_debug</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[157]">rsa_decrypt_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[158]">rsa_encrypt_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[15b]">rsa_free_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[153]">rsa_get_bitlen</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[156]">rsa_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[155]">rsa_verify_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[c2]">sent_tcp</a> from lwip_api_msg.o(.text) referenced 2 times from lwip_api_msg.o(.text)
 <LI><a href="#[13d]">sha1_clone_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13b]">sha1_ctx_alloc</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13c]">sha1_ctx_free</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[139]">sha1_finish_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13e]">sha1_process_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[137]">sha1_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[138]">sha1_update_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[145]">sha224_clone_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[143]">sha224_ctx_alloc</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[144]">sha224_ctx_free</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[141]">sha224_finish_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[146]">sha224_process_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[13f]">sha224_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[140]">sha224_update_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[142]">sha224_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[147]">sha256_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[148]">sha256_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14f]">sha384_clone_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[14d]">sha384_ctx_alloc</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[14e]">sha384_ctx_free</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[14b]">sha384_finish_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[150]">sha384_process_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[149]">sha384_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14a]">sha384_update_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[14c]">sha384_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[151]">sha512_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[152]">sha512_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[95]">shadow_delta_callback</a> from aws_iot_shadow_records.o(.text) referenced from aws_iot_shadow_records.o(.text)
 <LI><a href="#[ef]">shadow_thing_thread</a> from shadow_thing.o(.text) referenced from shadow_thing.o(.constdata)
 <LI><a href="#[b1]">ssl_calc_finished_tls_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[ae]">ssl_calc_finished_tls_sha384</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[b0]">ssl_calc_verify_tls_sha256</a> from ssl_tls.o(.text) referenced 2 times from ssl_tls.o(.text)
 <LI><a href="#[ad]">ssl_calc_verify_tls_sha384</a> from ssl_tls.o(.text) referenced 2 times from ssl_tls.o(.text)
 <LI><a href="#[b3]">ssl_update_checksum_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[b2]">ssl_update_checksum_sha384</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[b4]">ssl_update_checksum_start</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[90]">status_cb</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.text)
 <LI><a href="#[e0]">stream_cb</a> from ppp_lwip.o(.text) referenced from ppp_lwip.o(.text)
 <LI><a href="#[d0]">tcp_accept_null</a> from lwip_tcp.o(.text) referenced from lwip_tcp.o(.text)
 <LI><a href="#[8e1]">tcp_recv_null</a> from lwip_tcp.o(.text) referenced from lwip_tcp.o(.text)
 <LI><a href="#[172]">tcp_tmr</a> from lwip_tcp.o(.text) referenced from lwip_timeouts.o(.constdata)
 <LI><a href="#[d1]">tcpip_tcp_timer</a> from lwip_timeouts.o(.text) referenced from lwip_timeouts.o(.text)
 <LI><a href="#[cc]">tcpip_thread</a> from lwip_tcpip.o(.text) referenced from lwip_tcpip.o(.text)
 <LI><a href="#[af]">tls_prf_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[ac]">tls_prf_sha384</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[f3]">vNTP_Task</a> from ntp_server.o(.text) referenced from ntp_server.o(.constdata)
 <LI><a href="#[f4]">vOTA_Backup_Task</a> from ota_backup_server.o(.text) referenced from ota_backup_server.o(.constdata)
 <LI><a href="#[4b9]">vTcpIpTask</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.text)
 <LI><a href="#[4ba]">vTcpIpTaskInit</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.text)
 <LI><a href="#[97]">xTaskGetTickCount</a> from tasks.o(.text) referenced from aws_timer.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[9d2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1a7]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9c3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9d3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9d4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9d5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9d6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9d7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1da]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1d9]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1dd]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[1aa]"></a>pvPortMalloc</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReportSmsToUser
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Sms_SendMsg
</UL>

<P><STRONG><a name="[1b0]"></a>vPortFree</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_backup_stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReportSmsToUser
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Sms_SendMsg
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_UpdateStatus
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
</UL>

<P><STRONG><a name="[3f7]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[9d8]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[9d9]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1b7]"></a>xQueueGenericCreate</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[1be]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[1c4]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRecursiveMutexCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[1c5]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRecursiveMutexRelease
</UL>

<P><STRONG><a name="[1c9]"></a>xQueueGenericReceive</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePeek
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[1cc]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRecursiveMutexWait
</UL>

<P><STRONG><a name="[1cd]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[1ce]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[1d0]"></a>xQueueGiveFromISR</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[1d1]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueReceiveFromISR &rArr; prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[1d2]"></a>xQueuePeekFromISR</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[1d3]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageWaiting
</UL>

<P><STRONG><a name="[1d4]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageAvailableSpace
</UL>

<P><STRONG><a name="[21d]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageWaiting
</UL>

<P><STRONG><a name="[1d6]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[1d5]"></a>vQueueDelete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageDelete
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[9da]"></a>uxQueueGetQueueNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[9db]"></a>vQueueSetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[9dc]"></a>ucQueueGetQueueType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[9dd]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[9de]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[9df]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[9e0]"></a>pcQueueGetName</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1d8]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1d7]"></a>xPortStartScheduler</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[238]"></a>vPortEndScheduler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[1b2]"></a>vPortEnterCritical</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1b5]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1db]"></a>xPortSysTickHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[1cf]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1de]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e0]"></a>osKernelRunning</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>

<P><STRONG><a name="[1e1]"></a>osKernelSysTick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[1e4]"></a>osThreadCreate</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_start
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_shadow_thing_start
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_backup_start
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[1e7]"></a>osThreadGetId</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>

<P><STRONG><a name="[1e8]"></a>osThreadTerminate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_stop
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_backup_stop
</UL>

<P><STRONG><a name="[9e1]"></a>osThreadYield</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>osThreadSetPriority</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
</UL>

<P><STRONG><a name="[1ec]"></a>osThreadGetPriority</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeCmsisPriority
</UL>

<P><STRONG><a name="[1f0]"></a>osDelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNTP_Task
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsPolling
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
</UL>

<P><STRONG><a name="[9e2]"></a>osTimerCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[9e3]"></a>osTimerStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[9e4]"></a>osTimerStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[9e5]"></a>osTimerDelete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>osSignalSet</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>

<P><STRONG><a name="[1f5]"></a>osSignalWait</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>

<P><STRONG><a name="[1f7]"></a>osMutexCreate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask_Init
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</UL>

<P><STRONG><a name="[1f8]"></a>osMutexWait</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsAddMsg
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_UpdateStatus
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsCheckMessage_IsEmpty
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>

<P><STRONG><a name="[1f9]"></a>osMutexRelease</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsAddMsg
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_UpdateStatus
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsCheckMessage_IsEmpty
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>

<P><STRONG><a name="[1fa]"></a>osMutexDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
</UL>

<P><STRONG><a name="[1fb]"></a>osSemaphoreCreate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogInit
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ControlInit
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConfigTaskInit
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[1fc]"></a>osSemaphoreWait</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc_stdout
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogFeed
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Read
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Save
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeviceIoStatus_Save
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_task_lock
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_WriteNoErase
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsWatchdogDisable
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsWatchdogEnable
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Erase
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogEnable
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogDisable
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleSetStatus
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[1fd]"></a>osSemaphoreRelease</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc_stdout
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogFeed
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedules_Status_DeltaCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmds_Status_DeltaCallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line4_Status_DeltaCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line3_Status_DeltaCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2_Status_DeltaCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line1_Status_DeltaCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Read
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Save
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeviceIoStatus_Save
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_task_unlock
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_WriteNoErase
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsWatchdogDisable
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsWatchdogEnable
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Erase
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogEnable
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogDisable
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleSetStatus
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>

<P><STRONG><a name="[1fe]"></a>osSemaphoreDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[1ff]"></a>osPoolCreate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
</UL>

<P><STRONG><a name="[200]"></a>osPoolAlloc</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailAlloc
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCAlloc
</UL>

<P><STRONG><a name="[201]"></a>osPoolCAlloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>

<P><STRONG><a name="[20b]"></a>osPoolFree</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailFree
</UL>

<P><STRONG><a name="[202]"></a>osMessageCreate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[203]"></a>osMessagePut</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsWatchdogFeed
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>

<P><STRONG><a name="[204]"></a>osMessageGet</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessageGet &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWatchdog_Task
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[205]"></a>osMailCreate</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[206]"></a>osMailAlloc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCAlloc
</UL>

<P><STRONG><a name="[207]"></a>osMailCAlloc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailAlloc
</UL>

<P><STRONG><a name="[208]"></a>osMailPut</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[209]"></a>osMailGet</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[20a]"></a>osMailFree</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
</UL>

<P><STRONG><a name="[20c]"></a>osSystickHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[20d]"></a>osThreadGetState</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>

<P><STRONG><a name="[20f]"></a>osThreadIsSuspended</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>

<P><STRONG><a name="[210]"></a>osThreadSuspend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[212]"></a>osThreadResume</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>

<P><STRONG><a name="[215]"></a>osThreadSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[216]"></a>osThreadResumeAll</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[217]"></a>osDelayUntil</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>

<P><STRONG><a name="[9e6]"></a>osAbortDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>osThreadList</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[21b]"></a>osMessagePeek</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[21c]"></a>osMessageWaiting</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMessageWaiting &rArr; uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[21e]"></a>osMessageAvailableSpace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
</UL>

<P><STRONG><a name="[21f]"></a>osMessageDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMessageDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[220]"></a>osRecursiveMutexCreate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[221]"></a>osRecursiveMutexRelease</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[222]"></a>osRecursiveMutexWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[223]"></a>osSemaphoreGetCount</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>

<P><STRONG><a name="[1e6]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1e9]"></a>vTaskDelete</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[1dc]"></a>xTaskIncrementTick</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1ae]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResumeAll
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1ab]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspendAll
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[218]"></a>vTaskDelayUntil</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
</UL>

<P><STRONG><a name="[1f1]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[20e]"></a>eTaskGetState</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadIsSuspended
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetState
</UL>

<P><STRONG><a name="[1ef]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[1ed]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[1eb]"></a>vTaskPrioritySet</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[1a9]"></a>vTaskSwitchContext</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[211]"></a>vTaskSuspend</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[214]"></a>vTaskResume</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[213]"></a>xTaskResumeFromISR</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[1df]"></a>vTaskStartScheduler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[237]"></a>vTaskEndScheduler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[97]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_jiffies
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_timer.o(.text)
</UL>
<P><STRONG><a name="[1e3]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[9e7]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[9e8]"></a>pcTaskGetName</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>vTaskGetInfo</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[23c]"></a>uxTaskGetSystemState</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[1c2]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[23d]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1b3]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[23e]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>

<P><STRONG><a name="[1c0]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c1]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b9]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[9e9]"></a>uxTaskGetTaskNumber</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[9ea]"></a>vTaskSetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[1bf]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1cb]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1bc]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[21a]"></a>vTaskList</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadList
</UL>

<P><STRONG><a name="[243]"></a>vTaskGetRunTimeStats</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[9eb]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[244]"></a>ulTaskNotifyTake</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1f6]"></a>xTaskNotifyWait</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>

<P><STRONG><a name="[1f4]"></a>xTaskGenericNotify</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[1f3]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[245]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[246]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1b4]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[229]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[226]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[230]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[22c]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[257]"></a>list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdResetList
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmd_Task
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask_Init
</UL>

<P><STRONG><a name="[4a0]"></a>list_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_IsInProcess
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTaskPeriodic_1Sec
</UL>

<P><STRONG><a name="[9ec]"></a>list_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_list.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>list_tail</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
</UL>

<P><STRONG><a name="[248]"></a>list_remove</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ampm_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallCancel
</UL>

<P><STRONG><a name="[247]"></a>list_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ampm_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdAddToList
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmdAddToList
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsAddMsg
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallAdd
</UL>

<P><STRONG><a name="[24a]"></a>list_push</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, ampm_list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
</UL>

<P><STRONG><a name="[9ed]"></a>list_chop</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ampm_list.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>list_pop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmd_Task
</UL>

<P><STRONG><a name="[49b]"></a>list_length</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_IsInProcess
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsCheckMessage_IsEmpty
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTaskPeriodic_1Sec
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallCheckList_IsEmpty
</UL>

<P><STRONG><a name="[24b]"></a>list_insert</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ampm_list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
</UL>

<P><STRONG><a name="[4a1]"></a>list_item_next</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_IsInProcess
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTaskPeriodic_1Sec
</UL>

<P><STRONG><a name="[24d]"></a>ampm_f_putc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ampm_sprintf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_puts
</UL>

<P><STRONG><a name="[24c]"></a>ampm_f_puts</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ampm_sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
</UL>

<P><STRONG><a name="[24e]"></a>ampm_vsprintf</STRONG> (Thumb, 688 bytes, Stack size 84 bytes, ampm_sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_puts
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
</UL>

<P><STRONG><a name="[24f]"></a>ampm_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, ampm_sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CMGD
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CMGR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CCLK
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendMessageCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DialupAtCallback0
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCallDialStartCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCHLD_1X_Callback
</UL>

<P><STRONG><a name="[250]"></a>InitFindData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, data_cmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitFindData
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterSendCmd0
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetATI
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
</UL>

<P><STRONG><a name="[47c]"></a>FindData</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, data_cmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvCmd0
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetATI
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
</UL>

<P><STRONG><a name="[4f1]"></a>unilen</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, encoding.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
</UL>

<P><STRONG><a name="[4f2]"></a>big2litel_endian</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, encoding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = big2litel_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
</UL>

<P><STRONG><a name="[252]"></a>utf8_to_ucs2</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, encoding.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8s_to_ucs2s
</UL>

<P><STRONG><a name="[251]"></a>utf8s_to_ucs2s</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, encoding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = utf8s_to_ucs2s
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_ucs2
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
</UL>

<P><STRONG><a name="[43c]"></a>ucs2_to_utf8</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, encoding.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
</UL>

<P><STRONG><a name="[9ee]"></a>uni_srtsrt</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, encoding.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>gmtime_r</STRONG> (Thumb, 366 bytes, Stack size 20 bytes, m_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromGsm
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>

<P><STRONG><a name="[253]"></a>localtime_r</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, m_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[268]"></a>mktime</STRONG> (Thumb, 1226 bytes, Stack size 44 bytes, m_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromGsm
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
</UL>

<P><STRONG><a name="[47e]"></a>RINGBUF_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_PutcRx
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Init
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Getc
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask_Init
</UL>

<P><STRONG><a name="[481]"></a>RINGBUF_Put</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RINGBUF_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_PutChar
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_PutcRx
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_PutChar
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutChar
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_PutChar
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_Process
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_URC_Incomming
</UL>

<P><STRONG><a name="[483]"></a>RINGBUF_Get</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_IRQHandler
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_IRQHandler
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_IRQHandler
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_IRQHandler
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Getc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv1
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv0
</UL>

<P><STRONG><a name="[480]"></a>RINGBUF_GetFill</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_IRQHandler
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_IRQHandler
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_IRQHandler
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_IRQHandler
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_PutChar
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_PutChar
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutChar
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_PutChar
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv1
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv0
</UL>

<P><STRONG><a name="[255]"></a>Ampm_CmdAddToList</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sparser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[256]"></a>Ampm_CmdResetList</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sparser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>

<P><STRONG><a name="[9ef]"></a>Ampm_CmdCheckList_IsEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sparser.o(.text), UNUSED)

<P><STRONG><a name="[4ac]"></a>Ampm_CmdCheck_IsEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
</UL>

<P><STRONG><a name="[259]"></a>Ampm_CmdTask_IsIdle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RecvSms_IsFinished
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
</UL>

<P><STRONG><a name="[258]"></a>Ampm_SendCmd</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_SendCmd &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
</UL>

<P><STRONG><a name="[25c]"></a>Ampm_SendCmdNow</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>

<P><STRONG><a name="[25d]"></a>Ampm_Cmd_Task</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_Cmd_Task &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4ae]"></a>StrParserInit</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StrParserInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdProcessInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
</UL>

<P><STRONG><a name="[261]"></a>StrParserCtl</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StrParserCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrComnandParser
</UL>

<P><STRONG><a name="[260]"></a>StrComnandParser</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = StrComnandParser &rArr; StrParserCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrParserCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
</UL>

<P><STRONG><a name="[9f0]"></a>SysTick_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_tick.o(.text), UNUSED)

<P><STRONG><a name="[9f1]"></a>SysTick_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_tick.o(.text), UNUSED)

<P><STRONG><a name="[9f2]"></a>SysTick_Task</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sys_tick.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>SysTick_Get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
</UL>

<P><STRONG><a name="[264]"></a>SysTick_Get64</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[265]"></a>SysTick_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_DelayMs &rArr; SysTick_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Gsm_Error
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
</UL>

<P><STRONG><a name="[25b]"></a>InitTimeout</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmdNow
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShadowUpdateStatusCallback
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuTask
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData2
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData1
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmdTask_SendCmd
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmd_Task
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasksStart
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasksInit
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Check
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTaskInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CMGR
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup_Init
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_Reset
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCallDialEndCallback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCallEndCallback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConfigTaskInit
</UL>

<P><STRONG><a name="[25e]"></a>CheckTimeout</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sys_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuTask
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmd_Task
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Check
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
</UL>

<P><STRONG><a name="[266]"></a>TimerDelayms</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sys_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[267]"></a>TIME_GetSec</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, sys_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TIME_GetSec &rArr; mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_AddSec
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSetup
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeTest
</UL>

<P><STRONG><a name="[269]"></a>SysTimeSetup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sys_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SysTimeSetup &rArr; TIME_GetSec &rArr; mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>TIME_GET</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_time.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ssl_cli.o(.text)
</UL>
<P><STRONG><a name="[414]"></a>UpdateRtcTime</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNTP_Task
</UL>

<P><STRONG><a name="[26a]"></a>TIME_FromGsm</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, sys_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[26b]"></a>TIME_FromSec</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, sys_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TIME_FromSec &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_AddSec
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNTP_Task
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeTest
</UL>

<P><STRONG><a name="[26c]"></a>TIME_AddSec</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sys_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
</UL>

<P><STRONG><a name="[26f]"></a>fgetc_stdin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_filestream.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[e5]"></a>fputc</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ampm_filestream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fputc &rArr; fputc_stdout &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc_stdout
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[9f3]"></a>feof</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ampm_filestream.o(.text), UNUSED)

<P><STRONG><a name="[9f4]"></a>ftell</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ampm_filestream.o(.text), UNUSED)

<P><STRONG><a name="[4c3]"></a>fflush</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ampm_filestream.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_output
</UL>

<P><STRONG><a name="[9a3]"></a>fseek</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, ampm_filestream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_output
</UL>

<P><STRONG><a name="[26e]"></a>fgetc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ampm_filestream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc_stdin
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsapi_ppp_connect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_output_cb
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[4b7]"></a>AmpmFileHandle_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ampm_filestream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AmpmFileHandle_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[274]"></a>FLASH_FlushCaches</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[273]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_flash_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase_IT
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[270]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[275]"></a>HAL_FLASHEx_Erase_IT</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
</UL>

<P><STRONG><a name="[27a]"></a>HAL_FLASHEx_OBProgram</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_EnableWRP
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_DisableWRP
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDP_LevelConfig
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_BOR_LevelConfig
</UL>

<P><STRONG><a name="[27c]"></a>HAL_FLASHEx_OBGetConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetWRP
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetRDP
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetUser
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetBOR
</UL>

<P><STRONG><a name="[281]"></a>HAL_RNG_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
</UL>

<P><STRONG><a name="[283]"></a>HAL_RNG_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspDeInit
</UL>

<P><STRONG><a name="[285]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal_rng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GetRandomNumber
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</UL>

<P><STRONG><a name="[9f5]"></a>HAL_RNG_GenerateRandomNumber_IT</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_hal_rng.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>HAL_RNG_ReadyDataCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rng.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_IRQHandler
</UL>

<P><STRONG><a name="[287]"></a>HAL_RNG_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rng.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_IRQHandler
</UL>

<P><STRONG><a name="[286]"></a>HAL_RNG_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_ErrorCallback
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_ReadyDataCallback
</UL>

<P><STRONG><a name="[289]"></a>HAL_RNG_GetRandomNumber</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>

<P><STRONG><a name="[9f6]"></a>HAL_RNG_GetRandomNumber_IT</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_rng.o(.text), UNUSED)

<P><STRONG><a name="[9f7]"></a>HAL_RNG_ReadLastRandomNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rng.o(.text), UNUSED)

<P><STRONG><a name="[9f8]"></a>HAL_RNG_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rng.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[28d]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>

<P><STRONG><a name="[28e]"></a>HAL_DMA_Start</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>

<P><STRONG><a name="[290]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_ReadStart
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_WriteStart
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_DMA
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStart_DMA
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_DMA
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_DMA
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_DMA
</UL>

<P><STRONG><a name="[291]"></a>HAL_DMA_Abort</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_ReadStop
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_WriteStop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStop_DMA
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DMAStop
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
</UL>

<P><STRONG><a name="[328]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort_IT
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort_IT
</UL>

<P><STRONG><a name="[292]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[3ae]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[9f9]"></a>HAL_DMA_RegisterCallback</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[9fa]"></a>HAL_DMA_UnRegisterCallback</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[9fb]"></a>HAL_DMA_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[9fc]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9fd]"></a>HAL_RCCEx_GetPeriphCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[9fe]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[9ff]"></a>HAL_RTCEx_SetTimeStamp</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[a00]"></a>HAL_RTCEx_SetTimeStamp_IT</STRONG> (Thumb, 178 bytes, Stack size 12 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[a01]"></a>HAL_RTCEx_DeactivateTimeStamp</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>HAL_RTCEx_GetTimeStamp</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[a02]"></a>HAL_RTCEx_SetTamper</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[a03]"></a>HAL_RTCEx_SetTamper_IT</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[a04]"></a>HAL_RTCEx_DeactivateTamper</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>HAL_RTCEx_Tamper2EventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TamperTimeStampIRQHandler
</UL>

<P><STRONG><a name="[29a]"></a>HAL_RTCEx_Tamper1EventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TamperTimeStampIRQHandler
</UL>

<P><STRONG><a name="[299]"></a>HAL_RTCEx_TimeStampEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TamperTimeStampIRQHandler
</UL>

<P><STRONG><a name="[298]"></a>HAL_RTCEx_TamperTimeStampIRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_TimeStampEventCallback
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_Tamper1EventCallback
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_Tamper2EventCallback
</UL>

<P><STRONG><a name="[29c]"></a>HAL_RTCEx_PollForTimeStampEvent</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[29d]"></a>HAL_RTCEx_PollForTamper1Event</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[29e]"></a>HAL_RTCEx_PollForTamper2Event</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[29f]"></a>HAL_RTCEx_SetWakeUpTimer</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[a05]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 316 bytes, Stack size 12 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>HAL_RTCEx_DeactivateWakeUpTimer</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[a06]"></a>HAL_RTCEx_GetWakeUpTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>HAL_RTCEx_WakeUpTimerEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_RTCEx_WakeUpTimerIRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>

<P><STRONG><a name="[2a3]"></a>HAL_RTCEx_PollForWakeUpTimerEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[3c0]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[3bf]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[2a4]"></a>HAL_RTCEx_SetCoarseCalib</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_RTCEx_DeactivateCoarseCalib</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_RTCEx_SetSmoothCalib</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2a8]"></a>HAL_RTCEx_SetSynchroShift</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[a07]"></a>HAL_RTCEx_SetCalibrationOutPut</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[a08]"></a>HAL_RTCEx_DeactivateCalibrationOutPut</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>HAL_RTCEx_SetRefClock</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_RTCEx_DeactivateRefClock</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[a09]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[a0a]"></a>HAL_RTCEx_DisableBypassShadow</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[2ac]"></a>HAL_RTCEx_PollForAlarmBEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[a0b]"></a>HAL_ADCEx_InjectedStart</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[a0c]"></a>HAL_ADCEx_InjectedStart_IT</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[a0d]"></a>HAL_ADCEx_InjectedStop</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>HAL_ADCEx_InjectedPollForConversion</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[a0e]"></a>HAL_ADCEx_InjectedStop_IT</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[a0f]"></a>HAL_ADCEx_InjectedGetValue</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>HAL_ADCEx_MultiModeStart_DMA</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2b2]"></a>HAL_ADCEx_MultiModeStop_DMA</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[a10]"></a>HAL_ADCEx_MultiModeGetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[a11]"></a>HAL_ADCEx_InjectedConfigChannel</STRONG> (Thumb, 540 bytes, Stack size 12 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[a12]"></a>HAL_ADCEx_MultiModeConfigChannel</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[2b4]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2b3]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>

<P><STRONG><a name="[a13]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[a14]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a15]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>HAL_TIM_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAError
</UL>

<P><STRONG><a name="[67]"></a>TIM_DMAError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim_ex.o(.text)
<LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[2ba]"></a>HAL_TIM_Base_Start_DMA</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[a16]"></a>HAL_TIM_Base_Stop_DMA</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[2be]"></a>HAL_TIM_OC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DeInit
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_TIM_OC_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspDeInit
</UL>

<P><STRONG><a name="[2c0]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_DMA
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_IT
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_IT
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop_IT
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start_IT
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_DMA
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_DMA
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_DMA
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_DMA
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_DMA
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_IT
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_IT
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start
</UL>

<P><STRONG><a name="[2bf]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2c1]"></a>HAL_TIM_OC_Stop</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2c2]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2c3]"></a>HAL_TIM_OC_Stop_IT</STRONG> (Thumb, 196 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2c4]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseCplt
</UL>

<P><STRONG><a name="[68]"></a>TIM_DMADelayPulseCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMADelayPulseCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim_ex.o(.text)
<LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[2c5]"></a>HAL_TIM_OC_Start_DMA</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_TIM_OC_Stop_DMA</STRONG> (Thumb, 202 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2c8]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_TIM_PWM_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_DeInit
</UL>

<P><STRONG><a name="[2c9]"></a>HAL_TIM_PWM_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspDeInit
</UL>

<P><STRONG><a name="[2cb]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2cd]"></a>HAL_TIM_PWM_Start_IT</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2ce]"></a>HAL_TIM_PWM_Stop_IT</STRONG> (Thumb, 196 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2cf]"></a>HAL_TIM_PWM_Start_DMA</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_TIM_PWM_Stop_DMA</STRONG> (Thumb, 202 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2d2]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[2d1]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[2d4]"></a>HAL_TIM_IC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_DeInit
</UL>

<P><STRONG><a name="[2d3]"></a>HAL_TIM_IC_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspDeInit
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_TIM_IC_Start</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_TIM_IC_Stop</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2d8]"></a>HAL_TIM_IC_Stop_IT</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2d9]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACaptureCplt
</UL>

<P><STRONG><a name="[6b]"></a>TIM_DMACaptureCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMACaptureCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim_ex.o(.text)
<LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[2da]"></a>HAL_TIM_IC_Start_DMA</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2db]"></a>HAL_TIM_IC_Stop_DMA</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2dd]"></a>HAL_TIM_OnePulse_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
</UL>

<P><STRONG><a name="[2dc]"></a>HAL_TIM_OnePulse_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[2df]"></a>HAL_TIM_OnePulse_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_DeInit
</UL>

<P><STRONG><a name="[2de]"></a>HAL_TIM_OnePulse_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspDeInit
</UL>

<P><STRONG><a name="[2e0]"></a>HAL_TIM_OnePulse_Start</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2e1]"></a>HAL_TIM_OnePulse_Stop</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2e2]"></a>HAL_TIM_OnePulse_Start_IT</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2e3]"></a>HAL_TIM_OnePulse_Stop_IT</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[2e4]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[2e7]"></a>HAL_TIM_Encoder_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_DeInit
</UL>

<P><STRONG><a name="[2e6]"></a>HAL_TIM_Encoder_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspDeInit
</UL>

<P><STRONG><a name="[2e8]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2e9]"></a>HAL_TIM_Encoder_Stop</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2ea]"></a>HAL_TIM_Encoder_Start_IT</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2eb]"></a>HAL_TIM_Encoder_Stop_IT</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2ec]"></a>HAL_TIM_Encoder_Start_DMA</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2ed]"></a>HAL_TIM_Encoder_Stop_DMA</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2f1]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMATriggerCplt
</UL>

<P><STRONG><a name="[2ef]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2ee]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; SysWatchdog &rArr; mUART5_PutString &rArr; mUART5_PutChar &rArr; UART5_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[2f5]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[2f3]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
</UL>

<P><STRONG><a name="[2f9]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[2f8]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI3_SetConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI4_SetConfig
</UL>

<P><STRONG><a name="[2fd]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
</UL>

<P><STRONG><a name="[2fe]"></a>HAL_TIM_OnePulse_ConfigChannel</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>

<P><STRONG><a name="[2ff]"></a>HAL_TIM_DMABurst_WriteStart</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[300]"></a>HAL_TIM_DMABurst_WriteStop</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[301]"></a>HAL_TIM_DMABurst_ReadStart</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[302]"></a>HAL_TIM_DMABurst_ReadStop</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[a17]"></a>HAL_TIM_GenerateEvent</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>HAL_TIM_ConfigOCrefClear</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>

<P><STRONG><a name="[305]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>

<P><STRONG><a name="[a18]"></a>HAL_TIM_ConfigTI1Input</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>HAL_TIM_SlaveConfigSynchronization</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[30b]"></a>HAL_TIM_SlaveConfigSynchronization_IT</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[a19]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[a1a]"></a>HAL_TIM_Base_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[a1b]"></a>HAL_TIM_OC_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[a1c]"></a>HAL_TIM_PWM_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[a1d]"></a>HAL_TIM_IC_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[a1e]"></a>HAL_TIM_OnePulse_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[a1f]"></a>HAL_TIM_Encoder_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Setup
</UL>

<P><STRONG><a name="[311]"></a>HAL_HalfDuplex_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[312]"></a>HAL_LIN_Init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[313]"></a>HAL_MultiProcessor_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[314]"></a>HAL_UART_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[317]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[318]"></a>HAL_UART_Receive</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[a20]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[a21]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[31c]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[31d]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[31e]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_IRQHandler
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_IRQHandler
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_IRQHandler
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_IRQHandler
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_PutChar
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_PutChar
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutChar
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_PutChar
</UL>

<P><STRONG><a name="[31f]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[320]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[321]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Init
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[a22]"></a>HAL_UART_DMAPause</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[a23]"></a>HAL_UART_DMAResume</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[323]"></a>HAL_UART_Abort</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[324]"></a>HAL_UART_AbortTransmit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[325]"></a>HAL_UART_AbortReceive</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[326]"></a>HAL_UART_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort_IT
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxAbortCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxAbortCallback
</UL>

<P><STRONG><a name="[327]"></a>HAL_UART_Abort_IT</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[329]"></a>HAL_UART_AbortTransmitCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxOnlyAbortCallback
</UL>

<P><STRONG><a name="[32a]"></a>HAL_UART_AbortTransmit_IT</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_AbortTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_IRQHandler
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_IRQHandler
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_IRQHandler
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_IRQHandler
</UL>

<P><STRONG><a name="[32b]"></a>HAL_UART_AbortReceiveCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxOnlyAbortCallback
</UL>

<P><STRONG><a name="[32c]"></a>HAL_UART_AbortReceive_IT</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[32f]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[a24]"></a>HAL_LIN_SendBreak</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[a25]"></a>HAL_MultiProcessor_EnterMuteMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[a26]"></a>HAL_MultiProcessor_ExitMuteMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[a27]"></a>HAL_HalfDuplex_EnableTransmitter</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[a28]"></a>HAL_HalfDuplex_EnableReceiver</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[a29]"></a>HAL_UART_GetState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[a2a]"></a>HAL_UART_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>HAL_GPIO_Init</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[3da]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>

<P><STRONG><a name="[434]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Ringing_RI_isActive
</UL>

<P><STRONG><a name="[3c8]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_IRQHandler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrLed
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_PutChar
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__GlobalProtect
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteDisable
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__CmdReadBuf
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__CmdWrite
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__CmdRead
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_POWER_Set
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_POWER_Clr
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_MOSFET_On
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_MOSFET_Off
</UL>

<P><STRONG><a name="[a2b]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a2c]"></a>HAL_GPIO_LockPin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[2a9]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetSynchroShift
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[2a5]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateRefClock
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetRefClock
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateCoarseCalib
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetCoarseCalib
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[333]"></a>HAL_RTC_Init</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[335]"></a>HAL_RTC_DeInit</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspDeInit
</UL>

<P><STRONG><a name="[297]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_GetTimeStamp
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>

<P><STRONG><a name="[338]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[337]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[339]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_UpdateNewTime
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarShow
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CCLK
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_FindNext
</UL>

<P><STRONG><a name="[33a]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[33b]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_UpdateNewTime
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarShow
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CCLK
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_FindNext
</UL>

<P><STRONG><a name="[33c]"></a>HAL_RTC_SetAlarm</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[33d]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 550 bytes, Stack size 28 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Set
</UL>

<P><STRONG><a name="[33e]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[33f]"></a>HAL_RTC_GetAlarm</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_GetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_UpdateNewTime
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarShow
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Check
</UL>

<P><STRONG><a name="[340]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[343]"></a>HAL_RTC_PollForAlarmAEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[a2d]"></a>HAL_RTC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>HAL_IWDG_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[a2e]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[345]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[3aa]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[3db]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspDeInit
</UL>

<P><STRONG><a name="[a2f]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a30]"></a>HAL_MPU_Disable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[a31]"></a>HAL_MPU_Enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[a32]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>HAL_NVIC_GetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>

<P><STRONG><a name="[a33]"></a>HAL_NVIC_GetPriority</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[a34]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[a35]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[a36]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[a37]"></a>HAL_NVIC_GetActive</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[34b]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[34a]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[34d]"></a>HAL_TIMEx_HallSensor_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[34c]"></a>HAL_TIMEx_HallSensor_Init</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_MspInit
</UL>

<P><STRONG><a name="[34f]"></a>HAL_TIMEx_HallSensor_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_DeInit
</UL>

<P><STRONG><a name="[34e]"></a>HAL_TIMEx_HallSensor_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_MspDeInit
</UL>

<P><STRONG><a name="[350]"></a>HAL_TIMEx_HallSensor_Start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[351]"></a>HAL_TIMEx_HallSensor_Stop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[352]"></a>HAL_TIMEx_HallSensor_Start_IT</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[353]"></a>HAL_TIMEx_HallSensor_Stop_IT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[354]"></a>HAL_TIMEx_HallSensor_Start_DMA</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[355]"></a>HAL_TIMEx_HallSensor_Stop_DMA</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[356]"></a>HAL_TIMEx_OCN_Start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[358]"></a>HAL_TIMEx_OCN_Stop</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[359]"></a>HAL_TIMEx_OCN_Start_IT</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[35a]"></a>HAL_TIMEx_OCN_Stop_IT</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[35b]"></a>HAL_TIMEx_OCN_Start_DMA</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[35c]"></a>HAL_TIMEx_OCN_Stop_DMA</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[35d]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[35e]"></a>HAL_TIMEx_PWMN_Stop</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[35f]"></a>HAL_TIMEx_PWMN_Start_IT</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[360]"></a>HAL_TIMEx_PWMN_Stop_IT</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[361]"></a>HAL_TIMEx_PWMN_Start_DMA</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[362]"></a>HAL_TIMEx_PWMN_Stop_DMA</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[363]"></a>HAL_TIMEx_OnePulseN_Start</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[364]"></a>HAL_TIMEx_OnePulseN_Stop</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[365]"></a>HAL_TIMEx_OnePulseN_Start_IT</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[366]"></a>HAL_TIMEx_OnePulseN_Stop_IT</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[a38]"></a>HAL_TIMEx_ConfigCommutationEvent</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[a39]"></a>HAL_TIMEx_ConfigCommutationEvent_IT</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEx_DMACommutationCplt
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>TIMEx_DMACommutationCplt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMEx_DMACommutationCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim_ex.o(.text)
<LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[a3a]"></a>HAL_TIMEx_ConfigCommutationEvent_DMA</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[a3b]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[a3c]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[a3d]"></a>HAL_TIMEx_RemapConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a3e]"></a>HAL_TIMEx_HallSensor_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36b]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[36a]"></a>HAL_DeInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[3d9]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[263]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelayms
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get64
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedPollForConversion
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PollForAlarmBEvent
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetSynchroShift
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetSmoothCalib
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PollForWakeUpTimerEvent
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PollForTamper2Event
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PollForTamper1Event
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PollForTimeStampEvent
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForEvent
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_PollForAlarmAEvent
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
</UL>

<P><STRONG><a name="[36c]"></a>HAL_Delay</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3f]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a40]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a41]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a42]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a43]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a44]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a45]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a46]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a47]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a48]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a49]"></a>HAL_DisableCompensationCell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[a4a]"></a>HAL_GetUID</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_EnableWRP
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_DisableWRP
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDP_LevelConfig
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[36e]"></a>HAL_FLASH_Program</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[373]"></a>HAL_FLASH_Program_IT</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>

<P><STRONG><a name="[376]"></a>HAL_FLASH_EndOfOperationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[375]"></a>HAL_FLASH_OperationErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[374]"></a>HAL_FLASH_IRQHandler</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OperationErrorCallback
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_EndOfOperationCallback
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>

<P><STRONG><a name="[3ec]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[3ed]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[a4b]"></a>HAL_FLASH_OB_Unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[a4c]"></a>HAL_FLASH_OB_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>HAL_FLASH_OB_Launch</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a4d]"></a>HAL_FLASH_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[37b]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>

<P><STRONG><a name="[a4e]"></a>HAL_ADC_Start</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[a4f]"></a>HAL_ADC_Stop</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[37e]"></a>HAL_ADC_PollForEvent</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[a50]"></a>HAL_ADC_Start_IT</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[a51]"></a>HAL_ADC_Stop_IT</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiModeDMAError
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[381]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiModeDMAConvCplt
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[37f]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
</UL>

<P><STRONG><a name="[2af]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiModeDMAHalfConvCplt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[382]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[383]"></a>HAL_ADC_Stop_DMA</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[a52]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[3c4]"></a>HAL_ADC_AnalogWDGConfig</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[a53]"></a>HAL_ADC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[a54]"></a>HAL_ADC_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1040 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[385]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[387]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[388]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[a55]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[a56]"></a>HAL_RCC_DisableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[30e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[30d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a57]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 288 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[38c]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[38b]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>

<P><STRONG><a name="[38d]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[38f]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>

<P><STRONG><a name="[393]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[394]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 542 bytes, Stack size 48 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>

<P><STRONG><a name="[395]"></a>HAL_SPI_Receive</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[398]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>

<P><STRONG><a name="[397]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>

<P><STRONG><a name="[a58]"></a>HAL_SPI_Transmit_IT</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>

<P><STRONG><a name="[39c]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[39e]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
</UL>

<P><STRONG><a name="[39d]"></a>HAL_SPI_Receive_IT</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>

<P><STRONG><a name="[39f]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[3a0]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[3a1]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[3a2]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[3a3]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[3a4]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>

<P><STRONG><a name="[3a5]"></a>HAL_SPI_Abort</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[3a6]"></a>HAL_SPI_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort_IT
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATxAbortCallback
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMARxAbortCallback
</UL>

<P><STRONG><a name="[3a7]"></a>HAL_SPI_Abort_IT</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_AbortCpltCallback
</UL>

<P><STRONG><a name="[a59]"></a>HAL_SPI_DMAPause</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[a5a]"></a>HAL_SPI_DMAResume</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>HAL_SPI_DMAStop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[3a9]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>

<P><STRONG><a name="[a5b]"></a>HAL_SPI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[a5c]"></a>HAL_SPI_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[a5d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>HAL_InitTick</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, stm32f4xx_hal_timebase_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a5e]"></a>HAL_SuspendTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_timebase_tim.o(.text), UNUSED)

<P><STRONG><a name="[a5f]"></a>HAL_ResumeTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_timebase_tim.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>configureTimerForRunTimeStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[231]"></a>getRunTimeCounterValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[235]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[22e]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[232]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[1af]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HardFault_Handler &rArr; mUART5_PutString &rArr; mUART5_PutChar &rArr; UART5_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_PutString
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; SysWatchdog &rArr; mUART5_PutString &rArr; mUART5_PutChar &rArr; UART5_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART1_IRQHandler &rArr; mUSART1_IRQHandler &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART4_IRQHandler &rArr; mUART4_IRQHandler &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART5_IRQHandler &rArr; mUART5_IRQHandler &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART6_IRQHandler &rArr; mUSART6_IRQHandler &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26d]"></a>fputc_stdout</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fputc_stdout &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3b4]"></a>aws_task_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>

<P><STRONG><a name="[3b5]"></a>aws_task_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[3b7]"></a>_Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Setup
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Set
</UL>

<P><STRONG><a name="[3c9]"></a>SystemClock_Config</STRONG> (Thumb, 244 bytes, Stack size 96 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>main</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSetup
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogInit
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Init
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[332]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetRinging
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[341]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>StartDefaultTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = StartDefaultTask &rArr; vSmartLightMainTask &rArr; PowerSensor_Task &rArr; MeterElterTasks &rArr; elsterParse &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[2b9]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; SysWatchdog &rArr; mUART5_PutString &rArr; mUART5_PutChar &rArr; UART5_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_GetChar
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IsOk
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdog
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrLed
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_PutcRx
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetPhase
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAPeriodElapsedCplt
</UL>

<P><STRONG><a name="[369]"></a>HAL_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[379]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[37c]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[282]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[284]"></a>HAL_RNG_MspDeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
</UL>

<P><STRONG><a name="[334]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[336]"></a>HAL_RTC_MspDeInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
</UL>

<P><STRONG><a name="[38e]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[390]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[310]"></a>HAL_UART_MspInit</STRONG> (Thumb, 1570 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[315]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[43f]"></a>ResetMcuSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
</UL>

<P><STRONG><a name="[3dc]"></a>ResetMcuTask</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ResetMcuTask &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[3cb]"></a>CFG_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CFG_Init &rArr; osSemaphoreCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3de]"></a>CFG_ReLoad</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3df]"></a>DeviceIoStatus_Save</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_SendParamToServer
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIoStatus_Load
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
</UL>

<P><STRONG><a name="[3e2]"></a>OS_DeviceIoStatus_Save</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OS_DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_SendParamToServer
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_relay_status
</UL>

<P><STRONG><a name="[3e3]"></a>DeviceIoStatus_Load</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = DeviceIoStatus_Load &rArr; DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Read
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIoStatus_Save
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
</UL>

<P><STRONG><a name="[3e5]"></a>DeviceCfg_Save</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_SendParamToServer
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedules_Status_DeltaCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmds_Status_DeltaCallback
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Load
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
</UL>

<P><STRONG><a name="[3e6]"></a>DeviceCfg_Load</STRONG> (Thumb, 1258 bytes, Stack size 24 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = DeviceCfg_Load &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Read
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Save
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
</UL>

<P><STRONG><a name="[3e8]"></a>FLASH_ErasePage</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FLASH_ErasePage &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSector
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[3ea]"></a>CFG_Save</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CFG_Save &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_SendParamToServer
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmds_Status_DeltaCallback
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[3cc]"></a>CFG_Load</STRONG> (Thumb, 760 bytes, Stack size 24 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CFG_Load &rArr; CFG_Save &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
</UL>

<P><STRONG><a name="[a60]"></a>CFG_CheckSum</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system_config.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>mbedtls_hardware_poll</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, hardware_rng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_hardware_poll &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test_gather
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entropy.o(.text)
</UL>
<P><STRONG><a name="[407]"></a>iot_shadow_thing_start</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = iot_shadow_thing_start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[eb]"></a>Line1_Status_DeltaCallback</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Line1_Status_DeltaCallback &rArr; relay_on &rArr; update_relay_status &rArr; OS_DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shadow_thing.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>Line2_Status_DeltaCallback</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Line2_Status_DeltaCallback &rArr; relay_on &rArr; update_relay_status &rArr; OS_DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shadow_thing.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>Line3_Status_DeltaCallback</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Line3_Status_DeltaCallback &rArr; relay_on &rArr; update_relay_status &rArr; OS_DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shadow_thing.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>Line4_Status_DeltaCallback</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Line4_Status_DeltaCallback &rArr; relay_on &rArr; update_relay_status &rArr; OS_DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shadow_thing.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>Cmds_Status_DeltaCallback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Cmds_Status_DeltaCallback &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Save
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shadow_thing.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>Schedules_Time_Status_DeltaCallback</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Schedules_Time_Status_DeltaCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shadow_thing.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>Schedules_wD_Status_DeltaCallback</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Schedules_wD_Status_DeltaCallback &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shadow_thing.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>Schedules_Cmd_Status_DeltaCallback</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Schedules_Cmd_Status_DeltaCallback &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shadow_thing.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>Schedules_Status_DeltaCallback</STRONG> (Thumb, 1156 bytes, Stack size 264 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Schedules_Status_DeltaCallback &rArr; UpdateValueIfNoObject &rArr; parseDoubleValue &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsoneq
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_init
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateValueIfNoObject
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Save
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shadow_thing.o(.constdata)
</UL>
<P><STRONG><a name="[429]"></a>Trigger_SendReportToServer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, shadow_thing.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
</UL>

<P><STRONG><a name="[3e1]"></a>Trigger_SendParamToServer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, shadow_thing.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Save
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeviceIoStatus_Save
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIoStatus_Save
</UL>

<P><STRONG><a name="[a61]"></a>ntp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ntp_server.o(.text), UNUSED)

<P><STRONG><a name="[a62]"></a>ntp_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ntp_server.o(.text), UNUSED)

<P><STRONG><a name="[416]"></a>ntp_stop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ntp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ntp_stop &rArr; lwip_net_free &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_start
</UL>

<P><STRONG><a name="[493]"></a>ntp_get_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ntp_server.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarShow
</UL>

<P><STRONG><a name="[417]"></a>ntp_start</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ntp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ntp_start &rArr; ntp_stop &rArr; lwip_net_free &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_stop
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[a63]"></a>is_ntp_server_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ntp_server.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>vSmartLightMainTask</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, smartlight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = vSmartLightMainTask &rArr; PowerSensor_Task &rArr; MeterElterTasks &rArr; elsterParse &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_start
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogFeed
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_SendReportToServer
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_shadow_thing_start
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Load
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIoStatus_Load
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuTask
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Callback
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display_mem
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_backup_start
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTaskInit
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogEnable
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogDisable
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReportSmsToUser
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarShow
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleSetStatus
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSetMode
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Check
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[3cd]"></a>SysWatchdogInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SysWatchdogInit &rArr; osSemaphoreCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42b]"></a>OsWatchdogFeed</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, watchdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[42c]"></a>OsWatchdogEnable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, watchdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>

<P><STRONG><a name="[42d]"></a>OsWatchdogDisable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, watchdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>

<P><STRONG><a name="[41b]"></a>SysWatchdogEnable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SysWatchdogEnable &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[419]"></a>SysWatchdogDisable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SysWatchdogDisable &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[3f5]"></a>SysWatchdogFeed</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SysWatchdogFeed &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[3d2]"></a>SysWatchdog</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SysWatchdog &rArr; mUART5_PutString &rArr; mUART5_PutChar &rArr; UART5_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_PutString
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[a64]"></a>all_sms_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sms_task.o(.text), UNUSED)

<P><STRONG><a name="[42f]"></a>FindUserPhone</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sms_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FindUserPhone &rArr; Ampm_ComparePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAllPhone
</UL>

<P><STRONG><a name="[431]"></a>FindBossPhone</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sms_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindBossPhone &rArr; Ampm_ComparePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAllPhone
</UL>

<P><STRONG><a name="[432]"></a>FindAllPhone</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sms_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindAllPhone &rArr; FindUserPhone &rArr; Ampm_ComparePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBossPhone
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindUserPhone
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
</UL>

<P><STRONG><a name="[433]"></a>io_process_action_task</STRONG> (Thumb, 1278 bytes, Stack size 192 bytes, sms_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = io_process_action_task &rArr; relay_on &rArr; update_relay_status &rArr; OS_DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeviceIoStatus_Save
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_UpdateNewTime
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallSetAction
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsText
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAllPhone
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[42a]"></a>SendReportSmsToUser</STRONG> (Thumb, 870 bytes, Stack size 16 bytes, sms_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SendReportSmsToUser &rArr; AmpmGsm_SendSmsText &rArr; AmpmGsm_SendSms &rArr; Ampm_Sms_SendMsg &rArr; Ampm_SmsAddMsg &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsText
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[a65]"></a>process_sms</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, sms_task.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>Ampm_MainSmsRecvCallback</STRONG> (Thumb, 11680 bytes, Stack size 368 bytes, sms_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = Ampm_MainSmsRecvCallback &rArr; relay_on &rArr; update_relay_status &rArr; OS_DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucs2_to_utf8
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Save
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuSet
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_UpdateNewTime
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Getc
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingReset
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsText
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAllPhone
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.text)
</UL>
<P><STRONG><a name="[443]"></a>SST25_Erase</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEAR
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Write
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Erase
</UL>

<P><STRONG><a name="[445]"></a>OS_SST25_Erase</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OS_SST25_Erase &rArr; SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
</UL>

<P><STRONG><a name="[446]"></a>_SST25_Read</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEAR
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
</UL>

<P><STRONG><a name="[447]"></a>SST25_Read</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Read
</UL>

<P><STRONG><a name="[3e4]"></a>OS_SST25_Read</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OS_SST25_Read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Load
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIoStatus_Load
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFirmwareFile
</UL>

<P><STRONG><a name="[448]"></a>__SST25_Write</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEAR
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_WriteNoErase
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Write
</UL>

<P><STRONG><a name="[449]"></a>_SST25_Write</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
</UL>

<P><STRONG><a name="[44a]"></a>SST25_Write</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Write
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Write
</UL>

<P><STRONG><a name="[3e0]"></a>OS_SST25_Write</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Save
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeviceIoStatus_Save
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIoStatus_Save
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
</UL>

<P><STRONG><a name="[44b]"></a>OS_SST25_WriteNoErase</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sst25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
</UL>

<P><STRONG><a name="[41a]"></a>SST25_Init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SST25_Init &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__CmdReadBuf
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__CmdWrite
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[451]"></a>IO_ControlInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, io_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IO_ControlInit &rArr; osSemaphoreCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
</UL>

<P><STRONG><a name="[428]"></a>IO_ToggleSetStatus</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, io_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IO_ToggleSetStatus &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
</UL>

<P><STRONG><a name="[452]"></a>IO_ToggleProcess</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, io_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrLed
</UL>

<P><STRONG><a name="[418]"></a>LedInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LedInit &rArr; IO_ToggleSetStatus &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ControlInit
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleSetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[3d3]"></a>CtrLed</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CtrLed
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[453]"></a>vOTA_Backup_Check</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ota_backup_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vOTA_Backup_Check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
</UL>

<P><STRONG><a name="[458]"></a>ota_backup_stop</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ota_backup_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ota_backup_stop &rArr; lwip_net_free &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_backup_start
</UL>

<P><STRONG><a name="[41f]"></a>ota_backup_start</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ota_backup_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ota_backup_start &rArr; ota_backup_stop &rArr; lwip_net_free &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_backup_stop
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[420]"></a>PowerSensor_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, power_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PowerSensor_Init &rArr; MeterElterTasksInit &rArr; UART4_Setup &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasksInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[498]"></a>PowerSensorPause</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, power_sensor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_relay_status
</UL>

<P><STRONG><a name="[422]"></a>PowerSensor_Task</STRONG> (Thumb, 3136 bytes, Stack size 184 bytes, power_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = PowerSensor_Task &rArr; MeterElterTasks &rArr; elsterParse &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_SendReportToServer
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_PutString
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_GetChar
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks_IsIdle
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterRead
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[478]"></a>creat_P2</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = creat_P2
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmdP2
</UL>

<P><STRONG><a name="[477]"></a>calc_bcc_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_bcc_data
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData2
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvCmdGetP0
</UL>

<P><STRONG><a name="[461]"></a>calc_bcc_funs</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calc_bcc_funs &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmd2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmd1
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmdP2
</UL>

<P><STRONG><a name="[45e]"></a>MeterElterTasks_IsIdle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, elster_tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
</UL>

<P><STRONG><a name="[45d]"></a>MeterElterRead</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MeterElterRead &rArr; UART4_Setup &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
</UL>

<P><STRONG><a name="[459]"></a>MeterElterTasksInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MeterElterTasksInit &rArr; UART4_Setup &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Init
</UL>

<P><STRONG><a name="[464]"></a>MeterElterTasksStart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, elster_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
</UL>

<P><STRONG><a name="[465]"></a>MeterElsterTasksClose</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, elster_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Setup
</UL>

<P><STRONG><a name="[466]"></a>ElsterCmd_Task</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ElsterCmd_Task &rArr; mUART4_GetChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_GetChar
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
</UL>

<P><STRONG><a name="[476]"></a>ElsterCmdTask_GetPhase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, elster_tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
</UL>

<P><STRONG><a name="[46e]"></a>JsonSave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, elster_tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
</UL>

<P><STRONG><a name="[468]"></a>elsterConvertData</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = elsterConvertData &rArr; atoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoll
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
</UL>

<P><STRONG><a name="[470]"></a>data_reverse</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = data_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
</UL>

<P><STRONG><a name="[471]"></a>endian_convert_u32</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = endian_convert_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
</UL>

<P><STRONG><a name="[46a]"></a>cmd606_process</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cmd606_process &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
</UL>

<P><STRONG><a name="[46c]"></a>get_packetforhis</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = get_packetforhis &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
</UL>

<P><STRONG><a name="[46d]"></a>elsterParse</STRONG> (Thumb, 4214 bytes, Stack size 296 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = elsterParse &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Save
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packetforhis
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd606_process
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endian_convert_u32
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_reverse
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterConvertData
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonSave
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoll
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData2
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvCmdStart
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
</UL>

<P><STRONG><a name="[475]"></a>ElsterCmdCheckList_IsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, elster_tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
</UL>

<P><STRONG><a name="[472]"></a>ElsterCmdAddToList</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ElsterCmdAddToList &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
</UL>

<P><STRONG><a name="[474]"></a>ElsterCmdTask_IsIdle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, elster_tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmdTask_SendCmd
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
</UL>

<P><STRONG><a name="[45a]"></a>MeterElterTasks</STRONG> (Thumb, 656 bytes, Stack size 8 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = MeterElterTasks &rArr; elsterParse &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutString
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Setup
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmdTask_IsIdle
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmdAddToList
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmdCheckList_IsEmpty
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmdTask_GetPhase
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmd_Task
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
</UL>

<P><STRONG><a name="[f6]"></a>ElsterWriteCmdStart</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ElsterWriteCmdStart &rArr; mUART4_PutString &rArr; mUART4_PutChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutString
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>ElsterRecvCmdStart</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ElsterRecvCmdStart &rArr; elsterParse &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>ElsterWriteCmdStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ElsterWriteCmdStop &rArr; mUART4_PutString &rArr; mUART4_PutChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutString
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[a66]"></a>ElsterRecvCmdStop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, elster_tasks.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>ElsterWriteCmdGetP0</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ElsterWriteCmdGetP0 &rArr; mUART4_PutString &rArr; mUART4_PutChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutString
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>ElsterRecvCmdGetP0</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ElsterRecvCmdGetP0 &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bcc_data
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>ElsterWriteCmdP2</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ElsterWriteCmdP2 &rArr; mUART4_PutString &rArr; mUART4_PutChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutString
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bcc_funs
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_P2
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>ElsterRecvCmdP2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, elster_tasks.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[479]"></a>ElsterCmdTask_SendCmd</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, elster_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmdTask_IsIdle
</UL>

<P><STRONG><a name="[a67]"></a>ElsterCmd0Add</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, elster_tasks.o(.text), UNUSED)

<P><STRONG><a name="[47a]"></a>ElsterSendCmd0</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, elster_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutString
</UL>

<P><STRONG><a name="[47b]"></a>ElsterRecvCmd0</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, elster_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
</UL>

<P><STRONG><a name="[fa]"></a>ElsterWriteCmd</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ElsterWriteCmd &rArr; mUART4_PutString &rArr; mUART4_PutChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutString
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bcc_funs
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>ElsterRecvData</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ElsterRecvData &rArr; elsterParse &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bcc_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>ElsterWriteCmd1</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ElsterWriteCmd1 &rArr; mUART4_PutString &rArr; mUART4_PutChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutString
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bcc_funs
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>ElsterRecvData1</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ElsterRecvData1 &rArr; elsterParse &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bcc_data
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>ElsterWriteCmd2</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ElsterWriteCmd2 &rArr; mUART4_PutString &rArr; mUART4_PutChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutString
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bcc_funs
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>ElsterRecvData2</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, elster_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ElsterRecvData2 &rArr; elsterParse &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bcc_data
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> elster_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[a68]"></a>data_remove_zero</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, elster_tasks.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>USART1_IsOk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[47d]"></a>USART1_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_GetChar
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_PutChar
</UL>

<P><STRONG><a name="[a69]"></a>mUSART1_GetFill</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart1.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>mUSART1_GetChar</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mUSART1_GetChar &rArr; USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[47f]"></a>mUSART1_PutChar</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mUSART1_PutChar &rArr; USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_PutString
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
</UL>

<P><STRONG><a name="[482]"></a>mUSART1_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mUSART1_PutString &rArr; mUSART1_PutChar &rArr; USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
</UL>

<P><STRONG><a name="[3af]"></a>mUSART1_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mUSART1_IRQHandler &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[484]"></a>UART5_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART5_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_PutChar
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_GetChar
</UL>

<P><STRONG><a name="[490]"></a>mUART5_GetRxBufSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
</UL>

<P><STRONG><a name="[48f]"></a>mUART5_GetFill</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
</UL>

<P><STRONG><a name="[485]"></a>mUART5_GetChar</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mUART5_GetChar &rArr; UART5_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
</UL>

<P><STRONG><a name="[3b3]"></a>mUART5_PutChar</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, uart5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mUART5_PutChar &rArr; UART5_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc_stdout
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_PutString
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgUART5SendData
</UL>

<P><STRONG><a name="[3ad]"></a>mUART5_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mUART5_PutString &rArr; mUART5_PutChar &rArr; UART5_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdog
</UL>

<P><STRONG><a name="[3b1]"></a>mUART5_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, uart5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mUART5_IRQHandler &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[441]"></a>halSpiWriteByte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spi1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__GlobalProtect
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteDisable
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__CmdReadBuf
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__CmdWrite
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__CmdRead
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>

<P><STRONG><a name="[486]"></a>UART4_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutChar
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_GetChar
</UL>

<P><STRONG><a name="[463]"></a>UART4_Setup</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART4_Setup &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElsterTasksClose
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasksInit
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterRead
</UL>

<P><STRONG><a name="[492]"></a>mUART4_GetRxBufSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
</UL>

<P><STRONG><a name="[491]"></a>mUART4_GetFill</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
</UL>

<P><STRONG><a name="[467]"></a>mUART4_GetChar</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mUART4_GetChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmd_Task
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
</UL>

<P><STRONG><a name="[487]"></a>mUART4_PutChar</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mUART4_PutChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutString
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgUART4SendData
</UL>

<P><STRONG><a name="[473]"></a>mUART4_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mUART4_PutString &rArr; mUART4_PutChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmd2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmd1
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmd
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterSendCmd0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmdP2
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmdGetP0
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmdStop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmdStart
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
</UL>

<P><STRONG><a name="[3b0]"></a>mUART4_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mUART4_IRQHandler &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[a6a]"></a>USART6_IsOk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart6.o(.text), UNUSED)

<P><STRONG><a name="[488]"></a>USART6_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART6_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_PutChar
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_GetChar
</UL>

<P><STRONG><a name="[a6b]"></a>mUSART6_GetFill</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart6.o(.text), UNUSED)

<P><STRONG><a name="[45c]"></a>mUSART6_GetChar</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mUSART6_GetChar &rArr; USART6_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
</UL>

<P><STRONG><a name="[489]"></a>mUSART6_PutChar</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, uart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mUSART6_PutChar &rArr; USART6_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_PutString
</UL>

<P><STRONG><a name="[45b]"></a>mUSART6_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mUSART6_PutString &rArr; mUSART6_PutChar &rArr; USART6_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART6_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
</UL>

<P><STRONG><a name="[3b2]"></a>mUSART6_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mUSART6_IRQHandler &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[48a]"></a>LoadFirmwareFile</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, app_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LoadFirmwareFile &rArr; OS_SST25_Read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConfigTaskInit
</UL>

<P><STRONG><a name="[48b]"></a>AppConfigTaskInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AppConfigTaskInit &rArr; LoadFirmwareFile &rArr; OS_SST25_Read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFirmwareFile
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTaskInit
</UL>

<P><STRONG><a name="[a6c]"></a>DbgCfgPrintf</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_config_task.o(.text), UNUSED)

<P><STRONG><a name="[48c]"></a>CfgCalcCheckSum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CfgCalcCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
</UL>

<P><STRONG><a name="[457]"></a>CfgProcessData</STRONG> (Thumb, 2176 bytes, Stack size 72 bytes, app_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CfgProcessData &rArr; DeviceCfg_Load &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Read
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Load
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Save
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIoStatus_Load
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIoStatus_Save
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuSet
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SST25_Erase
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgCalcCheckSum
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
</UL>

<P><STRONG><a name="[455]"></a>CfgParserPacket</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, app_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CfgParserPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
</UL>

<P><STRONG><a name="[41e]"></a>UartConfigTaskInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UartConfigTaskInit &rArr; AppConfigTaskInit &rArr; LoadFirmwareFile &rArr; OS_SST25_Read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConfigTaskInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[48d]"></a>CfgUART4SendData</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CfgUART4SendData &rArr; mUART4_PutChar &rArr; UART4_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
</UL>

<P><STRONG><a name="[48e]"></a>CfgUART5SendData</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CfgUART5SendData &rArr; mUART5_PutChar &rArr; UART5_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfigTask
</UL>

<P><STRONG><a name="[421]"></a>UartConfigTask</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, uart_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UartConfigTask &rArr; CfgProcessData &rArr; DeviceCfg_Load &rArr; DeviceCfg_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_GetFill
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_GetRxBufSize
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_GetChar
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_GetFill
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART5_GetRxBufSize
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUART4_GetChar
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks_IsIdle
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgParserPacket
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgUART5SendData
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgUART4SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[435]"></a>RTC_UpdateNewTime</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RTC_UpdateNewTime &rArr; HAL_RTC_GetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
</UL>

<P><STRONG><a name="[424]"></a>RTC_CalendarShow</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_CalendarShow &rArr; HAL_RTC_GetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[415]"></a>RTC_SetTime</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_SetTime &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNTP_Task
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeTest
</UL>

<P><STRONG><a name="[494]"></a>RTC_SetTimeTest</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, alarm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[495]"></a>Alarm_Set</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Alarm_Set &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Check
</UL>

<P><STRONG><a name="[3ff]"></a>Alarm_GetSize</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, alarm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[496]"></a>Alarm_FindNext</STRONG> (Thumb, 662 bytes, Stack size 48 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Alarm_FindNext &rArr; HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Check
</UL>

<P><STRONG><a name="[427]"></a>Alarm_Check</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Alarm_Check &rArr; Alarm_Set &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_FindNext
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[423]"></a>Alarm_Task</STRONG> (Thumb, 902 bytes, Stack size 96 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Alarm_Task &rArr; relay_on &rArr; update_relay_status &rArr; OS_DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsText
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_FindNext
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Set
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[3d0]"></a>Alarm_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, alarm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[3ce]"></a>relay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = relay_init &rArr; osSemaphoreCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[497]"></a>update_relay_status</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = update_relay_status &rArr; OS_DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeviceIoStatus_Save
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensorPause
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
</UL>

<P><STRONG><a name="[409]"></a>relay_on</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = relay_on &rArr; update_relay_status &rArr; OS_DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_relay_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line4_Status_DeltaCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line3_Status_DeltaCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2_Status_DeltaCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line1_Status_DeltaCallback
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
</UL>

<P><STRONG><a name="[40a]"></a>relay_off</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = relay_off &rArr; update_relay_status &rArr; OS_DeviceIoStatus_Save &rArr; OS_SST25_Write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_relay_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line4_Status_DeltaCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line3_Status_DeltaCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2_Status_DeltaCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line1_Status_DeltaCallback
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
</UL>

<P><STRONG><a name="[499]"></a>Ampm_CallTask_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_CallTask_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[49a]"></a>Ampm_VoiceCallCheckList_IsEmpty</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_VoiceCallCheckList_IsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Gsm_IsIdle
</UL>

<P><STRONG><a name="[437]"></a>Ampm_VoiceCallSetAction</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
</UL>

<P><STRONG><a name="[4c2]"></a>Ampm_VoiceCallStartRecvCall</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[49c]"></a>Ampm_VoiceCallAdd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallSetup
</UL>

<P><STRONG><a name="[49d]"></a>Ampm_VoiceCallCancel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>

<P><STRONG><a name="[49e]"></a>Ampm_VoiceCallSetup</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, ampm_gsm_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallAdd
</UL>

<P><STRONG><a name="[49f]"></a>Ampm_CallTaskPeriodic_1Sec</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_CallTaskPeriodic_1Sec
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4a2]"></a>Ampm_CallTask</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_CallTask &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[109]"></a>Ampm_GsmVoiceCallCheckCeerEndCallback</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, ampm_gsm_call.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>Ampm_GsmVoiceCallCheckStateEndCallback</STRONG> (Thumb, 638 bytes, Stack size 80 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Ampm_GsmVoiceCallCheckStateEndCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>Ampm_GsmCallEndCallback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_GsmCallEndCallback &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>Ampm_GsmATM1EndCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_GsmATM1EndCallback &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>Ampm_GsmCallDialEndCallback</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_GsmCallDialEndCallback &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>Ampm_GsmCHLD_1X_Callback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_GsmCHLD_1X_Callback &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>Ampm_GsmCallDialStartCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_GsmCallDialStartCallback &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>Ampm_CallListSetEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ampm_gsm_call.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>Ampm_GetCeer</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, ampm_gsm_call.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>Ampm_GetListOfCurrentCall</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_GetListOfCurrentCall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[4a5]"></a>Ampm_ComparePhoneNumber_1</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, ampm_gsm_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[430]"></a>Ampm_ComparePhoneNumber</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_ComparePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBossPhone
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindUserPhone
</UL>

<P><STRONG><a name="[10d]"></a>Ampm_GsmGetCENG</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ampm_gsm_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_common.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>Ampm_GsmGetCSQ</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ampm_gsm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Ampm_GsmGetCSQ &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ampm_gsm_common.o(.constdata)
<LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>Ampm_GsmATDone</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_GsmATDone &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Ringing_RI_isActive
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_dial_up.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>Ampm_GsmATDone1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_GsmATDone1 &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Ringing_RI_isActive
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_dial_up.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>DialupAtCallback0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DialupAtCallback0 &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_dial_up.o(.constdata)
</UL>
<P><STRONG><a name="[4a7]"></a>Ampm_GSM_DialUp_Reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_GSM_DialUp_Reset &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSwithToIdle
</UL>

<P><STRONG><a name="[4c8]"></a>Ampm_GSM_DialUp_IsOk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4c7]"></a>Ampm_GSM_DialUp_IsDone</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4a8]"></a>Ampm_GSM_DialUp</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Ampm_GSM_DialUp &rArr; COMM_Puts &rArr; mUSART1_PutString &rArr; mUSART1_PutChar &rArr; USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Ringing_RI_isActive
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4ce]"></a>Ampm_GsmGotoCmdMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[a6d]"></a>Ampm_GsmGotoDataMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text), UNUSED)

<P><STRONG><a name="[4b6]"></a>Ampm_GsmSetApn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
</UL>

<P><STRONG><a name="[4a3]"></a>Ampm_SendAtCheck_IsEmpty</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_SendAtCheck_IsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdCheck_IsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RecvSms_IsFinished
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
</UL>

<P><STRONG><a name="[4ad]"></a>Ampm_AtCmdCheckResponse</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ampm_gsm_io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Getc
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
</UL>

<P><STRONG><a name="[43a]"></a>Ampm_SendCommand</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Ampm_SendCommand &rArr; COMM_Puts &rArr; mUSART1_PutString &rArr; mUSART1_PutChar &rArr; USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Getc
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[94]"></a>Ampm_SetCmdOK</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[4a9]"></a>Ampm_SendAtCmd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_SendAtCmd &rArr; Ampm_SendCmd &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_StartRecvSms
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
</UL>

<P><STRONG><a name="[4a4]"></a>Ampm_SendAtCmdNow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmdNow
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv1
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv0
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSent
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CSCA
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGF
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CheckAT_OK
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CheckAT_OK
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmMainATPhaseFinished
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmATDone1
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmATDone
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCHLD_1X_Callback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCallDialEndCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmATM1EndCallback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
</UL>

<P><STRONG><a name="[107]"></a>Ampm_GsmRecvCallback</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Ampm_GsmRecvCallback &rArr; StrComnandParser &rArr; StrParserCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrComnandParser
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Getc
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 6]<UL><LI> ampm_gsm_common.o(.constdata)
<LI> ampm_gsm_dial_up.o(.constdata)
<LI> ampm_gsm_io.o(.text)
<LI> ampm_gsm_call.o(.constdata)
<LI> ampm_gsm_main_task.o(.constdata)
<LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>Ampm_GsmSendCallback</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Ampm_GsmSendCallback &rArr; COMM_Puts &rArr; mUSART1_PutString &rArr; mUSART1_PutChar &rArr; USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrParserInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Getc
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
</UL>
<BR>[Address Reference Count : 6]<UL><LI> ampm_gsm_common.o(.constdata)
<LI> ampm_gsm_dial_up.o(.constdata)
<LI> ampm_gsm_io.o(.text)
<LI> ampm_gsm_call.o(.constdata)
<LI> ampm_gsm_main_task.o(.constdata)
<LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[4af]"></a>Ampm_CmdTask_SendCmd</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_CmdTask_SendCmd &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_ClearTx
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[3f8]"></a>Ampm_GsmInternetSetDisconnect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ampm_GsmInternetSetDisconnect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[4b1]"></a>Ampm_Gsm_Error</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_Gsm_Error &rArr; SysTick_DelayMs &rArr; SysTick_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[41d]"></a>Ampm_GsmSetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[115]"></a>Ampm_GsmMainATPhaseFinished</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_GsmMainATPhaseFinished &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>Ampm_GsmMainCallPhaseFinished</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.constdata)
</UL>
<P><STRONG><a name="[3f6]"></a>Ampm_GsmGPRS_IsWorking</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNTP_Task
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
</UL>

<P><STRONG><a name="[4b2]"></a>Ampm_Gsm_IsIdle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ampm_gsm_main_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsCheckMessage_IsEmpty
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Ringing_GetPhase
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallCheckList_IsEmpty
</UL>

<P><STRONG><a name="[a6e]"></a>Ampm_GsmIsGood</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>Ampm_MainSwithToIdle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_MainSwithToIdle &rArr; Ampm_GSM_DialUp_Reset &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.text)
</UL>
<P><STRONG><a name="[3d6]"></a>Ampm_GsmGetPhase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[4ba]"></a>vTcpIpTaskInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.text)
</UL>
<P><STRONG><a name="[4b9]"></a>vTcpIpTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.text)
</UL>
<P><STRONG><a name="[41c]"></a>AMPM_GSM_Init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AMPM_GSM_Init &rArr; mbed_lwip_core_init &rArr; tcpip_init &rArr; lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmFileHandle_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_core_init
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask_Init
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSetApn
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[111]"></a>AMPM_GSM_MainTask</STRONG> (Thumb, 3350 bytes, Stack size 32 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = AMPM_GSM_MainTask &rArr; mbed_lwip_ppp_bringup &rArr; ppp_lwip_if_init &rArr; pppos_create &rArr; ppp_new &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogFeed
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Getc
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingReset
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsapi_ppp_disconnect
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsapi_ppp_connect
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_link_status
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_link_set_connected
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringup
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_Wakeup
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_StartRecvSms
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsCheckMessage_IsEmpty
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Ringing_GetPhase
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingTimer
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingProcess
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingEnable
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingDisable
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RecvSms_IsFinished
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Is_RingingEnable
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup_Init
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Gsm_Error
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGotoCmdMode
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Ringing_RI_isActive
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_IsDone
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_IsOk
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_Reset
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTaskPeriodic_1Sec
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallStartRecvCall
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallCheckList_IsEmpty
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask_Init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>GsmGetTime</STRONG> (Thumb, 986 bytes, Stack size 24 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GsmGetTime &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>GsmGetUTCTime</STRONG> (Thumb, 610 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>Ampm_GSM_GetATI</STRONG> (Thumb, 576 bytes, Stack size 16 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_GSM_GetATI &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[456]"></a>SmsResetIntervalCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
</UL>

<P><STRONG><a name="[4d0]"></a>Ampm_RingingTimer</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4b3]"></a>Ampm_Ringing_GetPhase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Gsm_IsIdle
</UL>

<P><STRONG><a name="[4a6]"></a>Ampm_Ringing_RI_isActive</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_Ringing_RI_isActive
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmATDone1
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmATDone
</UL>

<P><STRONG><a name="[4c9]"></a>Ampm_RingingDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4c6]"></a>Ampm_RingingEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4cd]"></a>Ampm_Is_RingingEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[43d]"></a>Ampm_RingingReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[3cf]"></a>Ampm_SetRinging</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[4e7]"></a>Ampm_SetAtRing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_URC_RING_Process
</UL>

<P><STRONG><a name="[4e6]"></a>Ampm_SetAtClip</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_URC_CLIP_Process
</UL>

<P><STRONG><a name="[4d9]"></a>Ampm_SetAtCmti</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_Process
</UL>

<P><STRONG><a name="[4cf]"></a>Ampm_RingingProcess</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ampm_RingingProcess &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[11d]"></a>Ampm_GsmSmsRecvCallback_CheckAT_OK</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_GsmSmsRecvCallback_CheckAT_OK &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[4d2]"></a>Ampm_GsmSmsSendCallback_CheckAT_OK</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>

<P><STRONG><a name="[124]"></a>Ampm_GsmSmsSendCallback_CMGF</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_GsmSmsSendCallback_CMGF &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>Ampm_GsmSmsSendCallback_CSCA</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_GsmSmsSendCallback_CSCA &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[4d3]"></a>Ampm_UpdateStatus</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Ampm_UpdateStatus &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsPolling
</UL>

<P><STRONG><a name="[122]"></a>Ampm_GsmSmsSent</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Ampm_GsmSmsSent &rArr; COMM_Putc &rArr; mUSART1_PutChar &rArr; USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>Ampm_GsmCREG</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ampm_gsm_sms.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>Ampm_GsmSmsSendMessageCallback</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Ampm_GsmSmsSendMessageCallback &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>Ampm_GsmSmsSendCallback_CMGS</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Ampm_GsmSmsSendCallback_CMGS &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>Ampm_GsmSmsRecvCallback_CCLK</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Ampm_GsmSmsRecvCallback_CCLK &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>Ampm_GsmSmsRecvCallback_CMGR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_GsmSmsRecvCallback_CMGR &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>Ampm_GsmSmsRecvCallback_CMGD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_GsmSmsRecvCallback_CMGD &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>Ampm_GsmSmsRecv0</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ampm_GsmSmsRecv0 &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>Ampm_GsmSmsRecv1</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ampm_GsmSmsRecv1 &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>Ampm_GsmSmsRecv2</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Ampm_GsmSmsRecv2 &rArr; COMM_Putc &rArr; mUSART1_PutChar &rArr; USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>Ampm_GsmSmsRecv3</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_GsmSmsRecv3 &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[4bf]"></a>Ampm_StartRecvSms</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_StartRecvSms &rArr; Ampm_SendAtCmd &rArr; Ampm_SendCmd &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4c0]"></a>Ampm_RecvSms_IsFinished</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ampm_RecvSms_IsFinished &rArr; Ampm_SendAtCheck_IsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4bb]"></a>Ampm_SmsTask_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Ampm_SmsTask_Init &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
</UL>

<P><STRONG><a name="[4d1]"></a>Ampm_SmsTaskPeriodic_1Sec</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Ampm_SmsTaskPeriodic_1Sec &rArr; Ampm_UpdateStatus &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tail
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_UpdateStatus
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4d6]"></a>Ampm_SMS_IsInProcess</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>

<P><STRONG><a name="[4c1]"></a>Ampm_SmsTask</STRONG> (Thumb, 566 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Ampm_SmsTask &rArr; Ampm_UpdateStatus &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tail
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_UpdateStatus
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4b4]"></a>Ampm_SmsCheckMessage_IsEmpty</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Ampm_SmsCheckMessage_IsEmpty &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Gsm_IsIdle
</UL>

<P><STRONG><a name="[4d7]"></a>Ampm_SmsAddMsg</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Ampm_SmsAddMsg &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Sms_SendMsg
</UL>

<P><STRONG><a name="[4d8]"></a>Ampm_Sms_SendMsg</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Ampm_Sms_SendMsg &rArr; Ampm_SmsAddMsg &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsAddMsg
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
</UL>

<P><STRONG><a name="[128]"></a>Ampm_SMS_ReadMsg</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, ampm_gsm_sms.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>Ampm_GetServiceCenterNumber</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_GetServiceCenterNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>Ampm_SMS_URC_Incomming</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_SMS_URC_Incomming &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>Ampm_SMS_Process</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_SMS_Process &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetAtCmti
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[4da]"></a>Ampm_SendSmsPolling</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, ampm_gsm_sms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Getc
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[4bc]"></a>AMPM_GSM_Startup_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AMPM_GSM_Startup_Init &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4db]"></a>Ampm_GSM_GetSimCPOS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_GSM_GetSimCPOS &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[4dc]"></a>Ampm_GSM_GetSimCIMI</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_GSM_GetSimCIMI &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[4dd]"></a>Ampm_GSM_GetSimCID</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_GSM_GetSimCID &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>Ampm_GSM_GetIMEI</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_GSM_GetIMEI &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ampm_gsm_main_task.o(.constdata)
<LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[4be]"></a>AMPM_GSM_Startup</STRONG> (Thumb, 1492 bytes, Stack size 40 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AMPM_GSM_Startup &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_UartInit
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_RESET_Set
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_RESET_Clr
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_POWER_Set
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_POWER_Clr
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_MOSFET_On
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_MOSFET_Off
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_DTR_Clr
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[125]"></a>Ampm_URC_CLIP_Process</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_URC_CLIP_Process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetAtClip
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>Ampm_URC_RING_Process</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ampm_URC_RING_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetAtRing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[4e8]"></a>AT_CmdProcessInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AT_CmdProcessInit &rArr; StrParserInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrParserInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
</UL>

<P><STRONG><a name="[3d7]"></a>AT_ComnandParser</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AT_ComnandParser &rArr; StrComnandParser &rArr; StrParserCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrComnandParser
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdProcessInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[4aa]"></a>COMM_Putc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = COMM_Putc &rArr; mUSART1_PutChar &rArr; USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSent
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_output_cb
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
</UL>

<P><STRONG><a name="[4ab]"></a>COMM_Puts</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = COMM_Puts &rArr; mUSART1_PutString &rArr; mUSART1_PutChar &rArr; USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUSART1_PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
</UL>

<P><STRONG><a name="[43b]"></a>COMM_Getc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMM_Getc
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
</UL>

<P><STRONG><a name="[3d5]"></a>COMM_PutcRx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMM_PutcRx &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[a6f]"></a>COMM_CarrierDetected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comm.o(.text), UNUSED)

<P><STRONG><a name="[a70]"></a>MODEM_RTS_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text), UNUSED)

<P><STRONG><a name="[a71]"></a>MODEM_RTS_Clr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text), UNUSED)

<P><STRONG><a name="[a72]"></a>MODEM_DTR_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text), UNUSED)

<P><STRONG><a name="[4e1]"></a>MODEM_DTR_Clr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[4b0]"></a>COMM_ClearTx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
</UL>

<P><STRONG><a name="[4df]"></a>MODEM_MOSFET_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MODEM_MOSFET_On
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[4e0]"></a>MODEM_MOSFET_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MODEM_MOSFET_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[4e3]"></a>MODEM_POWER_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MODEM_POWER_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[4e4]"></a>MODEM_POWER_Clr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MODEM_POWER_Clr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[4e2]"></a>MODEM_RESET_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[4e5]"></a>MODEM_RESET_Clr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[4cc]"></a>MODEM_Wakeup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[a73]"></a>MODEM_Sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>MODEM_UartInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[4d5]"></a>pdu_encode</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pdu_encode &rArr; EncodePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePhoneNumber
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePDUMessage
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
</UL>

<P><STRONG><a name="[4d4]"></a>pdu16_encode</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pdu16_encode &rArr; EncodePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePhoneNumber
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
</UL>

<P><STRONG><a name="[4eb]"></a>pdu_decode</STRONG> (Thumb, 308 bytes, Stack size 112 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePhoneNumber
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePDUMessage
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapDecimalNibble
</UL>

<P><STRONG><a name="[4ef]"></a>AmpmGsm_SendSms</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, ampm_gsm_sms_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AmpmGsm_SendSms &rArr; Ampm_Sms_SendMsg &rArr; Ampm_SmsAddMsg &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8s_to_ucs2s
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big2litel_endian
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unilen
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Sms_SendMsg
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsText
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsTextWithCallback
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsPDU
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsPDUWitchCallback
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsPolling
</UL>

<P><STRONG><a name="[4f3]"></a>AmpmGsm_SendSmsPolling</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ampm_gsm_sms_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_UpdateStatus
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsTextPolling
</UL>

<P><STRONG><a name="[4f4]"></a>AmpmGsm_SendSmsTextPolling</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ampm_gsm_sms_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsPolling
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[4f5]"></a>AmpmGsm_SendSmsPDUWitchCallback</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, ampm_gsm_sms_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
</UL>

<P><STRONG><a name="[4f6]"></a>AmpmGsm_SendSmsPDU</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ampm_gsm_sms_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
</UL>

<P><STRONG><a name="[4f7]"></a>AmpmGsm_SendSmsTextWithCallback</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, ampm_gsm_sms_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
</UL>

<P><STRONG><a name="[436]"></a>AmpmGsm_SendSmsText</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ampm_gsm_sms_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AmpmGsm_SendSmsText &rArr; AmpmGsm_SendSms &rArr; Ampm_Sms_SendMsg &rArr; Ampm_SmsAddMsg &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReportSmsToUser
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
</UL>

<P><STRONG><a name="[40e]"></a>jsoneq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, aws_iot_json_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = jsoneq &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedules_Status_DeltaCallback
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractVersionNumber
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isJsonKeyMatchingAndUpdateValue
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractClientToken
</UL>

<P><STRONG><a name="[4f9]"></a>parseUnsignedInteger32Value</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, aws_iot_json_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = parseUnsignedInteger32Value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateValueIfNoObject
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractVersionNumber
</UL>

<P><STRONG><a name="[4fa]"></a>parseUnsignedInteger16Value</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, aws_iot_json_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = parseUnsignedInteger16Value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateValueIfNoObject
</UL>

<P><STRONG><a name="[4fb]"></a>parseUnsignedInteger8Value</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, aws_iot_json_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = parseUnsignedInteger8Value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateValueIfNoObject
</UL>

<P><STRONG><a name="[4fc]"></a>parseInteger32Value</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, aws_iot_json_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = parseInteger32Value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateValueIfNoObject
</UL>

<P><STRONG><a name="[4fd]"></a>parseInteger16Value</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, aws_iot_json_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = parseInteger16Value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateValueIfNoObject
</UL>

<P><STRONG><a name="[4fe]"></a>parseInteger8Value</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, aws_iot_json_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = parseInteger8Value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateValueIfNoObject
</UL>

<P><STRONG><a name="[4ff]"></a>parseFloatValue</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, aws_iot_json_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = parseFloatValue &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateValueIfNoObject
</UL>

<P><STRONG><a name="[500]"></a>parseDoubleValue</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, aws_iot_json_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = parseDoubleValue &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateValueIfNoObject
</UL>

<P><STRONG><a name="[501]"></a>parseBooleanValue</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, aws_iot_json_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = parseBooleanValue &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateValueIfNoObject
</UL>

<P><STRONG><a name="[502]"></a>parseStringValue</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, aws_iot_json_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[504]"></a>aws_iot_mqtt_get_client_state</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_yield
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_unsubscribe
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_publish
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_resubscribe
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_deliver_message
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
</UL>

<P><STRONG><a name="[503]"></a>aws_iot_mqtt_set_client_state</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, aws_iot_mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aws_iot_mqtt_set_client_state
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_yield
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_reconnect
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_unsubscribe
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_publish
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_resubscribe
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_deliver_message
</UL>

<P><STRONG><a name="[506]"></a>aws_iot_mqtt_set_connect_params</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_init
</UL>

<P><STRONG><a name="[505]"></a>aws_iot_mqtt_init</STRONG> (Thumb, 250 bytes, Stack size 96 bytes, aws_iot_mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = aws_iot_mqtt_init &rArr; iot_tls_init &rArr; _iot_tls_set_connect_params
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_connect_params
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_init
</UL>

<P><STRONG><a name="[530]"></a>aws_iot_mqtt_get_next_packet_id</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_unsubscribe
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
</UL>

<P><STRONG><a name="[509]"></a>aws_iot_mqtt_is_client_connected</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, aws_iot_mqtt_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aws_iot_mqtt_is_client_connected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_update
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_register_delta
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_get
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_delete
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_yield
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_unsubscribe
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_publish
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_resubscribe
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
</UL>

<P><STRONG><a name="[50a]"></a>aws_iot_is_autoreconnect_enabled</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, aws_iot_mqtt_client.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[54e]"></a>aws_iot_mqtt_autoreconnect_set_status</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_set_autoreconnect_status
</UL>

<P><STRONG><a name="[a74]"></a>aws_iot_mqtt_set_disconnect_handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(.text), UNUSED)

<P><STRONG><a name="[a75]"></a>aws_iot_mqtt_get_network_disconnected_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(.text), UNUSED)

<P><STRONG><a name="[a76]"></a>aws_iot_mqtt_reset_network_disconnected_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_iot_mqtt_client.o(.text), UNUSED)

<P><STRONG><a name="[512]"></a>aws_iot_mqtt_internal_write_len_to_buffer</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aws_iot_mqtt_internal_write_len_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_unsubscribe
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_ack
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_zero
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_read_packet
</UL>

<P><STRONG><a name="[523]"></a>aws_iot_mqtt_internal_decode_remaining_length_from_buffer</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_suback
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_ack
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_connack
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_publish
</UL>

<P><STRONG><a name="[520]"></a>aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_unsubscribe
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
</UL>

<P><STRONG><a name="[52c]"></a>aws_iot_mqtt_internal_read_uint16_t</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_suback
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_ack
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_read_string_with_len
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_publish
</UL>

<P><STRONG><a name="[50c]"></a>aws_iot_mqtt_internal_write_uint_16</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aws_iot_mqtt_internal_write_uint_16
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_unsubscribe
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_ack
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_utf8_string
</UL>

<P><STRONG><a name="[522]"></a>aws_iot_mqtt_internal_read_char</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_suback
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_ack
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_connack
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_publish
</UL>

<P><STRONG><a name="[51d]"></a>aws_iot_mqtt_internal_write_char</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_unsubscribe
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_ack
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_zero
</UL>

<P><STRONG><a name="[50b]"></a>aws_iot_mqtt_internal_write_utf8_string</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aws_iot_mqtt_internal_write_utf8_string &rArr; aws_iot_mqtt_internal_write_uint_16
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_uint_16
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_unsubscribe
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
</UL>

<P><STRONG><a name="[51c]"></a>aws_iot_mqtt_internal_init_header</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aws_iot_mqtt_internal_init_header
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_unsubscribe
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_ack
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_zero
</UL>

<P><STRONG><a name="[50d]"></a>aws_iot_mqtt_internal_send_packet</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aws_iot_mqtt_internal_send_packet &rArr; has_timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_unsubscribe
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_disconnect
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_handle_publish
</UL>

<P><STRONG><a name="[518]"></a>aws_iot_mqtt_internal_cycle_read</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_sec
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_handle_publish
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
</UL>

<P><STRONG><a name="[51a]"></a>aws_iot_mqtt_internal_wait_for_read</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_cycle_read
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_unsubscribe
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
</UL>

<P><STRONG><a name="[51b]"></a>aws_iot_mqtt_internal_serialize_zero</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = aws_iot_mqtt_internal_serialize_zero &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_init_header
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_char
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_disconnect
</UL>

<P><STRONG><a name="[525]"></a>aws_iot_mqtt_connect</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, aws_iot_mqtt_client_connect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = aws_iot_mqtt_connect &rArr; _aws_iot_mqtt_internal_connect &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_is_client_state_valid_for_connect
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_connect
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
</UL>

<P><STRONG><a name="[527]"></a>_aws_iot_mqtt_internal_disconnect</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, aws_iot_mqtt_client_connect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _aws_iot_mqtt_internal_disconnect &rArr; aws_iot_mqtt_internal_serialize_zero &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_zero
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
</UL>

<P><STRONG><a name="[528]"></a>aws_iot_mqtt_disconnect</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, aws_iot_mqtt_client_connect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = aws_iot_mqtt_disconnect &rArr; _aws_iot_mqtt_internal_disconnect &rArr; aws_iot_mqtt_internal_serialize_zero &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_disconnect
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_disconnect
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_disconnect
</UL>

<P><STRONG><a name="[529]"></a>aws_iot_mqtt_attempt_reconnect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, aws_iot_mqtt_client_connect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_resubscribe
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_reconnect
</UL>

<P><STRONG><a name="[517]"></a>aws_iot_mqtt_internal_serialize_ack</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, aws_iot_mqtt_client_publish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aws_iot_mqtt_internal_serialize_ack &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_init_header
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_char
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_uint_16
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_handle_publish
</UL>

<P><STRONG><a name="[52e]"></a>aws_iot_mqtt_internal_deserialize_ack</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, aws_iot_mqtt_client_publish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = aws_iot_mqtt_internal_deserialize_ack &rArr; aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_char
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_uint16_t
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_unsuback
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
</UL>

<P><STRONG><a name="[531]"></a>aws_iot_mqtt_publish</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, aws_iot_mqtt_client_publish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = aws_iot_mqtt_publish &rArr; _aws_iot_mqtt_internal_publish &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishToShadowAction
</UL>

<P><STRONG><a name="[516]"></a>aws_iot_mqtt_internal_deserialize_publish</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, aws_iot_mqtt_client_publish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_read_string_with_len
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_char
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_uint16_t
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_handle_publish
</UL>

<P><STRONG><a name="[536]"></a>aws_iot_mqtt_subscribe</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, aws_iot_mqtt_client_subscribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = aws_iot_mqtt_subscribe &rArr; _aws_iot_mqtt_internal_subscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_connect
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToShadowActionAcks
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerJsonTokenOnDelta
</UL>

<P><STRONG><a name="[52a]"></a>aws_iot_mqtt_resubscribe</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, aws_iot_mqtt_client_subscribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
</UL>

<P><STRONG><a name="[53b]"></a>aws_iot_mqtt_unsubscribe</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, aws_iot_mqtt_client_unsubscribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = aws_iot_mqtt_unsubscribe &rArr; _aws_iot_mqtt_internal_unsubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_unsubscribe
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribeFromAcceptedAndRejected
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToShadowActionAcks
</UL>

<P><STRONG><a name="[541]"></a>aws_iot_mqtt_yield</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, aws_iot_mqtt_client_yield.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = aws_iot_mqtt_yield &rArr; _aws_iot_mqtt_internal_yield &rArr; _aws_iot_mqtt_handle_reconnect &rArr; aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_yield
</UL>

<P><STRONG><a name="[543]"></a>aws_iot_shadow_reset_last_received_version</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aws_iot_shadow.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_init
</UL>

<P><STRONG><a name="[a77]"></a>aws_iot_shadow_get_last_received_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_iot_shadow.o(.text), UNUSED)

<P><STRONG><a name="[a78]"></a>aws_iot_shadow_enable_discard_old_delta_msgs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aws_iot_shadow.o(.text), UNUSED)

<P><STRONG><a name="[a79]"></a>aws_iot_shadow_disable_discard_old_delta_msgs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aws_iot_shadow.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>aws_iot_shadow_init</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, aws_iot_shadow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = aws_iot_shadow_init &rArr; aws_iot_mqtt_init &rArr; iot_tls_init &rArr; _iot_tls_set_connect_params
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_reset_last_received_version
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetClientTokenSequenceNum
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDeltaTokens
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_init
</UL>

<P><STRONG><a name="[3f1]"></a>aws_iot_shadow_connect</STRONG> (Thumb, 182 bytes, Stack size 168 bytes, aws_iot_shadow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = aws_iot_shadow_connect &rArr; aws_iot_mqtt_subscribe &rArr; _aws_iot_mqtt_internal_subscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeRecords
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_init
</UL>

<P><STRONG><a name="[3f9]"></a>aws_iot_shadow_register_delta</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, aws_iot_shadow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = aws_iot_shadow_register_delta &rArr; registerJsonTokenOnDelta &rArr; aws_iot_mqtt_subscribe &rArr; _aws_iot_mqtt_internal_subscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerJsonTokenOnDelta
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[3fa]"></a>aws_iot_shadow_yield</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, aws_iot_shadow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = aws_iot_shadow_yield &rArr; HandleExpiredResponseCallbacks &rArr; unsubscribeFromAcceptedAndRejected &rArr; aws_iot_mqtt_unsubscribe &rArr; _aws_iot_mqtt_internal_unsubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExpiredResponseCallbacks
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[405]"></a>aws_iot_shadow_disconnect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aws_iot_shadow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = aws_iot_shadow_disconnect &rArr; aws_iot_mqtt_disconnect &rArr; _aws_iot_mqtt_internal_disconnect &rArr; aws_iot_mqtt_internal_serialize_zero &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[404]"></a>aws_iot_shadow_update</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, aws_iot_shadow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = aws_iot_shadow_update &rArr; aws_iot_shadow_internal_action &rArr; publishToShadowAction &rArr; aws_iot_mqtt_publish &rArr; _aws_iot_mqtt_internal_publish &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_action
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[54a]"></a>aws_iot_shadow_delete</STRONG> (Thumb, 72 bytes, Stack size 160 bytes, aws_iot_shadow.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_delete_request_json
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_action
</UL>

<P><STRONG><a name="[54c]"></a>aws_iot_shadow_get</STRONG> (Thumb, 72 bytes, Stack size 160 bytes, aws_iot_shadow.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_get_request_json
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_action
</UL>

<P><STRONG><a name="[3f2]"></a>aws_iot_shadow_set_autoreconnect_status</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aws_iot_shadow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aws_iot_shadow_set_autoreconnect_status
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_autoreconnect_set_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_init
</UL>

<P><STRONG><a name="[549]"></a>aws_iot_shadow_internal_action</STRONG> (Thumb, 170 bytes, Stack size 144 bytes, aws_iot_shadow_actions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = aws_iot_shadow_internal_action &rArr; publishToShadowAction &rArr; aws_iot_mqtt_publish &rArr; _aws_iot_mqtt_internal_publish &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToShadowActionAcks
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishToShadowAction
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSubscriptionPresent
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementSubscriptionCnt
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextFreeIndexOfAckWaitList
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractClientToken
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToAckWaitList
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_update
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_get
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_delete
</UL>

<P><STRONG><a name="[542]"></a>resetClientTokenSequenceNum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_init
</UL>

<P><STRONG><a name="[557]"></a>FillWithClientToken</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aws_iot_shadow_json.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emptyJsonWithClientToken
</UL>

<P><STRONG><a name="[54d]"></a>aws_iot_shadow_internal_get_request_json</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aws_iot_shadow_json.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emptyJsonWithClientToken
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_get
</UL>

<P><STRONG><a name="[54b]"></a>aws_iot_shadow_internal_delete_request_json</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aws_iot_shadow_json.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emptyJsonWithClientToken
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_delete
</UL>

<P><STRONG><a name="[3fb]"></a>aws_iot_shadow_init_json_document</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aws_iot_shadow_init_json_document &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReturnValueOfSnPrintf
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[3fc]"></a>aws_iot_shahow_add_reported_header</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aws_iot_shahow_add_reported_header &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReturnValueOfSnPrintf
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[402]"></a>aws_shadow_footer_reported</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aws_shadow_footer_reported &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReturnValueOfSnPrintf
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[3fd]"></a>aws_iot_shadow_add_fields</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = aws_iot_shadow_add_fields &rArr; convertDataToString &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReturnValueOfSnPrintf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDataToString
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[3fe]"></a>aws_iot_add_object</STRONG> (Thumb, 440 bytes, Stack size 64 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = aws_iot_add_object &rArr; convertDataToString &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReturnValueOfSnPrintf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDataToString
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[55a]"></a>aws_iot_add_object_from_buffer</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, aws_iot_shadow_json.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReturnValueOfSnPrintf
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[55b]"></a>aws_iot_shadow_add_desired</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, aws_iot_shadow_json.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReturnValueOfSnPrintf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDataToString
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[55c]"></a>aws_iot_shadow_add_reported</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, aws_iot_shadow_json.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReturnValueOfSnPrintf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDataToString
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[55d]"></a>FillWithClientTokenSize</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FillWithClientTokenSize &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_finalize_json_document
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_fill_with_client_token
</UL>

<P><STRONG><a name="[55e]"></a>aws_iot_fill_with_client_token</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, aws_iot_shadow_json.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillWithClientTokenSize
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReturnValueOfSnPrintf
</UL>

<P><STRONG><a name="[403]"></a>aws_iot_finalize_json_document</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = aws_iot_finalize_json_document &rArr; FillWithClientTokenSize &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillWithClientTokenSize
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReturnValueOfSnPrintf
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[55f]"></a>isJsonValidAndParse</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = isJsonValidAndParse &rArr; jsmn_parse &rArr; jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckStatusCallback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_delta_callback
</UL>

<P><STRONG><a name="[40f]"></a>UpdateValueIfNoObject</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = UpdateValueIfNoObject &rArr; parseDoubleValue &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseBooleanValue
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDoubleValue
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFloatValue
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseInteger8Value
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseInteger16Value
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseInteger32Value
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUnsignedInteger8Value
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUnsignedInteger16Value
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUnsignedInteger32Value
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedules_Status_DeltaCallback
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isJsonKeyMatchingAndUpdateValue
</UL>

<P><STRONG><a name="[560]"></a>isJsonKeyMatchingAndUpdateValue</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = isJsonKeyMatchingAndUpdateValue &rArr; UpdateValueIfNoObject &rArr; parseDoubleValue &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsoneq
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateValueIfNoObject
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_delta_callback
</UL>

<P><STRONG><a name="[561]"></a>isReceivedJsonValid</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, aws_iot_shadow_json.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[54f]"></a>extractClientToken</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = extractClientToken &rArr; jsmn_parse &rArr; jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsoneq
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckStatusCallback
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_action
</UL>

<P><STRONG><a name="[563]"></a>extractVersionNumber</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = extractVersionNumber &rArr; parseUnsignedInteger32Value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsoneq
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUnsignedInteger32Value
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckStatusCallback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_delta_callback
</UL>

<P><STRONG><a name="[544]"></a>initDeltaTokens</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_init
</UL>

<P><STRONG><a name="[547]"></a>registerJsonTokenOnDelta</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = registerJsonTokenOnDelta &rArr; aws_iot_mqtt_subscribe &rArr; _aws_iot_mqtt_internal_subscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_register_delta
</UL>

<P><STRONG><a name="[546]"></a>initializeRecords</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initializeRecords
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_connect
</UL>

<P><STRONG><a name="[551]"></a>isSubscriptionPresent</STRONG> (Thumb, 126 bytes, Stack size 184 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = isSubscriptionPresent &rArr; topicNameFromThingAndAction &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;topicNameFromThingAndAction
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_action
</UL>

<P><STRONG><a name="[552]"></a>subscribeToShadowActionAcks</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = subscribeToShadowActionAcks &rArr; aws_iot_mqtt_subscribe &rArr; _aws_iot_mqtt_internal_subscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_unsubscribe
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_sec
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;topicNameFromThingAndAction
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextFreeIndexOfSubscriptionList
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_action
</UL>

<P><STRONG><a name="[553]"></a>incrementSubscriptionCnt</STRONG> (Thumb, 136 bytes, Stack size 184 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = incrementSubscriptionCnt &rArr; topicNameFromThingAndAction &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;topicNameFromThingAndAction
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_action
</UL>

<P><STRONG><a name="[554]"></a>publishToShadowAction</STRONG> (Thumb, 86 bytes, Stack size 120 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = publishToShadowAction &rArr; aws_iot_mqtt_publish &rArr; _aws_iot_mqtt_internal_publish &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_publish
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;topicNameFromThingAndAction
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_action
</UL>

<P><STRONG><a name="[550]"></a>getNextFreeIndexOfAckWaitList</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getNextFreeIndexOfAckWaitList
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_action
</UL>

<P><STRONG><a name="[555]"></a>addToAckWaitList</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = addToAckWaitList &rArr; countdown_sec
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_sec
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_action
</UL>

<P><STRONG><a name="[548]"></a>HandleExpiredResponseCallbacks</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = HandleExpiredResponseCallbacks &rArr; unsubscribeFromAcceptedAndRejected &rArr; aws_iot_mqtt_unsubscribe &rArr; _aws_iot_mqtt_internal_unsubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribeFromAcceptedAndRejected
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_yield
</UL>

<P><STRONG><a name="[50e]"></a>has_timer_expired</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aws_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = has_timer_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExpiredResponseCallbacks
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_reconnect
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_read
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_write
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToShadowActionAcks
</UL>

<P><STRONG><a name="[510]"></a>countdown_ms</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aws_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = countdown_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_reconnect
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_unsubscribe
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_disconnect
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_read_packet
</UL>

<P><STRONG><a name="[519]"></a>countdown_sec</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aws_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = countdown_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_cycle_read
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToShadowActionAcks
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToAckWaitList
</UL>

<P><STRONG><a name="[a7a]"></a>left_ms</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, aws_timer.o(.text), UNUSED)

<P><STRONG><a name="[508]"></a>init_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, aws_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_unsubscribe
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_disconnect
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_read_packet
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_init
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToShadowActionAcks
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToAckWaitList
</UL>

<P><STRONG><a name="[58d]"></a>mbedtls_net_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_socket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[569]"></a>mbedtls_net_connect</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mbedtls_net_connect &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[570]"></a>mbedtls_net_set_block</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, net_socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>

<P><STRONG><a name="[572]"></a>mbedtls_net_set_nonblock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, net_socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>

<P><STRONG><a name="[574]"></a>mbedtls_net_recv</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mbedtls_net_recv &rArr; lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_would_block
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_timeout
</UL>

<P><STRONG><a name="[9c]"></a>mbedtls_net_send</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = mbedtls_net_send &rArr; lwip_write &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_would_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>mbedtls_net_recv_timeout</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mbedtls_net_recv_timeout &rArr; mbedtls_net_recv &rArr; lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[578]"></a>mbedtls_net_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mbedtls_net_free &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
</UL>

<P><STRONG><a name="[40d]"></a>jsmn_parse</STRONG> (Thumb, 606 bytes, Stack size 64 bytes, jsmn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = jsmn_parse &rArr; jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_string
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_primitive
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedules_Status_DeltaCallback
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceivedJsonValid
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isJsonValidAndParse
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractClientToken
</UL>

<P><STRONG><a name="[40c]"></a>jsmn_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jsmn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedules_Status_DeltaCallback
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceivedJsonValid
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isJsonValidAndParse
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractClientToken
</UL>

<P><STRONG><a name="[58c]"></a>_iot_tls_set_connect_params</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, network_mbedtls_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _iot_tls_set_connect_params
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_init
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[57f]"></a>iot_tls_destroy</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, network_mbedtls_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = iot_tls_destroy &rArr; mbedtls_ssl_free &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[5a7]"></a>iot_tls_is_connected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, network_mbedtls_wrapper.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[585]"></a>iot_tls_disconnect</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, network_mbedtls_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = iot_tls_disconnect &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[587]"></a>iot_tls_write</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, network_mbedtls_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4104<LI>Call Chain = iot_tls_write &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[589]"></a>iot_tls_read</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, network_mbedtls_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4096<LI>Call Chain = iot_tls_read &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[592]"></a>iot_tls_dbg</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, network_mbedtls_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iot_tls_dbg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[58b]"></a>iot_tls_connect</STRONG> (Thumb, 1776 bytes, Stack size 8800 bytes, network_mbedtls_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12752<LI>Call Chain = iot_tls_connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_version
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_verify_result
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_peer_cert
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_verify
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_dbg
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_tls_set_connect_params
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_init
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[507]"></a>iot_tls_init</STRONG> (Thumb, 760 bytes, Stack size 52 bytes, network_mbedtls_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = iot_tls_init &rArr; _iot_tls_set_connect_params
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_tls_set_connect_params
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_init
</UL>

<P><STRONG><a name="[5a8]"></a>mbedtls_aes_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</UL>

<P><STRONG><a name="[5a9]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_aes_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</UL>

<P><STRONG><a name="[5ac]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 496 bytes, Stack size 20 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
</UL>

<P><STRONG><a name="[5ab]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 204 bytes, Stack size 320 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
</UL>

<P><STRONG><a name="[5ae]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 1304 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_encrypt
</UL>

<P><STRONG><a name="[5ad]"></a>mbedtls_aes_encrypt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
</UL>

<P><STRONG><a name="[5b0]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 1262 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_decrypt
</UL>

<P><STRONG><a name="[5af]"></a>mbedtls_aes_decrypt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
</UL>

<P><STRONG><a name="[5b1]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
</UL>

<P><STRONG><a name="[5b2]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc_wrap
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
</UL>

<P><STRONG><a name="[5b3]"></a>mbedtls_aes_self_test</STRONG> (Thumb, 546 bytes, Stack size 464 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[5b5]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>

<P><STRONG><a name="[5b4]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecparams
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[5b6]"></a>mbedtls_asn1_get_bool</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_bool &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[5b7]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
</UL>

<P><STRONG><a name="[5b8]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[5ba]"></a>mbedtls_asn1_get_bitstring</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
</UL>

<P><STRONG><a name="[5bb]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[5bc]"></a>mbedtls_asn1_get_sequence_of</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
</UL>

<P><STRONG><a name="[5bd]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[5bf]"></a>mbedtls_asn1_get_alg_null</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
</UL>

<P><STRONG><a name="[5c0]"></a>mbedtls_asn1_free_named_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data_list
</UL>

<P><STRONG><a name="[5c1]"></a>mbedtls_asn1_free_named_data_list</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data
</UL>

<P><STRONG><a name="[5c2]"></a>mbedtls_asn1_find_named_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_store_named_data
</UL>

<P><STRONG><a name="[5c7]"></a>mbedtls_asn1_write_len</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, asn1write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_octet_string
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bitstring
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_ia5_string
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_printable_string
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bool
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_null
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[5c8]"></a>mbedtls_asn1_write_tag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, asn1write.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_octet_string
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bitstring
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_ia5_string
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_printable_string
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bool
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_null
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[5c3]"></a>mbedtls_asn1_write_raw_buffer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_octet_string
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_ia5_string
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_printable_string
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
</UL>

<P><STRONG><a name="[5c4]"></a>mbedtls_asn1_write_mpi</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, asn1write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[5c9]"></a>mbedtls_asn1_write_null</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
</UL>

<P><STRONG><a name="[5ca]"></a>mbedtls_asn1_write_oid</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
</UL>

<P><STRONG><a name="[5cb]"></a>mbedtls_asn1_write_algorithm_identifier</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_null
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[5cc]"></a>mbedtls_asn1_write_bool</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[5cd]"></a>mbedtls_asn1_write_int</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[5ce]"></a>mbedtls_asn1_write_printable_string</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[5cf]"></a>mbedtls_asn1_write_ia5_string</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[5d0]"></a>mbedtls_asn1_write_bitstring</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[5d1]"></a>mbedtls_asn1_write_octet_string</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[5d2]"></a>mbedtls_asn1_store_named_data</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_find_named_data
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[5d4]"></a>mbedtls_base64_encode</STRONG> (Thumb, 312 bytes, Stack size 36 bytes, base64.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
</UL>

<P><STRONG><a name="[5d5]"></a>mbedtls_base64_decode</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, base64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[5d3]"></a>mbedtls_base64_self_test</STRONG> (Thumb, 124 bytes, Stack size 152 bytes, base64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_encode
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[5e4]"></a>mbedtls_mpi_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
</UL>

<P><STRONG><a name="[5d6]"></a>mbedtls_mpi_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>

<P><STRONG><a name="[5d8]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_swap
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
</UL>

<P><STRONG><a name="[5d9]"></a>mbedtls_mpi_shrink</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_shrink &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
</UL>

<P><STRONG><a name="[5da]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_copy
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[a7b]"></a>mbedtls_mpi_swap</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, bignum.o(.text), UNUSED)

<P><STRONG><a name="[5db]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_safe_cond_assign &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
</UL>

<P><STRONG><a name="[5dc]"></a>mbedtls_mpi_safe_cond_swap</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_safe_cond_swap &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[5dd]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_string
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
</UL>

<P><STRONG><a name="[670]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
</UL>

<P><STRONG><a name="[5de]"></a>mbedtls_mpi_set_bit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_set_bit &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>

<P><STRONG><a name="[5ff]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[5df]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>

<P><STRONG><a name="[5c5]"></a>mbedtls_mpi_size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_mx
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[5e1]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
</UL>

<P><STRONG><a name="[5e3]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[5e2]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>

<P><STRONG><a name="[5e6]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>

<P><STRONG><a name="[5e7]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
</UL>

<P><STRONG><a name="[5e8]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[5e9]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[5ea]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[5ec]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>

<P><STRONG><a name="[5ed]"></a>mbedtls_mpi_read_string</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_get_digit
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_string
</UL>

<P><STRONG><a name="[5f0]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_cmp
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>

<P><STRONG><a name="[5ef]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 52 bytes, Stack size 28 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[5f1]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>

<P><STRONG><a name="[5f2]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>

<P><STRONG><a name="[5f4]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 980 bytes, Stack size 104 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_int
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[5f5]"></a>mbedtls_mpi_div_int</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[5f7]"></a>mbedtls_mpi_mod_int</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[5f8]"></a>mbedtls_mpi_write_string</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[5b9]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>

<P><STRONG><a name="[5c6]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[5f9]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[5fc]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1380 bytes, Stack size 1664 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
</UL>

<P><STRONG><a name="[5fe]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[600]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 82 bytes, Stack size 1048 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[601]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 816 bytes, Stack size 128 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[602]"></a>mbedtls_mpi_self_test</STRONG> (Thumb, 932 bytes, Stack size 104 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[603]"></a>mbedtls_ccm_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ccm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
</UL>

<P><STRONG><a name="[604]"></a>mbedtls_ccm_setkey</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ccm_setkey &rArr; mbedtls_cipher_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_aes_setkey_wrap
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
</UL>

<P><STRONG><a name="[609]"></a>mbedtls_ccm_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ccm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
</UL>

<P><STRONG><a name="[60d]"></a>mbedtls_ccm_encrypt_and_tag</STRONG> (Thumb, 44 bytes, Stack size 80 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
</UL>

<P><STRONG><a name="[60e]"></a>mbedtls_ccm_auth_decrypt</STRONG> (Thumb, 114 bytes, Stack size 104 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
</UL>

<P><STRONG><a name="[60f]"></a>mbedtls_ccm_self_test</STRONG> (Thumb, 288 bytes, Stack size 136 bytes, ccm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[a7c]"></a>mbedtls_cipher_list</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cipher.o(.text), UNUSED)

<P><STRONG><a name="[776]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[610]"></a>mbedtls_cipher_info_from_string</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[605]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[611]"></a>mbedtls_cipher_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
</UL>

<P><STRONG><a name="[606]"></a>mbedtls_cipher_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>

<P><STRONG><a name="[613]"></a>mbedtls_cipher_set_padding_mode</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
</UL>

<P><STRONG><a name="[607]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[608]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[614]"></a>mbedtls_cipher_set_iv</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_set_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[61e]"></a>mbedtls_cipher_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[615]"></a>mbedtls_cipher_update_ad</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
</UL>

<P><STRONG><a name="[60c]"></a>mbedtls_cipher_update</STRONG> (Thumb, 446 bytes, Stack size 48 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
</UL>

<P><STRONG><a name="[619]"></a>mbedtls_cipher_finish</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[61a]"></a>mbedtls_cipher_write_tag</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[61c]"></a>mbedtls_cipher_check_tag</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[61d]"></a>mbedtls_cipher_crypt</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[61f]"></a>mbedtls_cipher_auth_encrypt</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbedtls_cipher_auth_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[621]"></a>mbedtls_cipher_auth_decrypt</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mbedtls_cipher_auth_decrypt &rArr; mbedtls_ccm_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[590]"></a>mbedtls_ctr_drbg_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ctr_drbg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[628]"></a>mbedtls_ctr_drbg_reseed</STRONG> (Thumb, 118 bytes, Stack size 408 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>

<P><STRONG><a name="[629]"></a>mbedtls_ctr_drbg_seed_entropy_len</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[595]"></a>mbedtls_ctr_drbg_seed</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[583]"></a>mbedtls_ctr_drbg_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ctr_drbg_free &rArr; mbedtls_aes_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[62e]"></a>mbedtls_ctr_drbg_set_prediction_resistance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctr_drbg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[a7d]"></a>mbedtls_ctr_drbg_set_entropy_len</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctr_drbg.o(.text), UNUSED)

<P><STRONG><a name="[a7e]"></a>mbedtls_ctr_drbg_set_reseed_interval</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctr_drbg.o(.text), UNUSED)

<P><STRONG><a name="[62b]"></a>mbedtls_ctr_drbg_update</STRONG> (Thumb, 44 bytes, Stack size 64 bytes, ctr_drbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
</UL>

<P><STRONG><a name="[62c]"></a>mbedtls_ctr_drbg_random_with_add</STRONG> (Thumb, 212 bytes, Stack size 112 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>

<P><STRONG><a name="[9a]"></a>mbedtls_ctr_drbg_random</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[62d]"></a>mbedtls_ctr_drbg_self_test</STRONG> (Thumb, 332 bytes, Stack size 352 bytes, ctr_drbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_set_prediction_resistance
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[a7f]"></a>mbedtls_debug_set_threshold</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[62f]"></a>mbedtls_debug_print_msg</STRONG> (Thumb, 112 bytes, Stack size 544 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_swap_epochs
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_append
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_retransmit_timeout
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_double_retransmit_timeout
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_psk_hint
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_session_ticket_ext
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypt_then_mac_ext
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypt_then_mac_ext
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_max_fragment_length_ext
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
</UL>

<P><STRONG><a name="[632]"></a>mbedtls_debug_print_ret</STRONG> (Thumb, 96 bytes, Stack size 552 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mbedtls_debug_print_ret &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
</UL>

<P><STRONG><a name="[633]"></a>mbedtls_debug_print_buf</STRONG> (Thumb, 298 bytes, Stack size 576 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[634]"></a>mbedtls_debug_print_mpi</STRONG> (Thumb, 376 bytes, Stack size 568 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
</UL>

<P><STRONG><a name="[635]"></a>mbedtls_debug_print_ecp</STRONG> (Thumb, 264 bytes, Stack size 552 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
</UL>

<P><STRONG><a name="[639]"></a>mbedtls_debug_print_crt</STRONG> (Thumb, 162 bytes, Stack size 1576 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2824<LI>Call Chain = mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_line_by_line
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[63a]"></a>mbedtls_ecdh_gen_public</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
</UL>

<P><STRONG><a name="[63c]"></a>mbedtls_ecdh_compute_shared</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[642]"></a>mbedtls_ecdh_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecdh_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[643]"></a>mbedtls_ecdh_free</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[645]"></a>mbedtls_ecdh_make_params</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ecdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_group
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>

<P><STRONG><a name="[648]"></a>mbedtls_ecdh_read_params</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[64b]"></a>mbedtls_ecdh_get_params</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ecdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>

<P><STRONG><a name="[64e]"></a>mbedtls_ecdh_make_public</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[64f]"></a>mbedtls_ecdh_read_public</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ecdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
</UL>

<P><STRONG><a name="[650]"></a>mbedtls_ecdh_calc_secret</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[652]"></a>mbedtls_ecdsa_sign</STRONG> (Thumb, 466 bytes, Stack size 128 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[653]"></a>mbedtls_ecdsa_sign_det</STRONG> (Thumb, 182 bytes, Stack size 304 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[658]"></a>mbedtls_ecdsa_verify</STRONG> (Thumb, 392 bytes, Stack size 128 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[65b]"></a>mbedtls_ecdsa_write_signature</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336<LI>Call Chain = mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_det
</UL>

<P><STRONG><a name="[65c]"></a>mbedtls_ecdsa_write_signature_det</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, ecdsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[65d]"></a>mbedtls_ecdsa_read_signature</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>

<P><STRONG><a name="[65e]"></a>mbedtls_ecdsa_genkey</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ecdsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[660]"></a>mbedtls_ecdsa_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</UL>

<P><STRONG><a name="[662]"></a>mbedtls_ecdsa_from_keypair</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mbedtls_ecdsa_from_keypair &rArr; mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>

<P><STRONG><a name="[663]"></a>mbedtls_ecdsa_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>

<P><STRONG><a name="[666]"></a>mbedtls_ecp_curve_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_name
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
</UL>

<P><STRONG><a name="[665]"></a>mbedtls_ecp_grp_id_list</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_grp_id_list
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[667]"></a>mbedtls_ecp_curve_info_from_grp_id</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_group
</UL>

<P><STRONG><a name="[668]"></a>mbedtls_ecp_curve_info_from_tls_id</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_tls_id
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>

<P><STRONG><a name="[669]"></a>mbedtls_ecp_curve_info_from_name</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[63d]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[66a]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>

<P><STRONG><a name="[664]"></a>mbedtls_ecp_keypair_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</UL>

<P><STRONG><a name="[641]"></a>mbedtls_ecp_point_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[644]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>

<P><STRONG><a name="[661]"></a>mbedtls_ecp_keypair_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>

<P><STRONG><a name="[64d]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
</UL>

<P><STRONG><a name="[64c]"></a>mbedtls_ecp_group_copy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
</UL>

<P><STRONG><a name="[66c]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[640]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[66d]"></a>mbedtls_ecp_point_cmp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>

<P><STRONG><a name="[66e]"></a>mbedtls_ecp_point_read_string</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>

<P><STRONG><a name="[66f]"></a>mbedtls_ecp_point_write_binary</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</UL>

<P><STRONG><a name="[671]"></a>mbedtls_ecp_point_read_binary</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
</UL>

<P><STRONG><a name="[64a]"></a>mbedtls_ecp_tls_read_point</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_public
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[647]"></a>mbedtls_ecp_tls_write_point</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecp_tls_write_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
</UL>

<P><STRONG><a name="[649]"></a>mbedtls_ecp_tls_read_group</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[646]"></a>mbedtls_ecp_tls_write_group</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
</UL>

<P><STRONG><a name="[63e]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_mx
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[685]"></a>mbedtls_ecp_check_privkey</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[63f]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[659]"></a>mbedtls_ecp_muladd</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>

<P><STRONG><a name="[687]"></a>mbedtls_ecp_gen_keypair_base</STRONG> (Thumb, 340 bytes, Stack size 120 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[63b]"></a>mbedtls_ecp_gen_keypair</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_genkey
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>

<P><STRONG><a name="[688]"></a>mbedtls_ecp_gen_key</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[689]"></a>mbedtls_ecp_check_pub_priv</STRONG> (Thumb, 178 bytes, Stack size 184 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_check_pair
</UL>

<P><STRONG><a name="[68a]"></a>mbedtls_ecp_self_test</STRONG> (Thumb, 586 bytes, Stack size 272 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[65f]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_use_curve25519
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_genkey
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
</UL>

<P><STRONG><a name="[692]"></a>mbedtls_entropy_add_source</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_entropy_add_source
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[594]"></a>mbedtls_entropy_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_entropy_init &rArr; mbedtls_entropy_add_source
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[584]"></a>mbedtls_entropy_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_entropy_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[697]"></a>mbedtls_entropy_update_manual</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[699]"></a>mbedtls_entropy_gather</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[98]"></a>mbedtls_entropy_func</STRONG> (Thumb, 232 bytes, Stack size 104 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = mbedtls_entropy_func &rArr; entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[69c]"></a>mbedtls_entropy_source_self_test</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test_check_bits
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test_gather
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[69e]"></a>mbedtls_entropy_self_test</STRONG> (Thumb, 296 bytes, Stack size 784 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_gather
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_update_manual
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[623]"></a>mbedtls_gcm_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_gcm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</UL>

<P><STRONG><a name="[625]"></a>mbedtls_gcm_setkey</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</UL>

<P><STRONG><a name="[616]"></a>mbedtls_gcm_starts</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update_ad
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</UL>

<P><STRONG><a name="[618]"></a>mbedtls_gcm_update</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</UL>

<P><STRONG><a name="[61b]"></a>mbedtls_gcm_finish</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbedtls_gcm_finish &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_check_tag
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_write_tag
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</UL>

<P><STRONG><a name="[620]"></a>mbedtls_gcm_crypt_and_tag</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</UL>

<P><STRONG><a name="[622]"></a>mbedtls_gcm_auth_decrypt</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
</UL>

<P><STRONG><a name="[624]"></a>mbedtls_gcm_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_gcm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
</UL>

<P><STRONG><a name="[6a2]"></a>mbedtls_gcm_self_test</STRONG> (Thumb, 1294 bytes, Stack size 536 bytes, gcm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[655]"></a>mbedtls_hmac_drbg_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_hmac_drbg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[6a3]"></a>mbedtls_hmac_drbg_update</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
</UL>

<P><STRONG><a name="[656]"></a>mbedtls_hmac_drbg_seed_buf</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbedtls_hmac_drbg_seed_buf &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[6aa]"></a>mbedtls_hmac_drbg_reseed</STRONG> (Thumb, 100 bytes, Stack size 408 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
</UL>

<P><STRONG><a name="[6ab]"></a>mbedtls_hmac_drbg_seed</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, hmac_drbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
</UL>

<P><STRONG><a name="[6b0]"></a>mbedtls_hmac_drbg_set_prediction_resistance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmac_drbg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
</UL>

<P><STRONG><a name="[a80]"></a>mbedtls_hmac_drbg_set_entropy_len</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmac_drbg.o(.text), UNUSED)

<P><STRONG><a name="[a81]"></a>mbedtls_hmac_drbg_set_reseed_interval</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmac_drbg.o(.text), UNUSED)

<P><STRONG><a name="[6ac]"></a>mbedtls_hmac_drbg_random_with_add</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
</UL>

<P><STRONG><a name="[a1]"></a>mbedtls_hmac_drbg_random</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = mbedtls_hmac_drbg_random &rArr; mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecdsa.o(.text)
</UL>
<P><STRONG><a name="[657]"></a>mbedtls_hmac_drbg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_hmac_drbg_free &rArr; mbedtls_md_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[6af]"></a>mbedtls_hmac_drbg_self_test</STRONG> (Thumb, 344 bytes, Stack size 200 bytes, hmac_drbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_set_prediction_resistance
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[a82]"></a>mbedtls_md_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[654]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_string
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[6b1]"></a>mbedtls_md_info_from_string</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[6b5]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
</UL>

<P><STRONG><a name="[6ad]"></a>mbedtls_md_free</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
</UL>

<P><STRONG><a name="[a83]"></a>mbedtls_md_clone</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[6a9]"></a>mbedtls_md_setup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init_ctx
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
</UL>

<P><STRONG><a name="[6b3]"></a>mbedtls_md_init_ctx</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
</UL>

<P><STRONG><a name="[711]"></a>mbedtls_md_starts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[712]"></a>mbedtls_md_update</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[713]"></a>mbedtls_md_finish</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[716]"></a>mbedtls_md</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>

<P><STRONG><a name="[6a8]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 174 bytes, Stack size 96 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
</UL>

<P><STRONG><a name="[6a6]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
</UL>

<P><STRONG><a name="[6a7]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
</UL>

<P><STRONG><a name="[6a5]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
</UL>

<P><STRONG><a name="[6b4]"></a>mbedtls_md_hmac</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[77b]"></a>mbedtls_md_process</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_process
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[6a4]"></a>mbedtls_md_get_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
</UL>

<P><STRONG><a name="[a84]"></a>mbedtls_md_get_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[a85]"></a>mbedtls_md_get_name</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[a86]"></a>mbedtls_memory_buffer_set_verify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memory_buffer_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6ce]"></a>mbedtls_memory_buffer_alloc_verify</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memory_buffer_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
</UL>

<P><STRONG><a name="[6cf]"></a>mbedtls_memory_buffer_alloc_status</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, memory_buffer_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_chain
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[a87]"></a>mbedtls_memory_buffer_alloc_max_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memory_buffer_alloc.o(.text), UNUSED)

<P><STRONG><a name="[a88]"></a>mbedtls_memory_buffer_alloc_max_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, memory_buffer_alloc.o(.text), UNUSED)

<P><STRONG><a name="[a89]"></a>mbedtls_memory_buffer_alloc_cur_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memory_buffer_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>mbedtls_memory_buffer_alloc_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, memory_buffer_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_memory_buffer_alloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_self_test
</UL>

<P><STRONG><a name="[406]"></a>mbedtls_memory_buffer_alloc_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, memory_buffer_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_memory_buffer_alloc_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_self_test
</UL>

<P><STRONG><a name="[6d2]"></a>mbedtls_memory_buffer_alloc_self_test</STRONG> (Thumb, 840 bytes, Stack size 1056 bytes, memory_buffer_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_free
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_all_free
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pointer
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6d6]"></a>mbedtls_oid_get_attr_short_name</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[6d8]"></a>mbedtls_oid_get_x509_ext_type</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_x509_ext_type &rArr; oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[6da]"></a>mbedtls_oid_get_extended_key_usage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_extended_key_usage &rArr; oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
</UL>

<P><STRONG><a name="[6dc]"></a>mbedtls_oid_get_sig_alg_desc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[6dd]"></a>mbedtls_oid_get_sig_alg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[a8a]"></a>mbedtls_oid_get_oid_by_sig_alg</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, oid.o(.text), UNUSED)

<P><STRONG><a name="[6df]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[a8b]"></a>mbedtls_oid_get_oid_by_pk_alg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(.text), UNUSED)

<P><STRONG><a name="[6e1]"></a>mbedtls_oid_get_ec_grp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_ec_grp &rArr; oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[a8c]"></a>mbedtls_oid_get_oid_by_ec_grp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(.text), UNUSED)

<P><STRONG><a name="[6e3]"></a>mbedtls_oid_get_cipher_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_cipher_alg_from_asn1
</UL>

<P><STRONG><a name="[6e5]"></a>mbedtls_oid_get_md_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_md_alg &rArr; oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>

<P><STRONG><a name="[71c]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_md
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[6e6]"></a>mbedtls_oid_get_numeric_string</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[70a]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[6e7]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_pem_read_buffer &rArr; mbedtls_base64_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[6e8]"></a>mbedtls_pem_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pem_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[6f3]"></a>mbedtls_pk_get_bitlen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
</UL>

<P><STRONG><a name="[a8d]"></a>mbedtls_pk_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[6ea]"></a>mbedtls_pk_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[703]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[704]"></a>mbedtls_pk_setup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[a8e]"></a>mbedtls_pk_setup_rsa_alt</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[6ef]"></a>mbedtls_pk_can_do</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[6ed]"></a>mbedtls_pk_verify</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[6ee]"></a>mbedtls_pk_verify_ext</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336<LI>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[6f2]"></a>mbedtls_pk_sign</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_pk_sign &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[a8f]"></a>mbedtls_pk_decrypt</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[a90]"></a>mbedtls_pk_encrypt</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[a91]"></a>mbedtls_pk_check_pair</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[637]"></a>mbedtls_pk_debug</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
</UL>

<P><STRONG><a name="[7d5]"></a>mbedtls_pk_get_name</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[7e4]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[702]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
</UL>

<P><STRONG><a name="[709]"></a>mbedtls_pk_parse_key</STRONG> (Thumb, 732 bytes, Stack size 64 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
</UL>

<P><STRONG><a name="[70b]"></a>mbedtls_pk_parse_public_key</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
</UL>

<P><STRONG><a name="[6d0]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
</UL>

<P><STRONG><a name="[a92]"></a>mbedtls_platform_set_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform.o(.text), UNUSED)

<P><STRONG><a name="[a93]"></a>mbedtls_platform_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform.o(.text), UNUSED)

<P><STRONG><a name="[a94]"></a>mbedtls_platform_teardown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(.text), UNUSED)

<P><STRONG><a name="[70c]"></a>mbedtls_rsa_set_padding</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>

<P><STRONG><a name="[6f9]"></a>mbedtls_rsa_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</UL>

<P><STRONG><a name="[700]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[706]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 562 bytes, Stack size 168 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[6f8]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[70d]"></a>mbedtls_rsa_public</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[70f]"></a>mbedtls_rsa_private</STRONG> (Thumb, 688 bytes, Stack size 144 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[715]"></a>mbedtls_rsa_rsaes_oaep_encrypt</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[717]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[6f7]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
</UL>

<P><STRONG><a name="[718]"></a>mbedtls_rsa_rsaes_oaep_decrypt</STRONG> (Thumb, 458 bytes, Stack size 1168 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[719]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</STRONG> (Thumb, 362 bytes, Stack size 1088 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3192<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[6f6]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[71a]"></a>mbedtls_rsa_rsassa_pss_sign</STRONG> (Thumb, 394 bytes, Stack size 144 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[71b]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 488 bytes, Stack size 80 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[6f5]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
</UL>

<P><STRONG><a name="[6f1]"></a>mbedtls_rsa_rsassa_pss_verify_ext</STRONG> (Thumb, 510 bytes, Stack size 1168 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[71d]"></a>mbedtls_rsa_rsassa_pss_verify</STRONG> (Thumb, 64 bytes, Stack size 80 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3352<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[71e]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 682 bytes, Stack size 1112 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3216<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[6f4]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
</UL>

<P><STRONG><a name="[6fa]"></a>mbedtls_rsa_free</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_copy
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
</UL>

<P><STRONG><a name="[71f]"></a>mbedtls_rsa_copy</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[721]"></a>mbedtls_rsa_self_test</STRONG> (Thumb, 528 bytes, Stack size 400 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[6b9]"></a>mbedtls_sha1_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
</UL>

<P><STRONG><a name="[6bb]"></a>mbedtls_sha1_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha1_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
</UL>

<P><STRONG><a name="[6ba]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
</UL>

<P><STRONG><a name="[6b6]"></a>mbedtls_sha1_starts</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sha1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
</UL>

<P><STRONG><a name="[6bc]"></a>mbedtls_sha1_process</STRONG> (Thumb, 6442 bytes, Stack size 92 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[6b7]"></a>mbedtls_sha1_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
</UL>

<P><STRONG><a name="[6b8]"></a>mbedtls_sha1_finish</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
</UL>

<P><STRONG><a name="[13a]"></a>mbedtls_sha1</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mbedtls_sha1 &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[723]"></a>mbedtls_sha1_self_test</STRONG> (Thumb, 188 bytes, Stack size 1160 bytes, sha1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6c1]"></a>mbedtls_sha256_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
</UL>

<P><STRONG><a name="[6c2]"></a>mbedtls_sha256_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
</UL>

<P><STRONG><a name="[6c3]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
</UL>

<P><STRONG><a name="[6bd]"></a>mbedtls_sha256_starts</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
</UL>

<P><STRONG><a name="[6c4]"></a>mbedtls_sha256_process</STRONG> (Thumb, 3600 bytes, Stack size 312 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
</UL>

<P><STRONG><a name="[6be]"></a>mbedtls_sha256_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
</UL>

<P><STRONG><a name="[6bf]"></a>mbedtls_sha256_finish</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
</UL>

<P><STRONG><a name="[6c0]"></a>mbedtls_sha256</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[725]"></a>mbedtls_sha256_self_test</STRONG> (Thumb, 254 bytes, Stack size 176 bytes, sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6c5]"></a>mbedtls_sha512_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha512_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_alloc
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>

<P><STRONG><a name="[6c6]"></a>mbedtls_sha512_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha512_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_free
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>

<P><STRONG><a name="[6c7]"></a>mbedtls_sha512_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_clone_wrap
</UL>

<P><STRONG><a name="[691]"></a>mbedtls_sha512_starts</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha512_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_starts_wrap
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_starts_wrap
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>

<P><STRONG><a name="[6c8]"></a>mbedtls_sha512_process</STRONG> (Thumb, 3730 bytes, Stack size 752 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mbedtls_sha512_process
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_process_wrap
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>

<P><STRONG><a name="[696]"></a>mbedtls_sha512_update</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha384
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update_wrap
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>

<P><STRONG><a name="[69a]"></a>mbedtls_sha512_finish</STRONG> (Thumb, 1072 bytes, Stack size 56 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_finish_wrap
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>

<P><STRONG><a name="[695]"></a>mbedtls_sha512</STRONG> (Thumb, 54 bytes, Stack size 240 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_wrap
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_wrap
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>

<P><STRONG><a name="[727]"></a>mbedtls_sha512_self_test</STRONG> (Thumb, 254 bytes, Stack size 312 bytes, sha512.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[729]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
</UL>

<P><STRONG><a name="[728]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[72a]"></a>mbedtls_ssl_ciphersuite_from_string</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssl_ciphersuites.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_id
</UL>

<P><STRONG><a name="[72b]"></a>mbedtls_ssl_get_ciphersuite_name</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_get_ciphersuite_name
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite
</UL>

<P><STRONG><a name="[72c]"></a>mbedtls_ssl_get_ciphersuite_id</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl_ciphersuites.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_string
</UL>

<P><STRONG><a name="[758]"></a>mbedtls_ssl_get_ciphersuite_sig_pk_alg</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[a95]"></a>mbedtls_ssl_get_ciphersuite_sig_alg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text), UNUSED)

<P><STRONG><a name="[a96]"></a>mbedtls_ssl_ciphersuite_uses_ec</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text), UNUSED)

<P><STRONG><a name="[75c]"></a>mbedtls_ssl_ciphersuite_uses_psk</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[763]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 700 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3920<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>

<P><STRONG><a name="[79c]"></a>mbedtls_ssl_sig_hash_set_const_hash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[771]"></a>mbedtls_ssl_session_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
</UL>

<P><STRONG><a name="[74e]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 1964 bytes, Stack size 440 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[75d]"></a>mbedtls_ssl_psk_derive_premaster</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = mbedtls_ssl_psk_derive_premaster &rArr; mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[73a]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_write_version
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[764]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mbedtls_ssl_flush_output &rArr; mbedtls_debug_print_ret &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_ep_len
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hdr_len
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
</UL>

<P><STRONG><a name="[73c]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 1020 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hdr_len
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_append
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[765]"></a>mbedtls_ssl_resend</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_swap_epochs
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[781]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 1312 bytes, Stack size 40 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_double_retransmit_timeout
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[74a]"></a>mbedtls_ssl_recv_flight_completed</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_recv_flight_completed &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_free
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
</UL>

<P><STRONG><a name="[73b]"></a>mbedtls_ssl_send_flight_completed</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_send_flight_completed &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_retransmit_timeout
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[786]"></a>mbedtls_ssl_prepare_handshake_record</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>

<P><STRONG><a name="[793]"></a>mbedtls_ssl_update_handshake_status</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_update_handshake_status
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[788]"></a>mbedtls_ssl_dtls_replay_check</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ssl_dtls_replay_check &rArr; ssl_load_six_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_load_six_bytes
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[78b]"></a>mbedtls_ssl_dtls_replay_update</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_ssl_dtls_replay_update &rArr; ssl_load_six_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_load_six_bytes
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
</UL>

<P><STRONG><a name="[73f]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_session_ticket_ext
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypt_then_mac_ext
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
</UL>

<P><STRONG><a name="[748]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
</UL>

<P><STRONG><a name="[78e]"></a>mbedtls_ssl_handle_message_type</STRONG> (Thumb, 736 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mbedtls_ssl_handle_message_type &rArr; mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[78f]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
</UL>

<P><STRONG><a name="[790]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_free
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
</UL>

<P><STRONG><a name="[792]"></a>mbedtls_ssl_read_record_layer</STRONG> (Thumb, 1020 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hdr_len
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[74c]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[794]"></a>mbedtls_ssl_send_fatal_handshake_failure</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>

<P><STRONG><a name="[767]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2872<LI>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_cert
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[796]"></a>mbedtls_ssl_check_cert_usage</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbedtls_ssl_check_cert_usage &rArr; mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[750]"></a>mbedtls_ssl_check_curve</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[766]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 1992 bytes, Stack size 56 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3896<LI>Call Chain = mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[768]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[76a]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_dtls_replay_reset
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[74d]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mbedtls_ssl_optimize_checksum &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[749]"></a>mbedtls_ssl_reset_checksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_reset_checksum &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
</UL>

<P><STRONG><a name="[76c]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[769]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 886 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[76b]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[79e]"></a>mbedtls_ssl_session_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_session_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[58e]"></a>mbedtls_ssl_init</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[59d]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[7a1]"></a>mbedtls_ssl_session_reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[7b1]"></a>mbedtls_ssl_conf_endpoint</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[7b2]"></a>mbedtls_ssl_conf_transport</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[a97]"></a>mbedtls_ssl_conf_dtls_anti_replay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[a98]"></a>mbedtls_ssl_conf_dtls_badmac_limit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[a99]"></a>mbedtls_ssl_conf_handshake_timeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[599]"></a>mbedtls_ssl_conf_authmode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[598]"></a>mbedtls_ssl_conf_verify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[59a]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[593]"></a>mbedtls_ssl_conf_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[59f]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[59c]"></a>mbedtls_ssl_conf_read_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[7a2]"></a>mbedtls_ssl_set_timer_cb</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
</UL>

<P><STRONG><a name="[7a3]"></a>mbedtls_ssl_set_session</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[a9a]"></a>mbedtls_ssl_conf_ciphersuites</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[a9b]"></a>mbedtls_ssl_conf_ciphersuites_for_version</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[a9c]"></a>mbedtls_ssl_conf_cert_profile</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[7a4]"></a>mbedtls_ssl_conf_own_cert</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</UL>

<P><STRONG><a name="[59b]"></a>mbedtls_ssl_conf_ca_chain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[7a6]"></a>mbedtls_ssl_set_hs_own_cert</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</UL>

<P><STRONG><a name="[a9d]"></a>mbedtls_ssl_set_hs_ca_chain</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[a9e]"></a>mbedtls_ssl_set_hs_authmode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[7a7]"></a>mbedtls_ssl_conf_psk</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[7a8]"></a>mbedtls_ssl_set_hs_psk</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a9f]"></a>mbedtls_ssl_conf_psk_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aa0]"></a>mbedtls_ssl_conf_sig_hashes</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aa1]"></a>mbedtls_ssl_conf_curves</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[59e]"></a>mbedtls_ssl_set_hostname</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_set_hostname &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[aa2]"></a>mbedtls_ssl_conf_sni</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[7a9]"></a>mbedtls_ssl_conf_alpn_protocols</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[aa3]"></a>mbedtls_ssl_get_alpn_protocol</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aa4]"></a>mbedtls_ssl_conf_max_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aa5]"></a>mbedtls_ssl_conf_min_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aa6]"></a>mbedtls_ssl_conf_encrypt_then_mac</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aa7]"></a>mbedtls_ssl_conf_extended_master_secret</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aa8]"></a>mbedtls_ssl_conf_max_frag_len</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aa9]"></a>mbedtls_ssl_conf_legacy_renegotiation</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aaa]"></a>mbedtls_ssl_conf_renegotiation</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aab]"></a>mbedtls_ssl_conf_renegotiation_enforced</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aac]"></a>mbedtls_ssl_conf_renegotiation_period</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aad]"></a>mbedtls_ssl_conf_session_tickets</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aae]"></a>mbedtls_ssl_conf_export_keys_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[aaf]"></a>mbedtls_ssl_get_bytes_avail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5a4]"></a>mbedtls_ssl_get_verify_result</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[5a1]"></a>mbedtls_ssl_get_ciphersuite</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_get_ciphersuite &rArr; mbedtls_ssl_get_ciphersuite_name
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[5a2]"></a>mbedtls_ssl_get_version</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[5a3]"></a>mbedtls_ssl_get_record_expansion</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_ssl_get_record_expansion &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hdr_len
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[7b0]"></a>mbedtls_ssl_get_max_frag_len</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[5a6]"></a>mbedtls_ssl_get_peer_cert</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[7aa]"></a>mbedtls_ssl_get_session</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[7ab]"></a>mbedtls_ssl_handshake_step</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3936<LI>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[5a0]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3952<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[7ad]"></a>mbedtls_ssl_renegotiate</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4000<LI>Call Chain = mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>

<P><STRONG><a name="[58a]"></a>mbedtls_ssl_read</STRONG> (Thumb, 1166 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056<LI>Call Chain = mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_read
</UL>

<P><STRONG><a name="[588]"></a>mbedtls_ssl_write</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056<LI>Call Chain = mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_write
</UL>

<P><STRONG><a name="[586]"></a>mbedtls_ssl_close_notify</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_disconnect
</UL>

<P><STRONG><a name="[581]"></a>mbedtls_ssl_free</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
</UL>

<P><STRONG><a name="[58f]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_config_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[597]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_transport
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_endpoint
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[582]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_config_free &rArr; ssl_key_cert_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_key_cert_free
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
</UL>

<P><STRONG><a name="[760]"></a>mbedtls_ssl_sig_from_pk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_sig_from_pk &rArr; mbedtls_pk_can_do
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[ab0]"></a>mbedtls_ssl_sig_from_pk_alg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[755]"></a>mbedtls_ssl_pk_alg_from_sig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[ab1]"></a>mbedtls_ssl_sig_hash_set_find</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[ab2]"></a>mbedtls_ssl_sig_hash_set_add</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[754]"></a>mbedtls_ssl_md_alg_from_hash</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[730]"></a>mbedtls_ssl_hash_from_md_alg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
</UL>

<P><STRONG><a name="[756]"></a>mbedtls_ssl_check_sig_hash</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[ab3]"></a>mbedtls_ssl_set_calc_verify_md</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[7b4]"></a>mbedtls_x509_get_serial</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7b5]"></a>mbedtls_x509_get_alg_null</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, x509.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
</UL>

<P><STRONG><a name="[7b6]"></a>mbedtls_x509_get_alg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7b8]"></a>mbedtls_x509_get_name</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_x509_get_name &rArr; x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7bc]"></a>mbedtls_x509_get_time</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
</UL>

<P><STRONG><a name="[7bd]"></a>mbedtls_x509_get_sig</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7be]"></a>mbedtls_x509_get_sig_alg</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_get_sig_alg &rArr; mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7bf]"></a>mbedtls_x509_get_ext</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[7c0]"></a>mbedtls_x509_dn_gets</STRONG> (Thumb, 274 bytes, Stack size 312 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[7c1]"></a>mbedtls_x509_serial_gets</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_serial_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[7c2]"></a>mbedtls_x509_sig_alg_gets</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_sig_alg_gets &rArr; mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[7c3]"></a>mbedtls_x509_key_size_helper</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_x509_key_size_helper &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[7d8]"></a>mbedtls_x509_time_is_past</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[7dc]"></a>mbedtls_x509_time_is_future</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[7c4]"></a>mbedtls_x509_self_test</STRONG> (Thumb, 296 bytes, Stack size 648 bytes, x509.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[580]"></a>mbedtls_x509_crt_free</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
</UL>

<P><STRONG><a name="[591]"></a>mbedtls_x509_crt_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_x509_crt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[774]"></a>mbedtls_x509_crt_parse_der</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[596]"></a>mbedtls_x509_crt_parse</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[57e]"></a>mbedtls_x509_crt_info</STRONG> (Thumb, 1610 bytes, Stack size 80 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_subject_alt_name
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_name
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_tls_verify_cert
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[5a5]"></a>mbedtls_x509_crt_verify_info</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_crt_verify_info &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
</UL>

<P><STRONG><a name="[797]"></a>mbedtls_x509_crt_check_key_usage</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[798]"></a>mbedtls_x509_crt_check_extended_key_usage</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[7d7]"></a>mbedtls_x509_crt_is_revoked</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_x509_crt_is_revoked &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[799]"></a>mbedtls_x509_crt_verify_with_profile</STRONG> (Thumb, 550 bytes, Stack size 88 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3840<LI>Call Chain = mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[7c5]"></a>mbedtls_x509_crt_verify</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
</UL>

<P><STRONG><a name="[7e7]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[7ef]"></a>netconn_delete</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_delete &rArr; netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[7f1]"></a>netconn_getaddr</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[7f2]"></a>netconn_bind</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lwip_api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[7f3]"></a>netconn_connect</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_connect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[7f4]"></a>netconn_disconnect</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = netconn_disconnect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[7f5]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, lwip_api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[7f6]"></a>netconn_accept</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, lwip_api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[7fc]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[7fd]"></a>netconn_recv</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[7ff]"></a>netconn_send</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_send &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_sendto
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[800]"></a>netconn_sendto</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lwip_api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</UL>

<P><STRONG><a name="[801]"></a>netconn_write_partly</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netconn_write_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[802]"></a>netconn_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip_api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[803]"></a>netconn_shutdown</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[804]"></a>netconn_join_leave_group</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
</UL>

<P><STRONG><a name="[805]"></a>netconn_gethostbyname</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</UL>

<P><STRONG><a name="[7f0]"></a>netconn_free</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[7e8]"></a>netconn_alloc</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[b5]"></a>lwip_netconn_do_newconn</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = lwip_netconn_do_newconn &rArr; pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>lwip_netconn_do_delconn</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = lwip_netconn_do_delconn &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>lwip_netconn_do_bind</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lwip_netconn_do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>lwip_netconn_do_connect</STRONG> (Thumb, 560 bytes, Stack size 16 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lwip_netconn_do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>lwip_netconn_do_disconnect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lwip_netconn_do_disconnect &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>lwip_netconn_do_listen</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lwip_netconn_do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>lwip_netconn_do_send</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = lwip_netconn_do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>lwip_netconn_do_recv</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>lwip_netconn_do_write</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>lwip_netconn_do_getaddr</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lwip_netconn_do_getaddr &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>lwip_netconn_do_close</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = lwip_netconn_do_close &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>lwip_netconn_do_join_leave_group</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lwip_netconn_do_join_leave_group &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>lwip_netconn_do_gethostbyname</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_lib.o(.text)
</UL>
<P><STRONG><a name="[845]"></a>err_to_errno</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwip_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[ab4]"></a>lwip_strerr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwip_err.o(.text), UNUSED)

<P><STRONG><a name="[833]"></a>netbuf_new</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwip_netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
</UL>

<P><STRONG><a name="[80b]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip_netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
</UL>

<P><STRONG><a name="[834]"></a>netbuf_alloc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lwip_netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[836]"></a>netbuf_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip_netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[837]"></a>netbuf_ref</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lwip_netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[838]"></a>netbuf_chain</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwip_netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>

<P><STRONG><a name="[83a]"></a>netbuf_data</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lwip_netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>

<P><STRONG><a name="[83b]"></a>netbuf_next</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lwip_netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>

<P><STRONG><a name="[83c]"></a>netbuf_first</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwip_netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>

<P><STRONG><a name="[83d]"></a>lwip_gethostbyname</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lwip_netdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[83e]"></a>lwip_gethostbyname_r</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, lwip_netdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[56f]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lwip_netdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_connect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
</UL>

<P><STRONG><a name="[56b]"></a>lwip_getaddrinfo</STRONG> (Thumb, 368 bytes, Stack size 72 bytes, lwip_netdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_connect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
</UL>

<P><STRONG><a name="[ab5]"></a>lwip_socket_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip_sockets.o(.text), UNUSED)

<P><STRONG><a name="[ab6]"></a>lwip_socket_thread_cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip_sockets.o(.text), UNUSED)

<P><STRONG><a name="[844]"></a>lwip_accept</STRONG> (Thumb, 670 bytes, Stack size 72 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[846]"></a>lwip_bind</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>

<P><STRONG><a name="[56e]"></a>lwip_close</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_free
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_connect
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
</UL>

<P><STRONG><a name="[56d]"></a>lwip_connect</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_connect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
</UL>

<P><STRONG><a name="[848]"></a>lwip_listen</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>

<P><STRONG><a name="[849]"></a>lwip_recvfrom</STRONG> (Thumb, 680 bytes, Stack size 96 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
</UL>

<P><STRONG><a name="[575]"></a>lwip_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_recv
</UL>

<P><STRONG><a name="[84b]"></a>lwip_recv</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[84c]"></a>lwip_sendto</STRONG> (Thumb, 418 bytes, Stack size 72 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + In Cycle
<LI>Call Chain = lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[84d]"></a>lwip_send</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[84e]"></a>lwip_sendmsg</STRONG> (Thumb, 690 bytes, Stack size 64 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_writev
</UL>

<P><STRONG><a name="[56c]"></a>lwip_socket</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_connect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
</UL>

<P><STRONG><a name="[576]"></a>lwip_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lwip_write &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_send
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
</UL>

<P><STRONG><a name="[84f]"></a>lwip_writev</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
</UL>

<P><STRONG><a name="[577]"></a>lwip_select</STRONG> (Thumb, 1006 bytes, Stack size 120 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lwip_select &rArr; lwip_selscan &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_recv_timeout
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_timeout
</UL>

<P><STRONG><a name="[579]"></a>lwip_shutdown</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
</UL>

<P><STRONG><a name="[853]"></a>lwip_getpeername</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[854]"></a>lwip_getsockname</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[856]"></a>lwip_getsockopt</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>

<P><STRONG><a name="[85a]"></a>lwip_setsockopt</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>

<P><STRONG><a name="[85b]"></a>lwip_ioctl</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[571]"></a>lwip_fcntl</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_fcntl
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_set_nonblock
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_set_block
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_would_block
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_set_nonblock
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_set_block
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_would_block
</UL>

<P><STRONG><a name="[85d]"></a>tcpip_inpkt</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lwip_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[85e]"></a>tcpip_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>

<P><STRONG><a name="[807]"></a>tcpip_callback_with_block</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lwip_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_callback
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_callback
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input
</UL>

<P><STRONG><a name="[7e6]"></a>tcpip_send_msg_wait_sem</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwip_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>

<P><STRONG><a name="[860]"></a>tcpip_api_call</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwip_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>

<P><STRONG><a name="[861]"></a>tcpip_callbackmsg_new</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>

<P><STRONG><a name="[862]"></a>tcpip_callbackmsg_delete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[863]"></a>tcpip_trycallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lwip_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>

<P><STRONG><a name="[864]"></a>tcpip_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lwip_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tcpip_init &rArr; lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_core_init
</UL>

<P><STRONG><a name="[868]"></a>pbuf_free_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[869]"></a>mem_free_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[ab7]"></a>lwip_net_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip_net_socket.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>lwip_net_connect</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, lwip_net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lwip_net_connect &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNTP_Task
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
</UL>

<P><STRONG><a name="[86b]"></a>lwip_net_set_block</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwip_net_socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>

<P><STRONG><a name="[86c]"></a>lwip_net_set_nonblock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwip_net_socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>

<P><STRONG><a name="[86e]"></a>lwip_net_recv</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lwip_net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lwip_net_recv &rArr; lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_would_block
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_recv_timeout
</UL>

<P><STRONG><a name="[412]"></a>lwip_net_send</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lwip_net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lwip_net_send &rArr; lwip_write &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_would_block
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNTP_Task
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
</UL>

<P><STRONG><a name="[413]"></a>lwip_net_recv_timeout</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, lwip_net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lwip_net_recv_timeout &rArr; lwip_net_recv &rArr; lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNTP_Task
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
</UL>

<P><STRONG><a name="[411]"></a>lwip_net_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lwip_net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lwip_net_free &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNTP_Task
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_backup_stop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
</UL>

<P><STRONG><a name="[81d]"></a>sys_mbox_new</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_mbox_new &rArr; osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[7ed]"></a>sys_mbox_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_mbox_free &rArr; osMessageDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageDelete
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[85f]"></a>sys_mbox_post</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_mbox_post &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[80a]"></a>sys_mbox_trypost</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_mbox_trypost &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[7f7]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sys_arch_mbox_fetch &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[824]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[7ea]"></a>sys_mbox_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[81e]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[806]"></a>sys_sem_new</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_sem_new &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_core_init
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_sem_init
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_lwip_if_init
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringdown
</UL>

<P><STRONG><a name="[808]"></a>sys_arch_sem_wait</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_core_init
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_lwip_disconnect
</UL>

<P><STRONG><a name="[80d]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_sem_signal &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_netif_status_irq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_netif_link_irq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_tcpip_init_irq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_link_status
</UL>

<P><STRONG><a name="[7ec]"></a>sys_sem_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_sem_free &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_sem_deinit
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringdown
</UL>

<P><STRONG><a name="[7eb]"></a>sys_sem_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
</UL>

<P><STRONG><a name="[81c]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[86f]"></a>sys_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_init &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[866]"></a>sys_mutex_new</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sys_mutex_new &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[870]"></a>sys_mutex_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[827]"></a>sys_mutex_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[826]"></a>sys_mutex_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[867]"></a>sys_thread_new</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sys_thread_new &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[7f8]"></a>sys_arch_protect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_recv_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_disconnect
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_connect
</UL>

<P><STRONG><a name="[7f9]"></a>sys_arch_unprotect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_recv_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_disconnect
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_connect
</UL>

<P><STRONG><a name="[871]"></a>sys_thread_sem_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_sem_get
</UL>

<P><STRONG><a name="[872]"></a>sys_thread_sem_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_sem_init
</UL>

<P><STRONG><a name="[873]"></a>sys_thread_sem_deinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[874]"></a>sys_jiffies</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_jiffies
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_churnrand
</UL>

<P><STRONG><a name="[875]"></a>sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_restart_timeouts
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_hook_tcp_isn
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_netif_output
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_write
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_output_last
</UL>

<P><STRONG><a name="[876]"></a>sys_msleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip_sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[7e9]"></a>assert_printf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip_sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_first
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool_fn
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input_callback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_do_connect
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_fatal
</UL>

<P><STRONG><a name="[840]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwip_def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[887]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwip_def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_netmask_valid
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_vslprintf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_reqci
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_rejci
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_nakci
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_ackci
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_addci
</UL>

<P><STRONG><a name="[877]"></a>lwip_strnstr</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lwip_def.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[ab8]"></a>lwip_stricmp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lwip_def.o(.text), UNUSED)

<P><STRONG><a name="[882]"></a>lwip_strnicmp</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, lwip_def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
</UL>

<P><STRONG><a name="[ab9]"></a>lwip_itoa</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lwip_def.o(.text), UNUSED)

<P><STRONG><a name="[89c]"></a>dns_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip_dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[980]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lwip_dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dns_addr_to_dns_list_index
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdns
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdns
</UL>

<P><STRONG><a name="[981]"></a>dns_getserver</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwip_dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdns
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_link_status
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dns_addr
</UL>

<P><STRONG><a name="[175]"></a>dns_tmr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[832]"></a>dns_gethostbyname_addrtype</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[88b]"></a>dns_gethostbyname</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip_dns.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[88c]"></a>lwip_standard_chksum</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lwip_inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>

<P><STRONG><a name="[88e]"></a>inet_chksum_pseudo</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lwip_inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>
<BR>[Called By]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>

<P><STRONG><a name="[88f]"></a>ip_chksum_pseudo</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lwip_inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[891]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, lwip_inet_chksum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
</UL>
<BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[892]"></a>ip_chksum_pseudo_partial</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, lwip_inet_chksum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[893]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip_inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[894]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lwip_inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[865]"></a>lwip_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lwip_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_init
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[896]"></a>mem_init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lwip_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mem_init &rArr; sys_mutex_new &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[ce]"></a>mem_free</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lwip_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mem_free &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_tcpip.o(.text)
</UL>
<P><STRONG><a name="[8a0]"></a>mem_trim</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, lwip_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mem_trim &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[8a1]"></a>mem_malloc</STRONG> (Thumb, 836 bytes, Stack size 32 bytes, lwip_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mem_malloc &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[8a2]"></a>mem_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lwip_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[8a6]"></a>memp_init_pool</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lwip_memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memp_init_pool &rArr; memp_overflow_init_element
</UL>
<BR>[Calls]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init_element
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_init
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[897]"></a>memp_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip_memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memp_init &rArr; memp_init_pool &rArr; memp_overflow_init_element
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[8a8]"></a>memp_malloc_pool_fn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lwip_memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = memp_malloc_pool_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_create
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_new
</UL>

<P><STRONG><a name="[7fe]"></a>memp_malloc_fn</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lwip_memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_new
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[8ab]"></a>memp_free_pool</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwip_memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = memp_free_pool &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_destroy
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_create
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_new
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_free
</UL>

<P><STRONG><a name="[7ee]"></a>memp_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lwip_memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_delete
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
</UL>

<P><STRONG><a name="[898]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip_netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[8ac]"></a>netif_input</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lwip_netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[8af]"></a>netif_set_ipaddr</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lwip_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[8b4]"></a>netif_set_gw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip_netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[8b3]"></a>netif_set_netmask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip_netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[8b2]"></a>netif_set_addr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lwip_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifaddr
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifaddr
</UL>

<P><STRONG><a name="[8b5]"></a>netif_add</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, lwip_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_new
</UL>

<P><STRONG><a name="[8ba]"></a>netif_set_default</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip_netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringup
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[8b9]"></a>netif_set_down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip_netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[8b7]"></a>netif_remove</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, lwip_netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_free
</UL>

<P><STRONG><a name="[aba]"></a>netif_find</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lwip_netif.o(.text), UNUSED)

<P><STRONG><a name="[8bb]"></a>netif_set_up</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lwip_netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>

<P><STRONG><a name="[99c]"></a>netif_set_status_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip_netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringup
</UL>

<P><STRONG><a name="[8bc]"></a>netif_set_link_up</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lwip_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = netif_set_link_up &rArr; netif_issue_reports &rArr; igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer &rArr; lwip_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifup
</UL>

<P><STRONG><a name="[982]"></a>netif_set_link_down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_set_link_down
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifdown
</UL>

<P><STRONG><a name="[99b]"></a>netif_set_link_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip_netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringup
</UL>

<P><STRONG><a name="[809]"></a>pbuf_free</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_int
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input_callback
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input_free_current_packet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_write
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_output_last
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_singlebuf
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_netif_output
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_reqci
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_respond
</UL>

<P><STRONG><a name="[835]"></a>pbuf_alloc</STRONG> (Thumb, 634 bytes, Stack size 40 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_netif_output
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_write
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_singlebuf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_reqci
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_respond
</UL>

<P><STRONG><a name="[8bd]"></a>pbuf_alloced_custom</STRONG> (Thumb, 626 bytes, Stack size 32 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_alloced_custom &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[8be]"></a>pbuf_realloc</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_respond
</UL>

<P><STRONG><a name="[8c0]"></a>pbuf_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pbuf_header &rArr; pbuf_header_impl &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input_callback
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
</UL>

<P><STRONG><a name="[8c1]"></a>pbuf_header_force</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[8f5]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwip_pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[8c2]"></a>pbuf_ref</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pbuf_ref &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[839]"></a>pbuf_cat</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_cat &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input
</UL>

<P><STRONG><a name="[8c3]"></a>pbuf_chain</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[8c4]"></a>pbuf_dechain</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lwip_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[8c5]"></a>pbuf_copy</STRONG> (Thumb, 758 bytes, Stack size 24 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_copy &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
</UL>

<P><STRONG><a name="[84a]"></a>pbuf_copy_partial</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pbuf_copy_partial &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[8c6]"></a>pbuf_skip</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
</UL>

<P><STRONG><a name="[87a]"></a>pbuf_take</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_take &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[87c]"></a>pbuf_take_at</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[8c8]"></a>pbuf_coalesce</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lwip_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>

<P><STRONG><a name="[884]"></a>pbuf_try_get_at</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>

<P><STRONG><a name="[8c9]"></a>pbuf_get_at</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwip_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>

<P><STRONG><a name="[87b]"></a>pbuf_put_at</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_put_at &rArr; pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[8ca]"></a>pbuf_memcmp</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, lwip_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[8cb]"></a>pbuf_memfind</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lwip_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</UL>

<P><STRONG><a name="[8cc]"></a>pbuf_strstr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lwip_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[895]"></a>stats_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip_stats.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[8cd]"></a>stats_display_proto</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lwip_stats.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[425]"></a>stats_display_mem</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lwip_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stats_display_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display_memp
</UL>

<P><STRONG><a name="[8ce]"></a>stats_display_memp</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stats_display_memp &rArr; stats_display_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display
</UL>

<P><STRONG><a name="[8cf]"></a>stats_display_sys</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lwip_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stats_display_sys &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display
</UL>

<P><STRONG><a name="[426]"></a>stats_display</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lwip_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stats_display &rArr; stats_display_memp &rArr; stats_display_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display_mem
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display_sys
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display_memp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
</UL>

<P><STRONG><a name="[89a]"></a>tcp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_init &rArr; lwip_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_get_random
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[8d0]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[8d1]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>

<P><STRONG><a name="[8d2]"></a>tcp_pcb_purge</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[8d3]"></a>tcp_slowtmr</STRONG> (Thumb, 1360 bytes, Stack size 56 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[8da]"></a>tcp_pcb_remove</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[818]"></a>tcp_close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[8e0]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[80c]"></a>tcp_recved</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[8e1]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_tcp.o(.text)
</UL>
<P><STRONG><a name="[8e2]"></a>tcp_process_refused_data</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[8e3]"></a>tcp_fasttmr</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[172]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[819]"></a>tcp_shutdown</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[8e4]"></a>tcp_abandon</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
</UL>

<P><STRONG><a name="[81a]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
</UL>

<P><STRONG><a name="[829]"></a>tcp_bind</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[82d]"></a>tcp_listen_with_backlog_and_err</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
</UL>

<P><STRONG><a name="[8e6]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip_tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
</UL>

<P><STRONG><a name="[8e7]"></a>tcp_eff_send_mss_impl</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss_impl &rArr; ip4_route
</UL>
<BR>[Calls]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[8e9]"></a>tcp_next_iss</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = tcp_next_iss &rArr; lwip_hook_tcp_isn &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_hook_tcp_isn
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[82b]"></a>tcp_connect</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[8ec]"></a>tcp_txnow</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwip_tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[abb]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip_tcp.o(.text), UNUSED)

<P><STRONG><a name="[8f0]"></a>tcp_alloc</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
</UL>

<P><STRONG><a name="[8f1]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lwip_tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[822]"></a>tcp_new_ip_type</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[812]"></a>tcp_arg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[814]"></a>tcp_recv</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_recv &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[815]"></a>tcp_sent</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_sent &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[817]"></a>tcp_err</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_err &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[813]"></a>tcp_accept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[816]"></a>tcp_poll</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_poll &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[8b0]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[abc]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip_tcp.o(.text), UNUSED)

<P><STRONG><a name="[8fd]"></a>tcp_input</STRONG> (Thumb, 1822 bytes, Stack size 48 bytes, lwip_tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[8df]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip_tcp_in.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[8eb]"></a>tcp_enqueue_flags</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[8d9]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[80f]"></a>tcp_write</STRONG> (Thumb, 1792 bytes, Stack size 104 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcp_write &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[8f6]"></a>tcp_send_empty_ack</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[810]"></a>tcp_output</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_txnow
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[8d7]"></a>tcp_rst</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tcp_rst &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[8d5]"></a>tcp_rexmit_rto</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[8fa]"></a>tcp_rexmit</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[8f4]"></a>tcp_rexmit_fast</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[8d6]"></a>tcp_keepalive</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcp_keepalive &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[8d4]"></a>tcp_zero_window_probe</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tcp_zero_window_probe &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[904]"></a>sys_timeout</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lwip_timeouts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_timer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_connect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerup
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermreq
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_layer
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timeout
</UL>

<P><STRONG><a name="[8de]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lwip_timeouts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[89e]"></a>sys_timeouts_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lwip_timeouts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[905]"></a>sys_untimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lwip_timeouts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sys_untimeout &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerdown
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_close
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerup
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_echo_lowerdown
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_input
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_protreject
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerdown
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfreq
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfack
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfnakrej
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermreq
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermack
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_layer
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timeout
</UL>

<P><STRONG><a name="[907]"></a>sys_restart_timeouts</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip_timeouts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>

<P><STRONG><a name="[85c]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lwip_timeouts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[899]"></a>udp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_init &rArr; lwip_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_get_random
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[909]"></a>udp_input</STRONG> (Thumb, 422 bytes, Stack size 56 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[828]"></a>udp_bind</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[90d]"></a>udp_sendto_if_src</STRONG> (Thumb, 488 bytes, Stack size 56 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[90f]"></a>udp_sendto_if</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[82f]"></a>udp_sendto</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>

<P><STRONG><a name="[82e]"></a>udp_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[82a]"></a>udp_connect</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[82c]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip_udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
</UL>

<P><STRONG><a name="[821]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip_udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[825]"></a>udp_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>

<P><STRONG><a name="[910]"></a>udp_new</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
</UL>

<P><STRONG><a name="[820]"></a>udp_new_ip_type</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[8b1]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[911]"></a>icmp_input</STRONG> (Thumb, 522 bytes, Stack size 56 bytes, lwip_icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[90b]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip_icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[913]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip_icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[89b]"></a>igmp_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwip_igmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[915]"></a>igmp_lookfor_group</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>

<P><STRONG><a name="[8b6]"></a>igmp_start</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[8b8]"></a>igmp_stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lwip_igmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[8ae]"></a>igmp_report_groups</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer &rArr; lwip_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>

<P><STRONG><a name="[918]"></a>igmp_input</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[91c]"></a>igmp_joingroup_netif</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = igmp_joingroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>

<P><STRONG><a name="[830]"></a>igmp_joingroup</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[91d]"></a>igmp_leavegroup_netif</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = igmp_leavegroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>

<P><STRONG><a name="[831]"></a>igmp_leavegroup</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[174]"></a>igmp_tmr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[abd]"></a>ip4_set_default_multicast_netif</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip_ip4.o(.text), UNUSED)

<P><STRONG><a name="[8e8]"></a>ip4_route</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, lwip_ip4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
</UL>

<P><STRONG><a name="[cb]"></a>ip4_input</STRONG> (Thumb, 598 bytes, Stack size 40 bytes, lwip_ip4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_input
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_tcpip.o(.text)
</UL>
<P><STRONG><a name="[921]"></a>ip4_output_if_opt_src</STRONG> (Thumb, 540 bytes, Stack size 64 bytes, lwip_ip4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>

<P><STRONG><a name="[91a]"></a>ip4_output_if_opt</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, lwip_ip4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>

<P><STRONG><a name="[902]"></a>ip4_output_if</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, lwip_ip4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[90e]"></a>ip4_output_if_src</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, lwip_ip4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[923]"></a>ip4_output</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, lwip_ip4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>

<P><STRONG><a name="[8fe]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, lwip_ip4_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[924]"></a>ip4_addr_netmask_valid</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lwip_ip4_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>

<P><STRONG><a name="[83f]"></a>ip4addr_aton</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, lwip_ip4_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ip4addr_aton &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>

<P><STRONG><a name="[925]"></a>ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lwip_ip4_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
</UL>

<P><STRONG><a name="[927]"></a>ip4addr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lwip_ip4_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_gateway
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_netmask
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_ip_address
</UL>

<P><STRONG><a name="[926]"></a>ip4addr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip_ip4_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip4addr_ntoa &rArr; ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_link_status
</UL>

<P><STRONG><a name="[173]"></a>ip_reass_tmr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lwip_ip4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[920]"></a>ip4_reass</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, lwip_ip4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = ip4_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[922]"></a>ip4_frag</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, lwip_ip4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>

<P><STRONG><a name="[970]"></a>link_required</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_starting
</UL>

<P><STRONG><a name="[92f]"></a>link_terminated</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_notice
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_link_terminated
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerdown
</UL>
<BR>[Called By]<UL><LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_close
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_finished
</UL>

<P><STRONG><a name="[934]"></a>upper_layers_down</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = upper_layers_down
</UL>
<BR>[Called By]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_down
</UL>

<P><STRONG><a name="[933]"></a>link_down</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = link_down &rArr; upper_layers_down
</UL>
<BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layers_down
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_down
</UL>

<P><STRONG><a name="[935]"></a>continue_networks</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = continue_networks &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_networks
</UL>

<P><STRONG><a name="[936]"></a>start_networks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = start_networks &rArr; continue_networks &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_networks
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_phase
</UL>

<P><STRONG><a name="[938]"></a>link_established</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = link_established &rArr; network_phase &rArr; start_networks &rArr; continue_networks &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_auth_with_peer
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_up
</UL>

<P><STRONG><a name="[93a]"></a>auth_withpeer_fail</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = auth_withpeer_fail &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_protrej
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_handle_status
</UL>

<P><STRONG><a name="[93b]"></a>auth_withpeer_success</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = auth_withpeer_success &rArr; network_phase &rArr; start_networks &rArr; continue_networks &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_warn
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_notice
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_handle_status
</UL>

<P><STRONG><a name="[93d]"></a>np_up</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = np_up
</UL>
<BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[93e]"></a>np_down</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = np_down
</UL>
<BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL>

<P><STRONG><a name="[93f]"></a>np_finished</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = np_finished &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_finished
</UL>

<P><STRONG><a name="[940]"></a>get_secret</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = get_secret &rArr; ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_error
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_respond
</UL>

<P><STRONG><a name="[939]"></a>chap_auth_with_peer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lwip_chap-new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = chap_auth_with_peer &rArr; ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_error
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_fatal
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_established
</UL>

<P><STRONG><a name="[95a]"></a>fsm_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwip_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_init
</UL>

<P><STRONG><a name="[94b]"></a>fsm_sdata</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fsm_sdata &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_sprotrej
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpSendEchoRequest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_extcode
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfreq
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfack
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfnakrej
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermreq
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_layer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timeout
</UL>

<P><STRONG><a name="[94d]"></a>fsm_lowerup</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = fsm_lowerup &rArr; fsm_sconfreq &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerup
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_input
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_delayed_up
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_lowerup
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_open
</UL>

<P><STRONG><a name="[94e]"></a>fsm_lowerdown</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fsm_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerdown
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_protrej
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_lowerdown
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_open
</UL>

<P><STRONG><a name="[94f]"></a>fsm_open</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fsm_open &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerdown
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerup
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_open
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_open
</UL>

<P><STRONG><a name="[951]"></a>fsm_close</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = fsm_close &rArr; terminate_layer &rArr; fsm_sdata &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_layer
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_close
</UL>

<P><STRONG><a name="[958]"></a>fsm_input</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = fsm_input &rArr; fsm_rconfnakrej &rArr; ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfreq
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfack
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfnakrej
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermreq
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermack
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rcoderej
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_input
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_input
</UL>

<P><STRONG><a name="[959]"></a>fsm_protreject</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = fsm_protreject &rArr; terminate_layer &rArr; fsm_sdata &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_protrej
</UL>

<P><STRONG><a name="[19e]"></a>lcp_open</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lcp_open &rArr; fsm_open &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_open
</UL>
<BR>[Called By]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>lcp_close</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_finished
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_close
</UL>
<BR>[Called By]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_finished
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_fail
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_networks
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_close
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpLinkFailure
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_nakci
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>lcp_lowerup</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lcp_lowerup &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_send_config
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_recv_config
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerup
</UL>
<BR>[Called By]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>lcp_lowerdown</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lcp_lowerdown &rArr; fsm_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerdown
</UL>
<BR>[Called By]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_terminated
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[968]"></a>lcp_sprotrej</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lcp_sprotrej &rArr; fsm_sdata &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
</UL>
<BR>[Called By]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
</UL>

<P><STRONG><a name="[972]"></a>magic_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip_magic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = magic_init &rArr; magic_churnrand &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_churnrand
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_init
</UL>

<P><STRONG><a name="[973]"></a>magic_randomize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip_magic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = magic_randomize &rArr; magic_churnrand &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_churnrand
</UL>
<BR>[Called By]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
</UL>

<P><STRONG><a name="[974]"></a>magic_random_bytes</STRONG> (Thumb, 88 bytes, Stack size 120 bytes, lwip_magic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = magic_random_bytes &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
</UL>

<P><STRONG><a name="[969]"></a>magic</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip_magic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = magic &rArr; magic_random_bytes &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_random_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_pow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_reqci
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_nakci
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_resetci
</UL>

<P><STRONG><a name="[975]"></a>magic_pow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip_magic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
</UL>

<P><STRONG><a name="[9a7]"></a>ppp_set_auth</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ppp_set_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_lwip_connect
</UL>

<P><STRONG><a name="[930]"></a>new_phase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip_ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_down
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_up
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_established
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_networks
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_down
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_terminated
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_link_end
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_link_failed
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_start
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_new
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_close
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_connect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_do_connect
</UL>

<P><STRONG><a name="[976]"></a>ppp_connect</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ppp_connect &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_do_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_lwip_connect
</UL>

<P><STRONG><a name="[932]"></a>ppp_link_terminated</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ppp_link_terminated
</UL>
<BR>[Called By]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_terminated
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_close
</UL>

<P><STRONG><a name="[977]"></a>ppp_close</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ppp_close &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_link_terminated
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerdown
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_terminated
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_modem_hangup
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_lwip_disconnect
</UL>

<P><STRONG><a name="[978]"></a>ppp_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lwip_ppp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
</UL>

<P><STRONG><a name="[abe]"></a>ppp_ioctl</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lwip_ppp.o(.text), UNUSED)

<P><STRONG><a name="[89d]"></a>ppp_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = ppp_init &rArr; magic_init &rArr; magic_churnrand &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[97a]"></a>ppp_new</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ppp_new &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool_fn
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_create
</UL>

<P><STRONG><a name="[97b]"></a>ppp_start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ppp_start &rArr; lcp_lowerup &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerup
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_connect
</UL>

<P><STRONG><a name="[97c]"></a>ppp_link_failed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip_ppp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
</UL>

<P><STRONG><a name="[97d]"></a>ppp_link_end</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ppp_link_end
</UL>
<BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_disconnect
</UL>

<P><STRONG><a name="[97e]"></a>ppp_singlebuf</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ppp_singlebuf &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
</UL>

<P><STRONG><a name="[97f]"></a>ppp_input</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ppp_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_singlebuf
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_randomize
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_dbglog
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_sprotrej
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input_callback
</UL>

<P><STRONG><a name="[948]"></a>ppp_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ppp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_respond
</UL>

<P><STRONG><a name="[963]"></a>ppp_send_config</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ppp_send_config
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerup
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_down
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_up
</UL>

<P><STRONG><a name="[964]"></a>ppp_recv_config</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ppp_recv_config
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerup
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_down
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_up
</UL>

<P><STRONG><a name="[95d]"></a>sifaddr</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = sifaddr &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[960]"></a>cifaddr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = cifaddr &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_clear_addrs
</UL>

<P><STRONG><a name="[95b]"></a>sdns</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdns
</UL>
<BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[962]"></a>cdns</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cdns
</UL>
<BR>[Calls]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL>

<P><STRONG><a name="[95e]"></a>sifup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sifup &rArr; netif_set_link_up &rArr; netif_issue_reports &rArr; igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer &rArr; lwip_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[961]"></a>sifdown</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sifdown &rArr; netif_set_link_down
</UL>
<BR>[Calls]<UL><LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL>

<P><STRONG><a name="[95c]"></a>get_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip_ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[96e]"></a>netif_set_mtu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip_ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_up
</UL>

<P><STRONG><a name="[abf]"></a>netif_get_mtu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip_ppp.o(.text), UNUSED)

<P><STRONG><a name="[983]"></a>pppos_create</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = pppos_create &rArr; ppp_new &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool_fn
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_new
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_lwip_if_init
</UL>

<P><STRONG><a name="[988]"></a>pppos_input</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pppos_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input_drop
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
</UL>

<P><STRONG><a name="[989]"></a>ppp_strlcpy</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lwip_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_strlcat
</UL>

<P><STRONG><a name="[98a]"></a>ppp_strlcat</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lwip_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_strlcpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[98b]"></a>ppp_vslprintf</STRONG> (Thumb, 1422 bytes, Stack size 144 bytes, lwip_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_slprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_logit
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_slprintf
</UL>

<P><STRONG><a name="[947]"></a>ppp_slprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, lwip_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_vslprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_vslprintf
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_respond
</UL>

<P><STRONG><a name="[ac0]"></a>ppp_print_string</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lwip_utils.o(.text), UNUSED)

<P><STRONG><a name="[945]"></a>ppp_fatal</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lwip_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ppp_fatal &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_logit
</UL>
<BR>[Called By]<UL><LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_auth_with_peer
</UL>

<P><STRONG><a name="[941]"></a>ppp_error</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_logit
</UL>
<BR>[Called By]<UL><LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_auth_with_peer
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_secret
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_addci
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_protrej
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfack
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfnakrej
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_protrej
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_handle_status
</UL>

<P><STRONG><a name="[93c]"></a>ppp_warn</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ppp_warn &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_logit
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_success
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_rprotrej
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_received_echo_reply
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rcoderej
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timeout
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_respond
</UL>

<P><STRONG><a name="[931]"></a>ppp_notice</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_logit
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_success
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_terminated
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpLinkFailure
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_nakci
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[94a]"></a>ppp_info</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ppp_info &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_logit
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpLinkFailure
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermreq
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_handle_status
</UL>

<P><STRONG><a name="[966]"></a>ppp_dbglog</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ppp_dbglog &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_logit
</UL>
<BR>[Called By]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_reqci
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_rprotrej
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_received_echo_reply
</UL>

<P><STRONG><a name="[942]"></a>md5_starts</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwip_md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_md5_make_response
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_hook_tcp_isn
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_random_bytes
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_churnrand
</UL>

<P><STRONG><a name="[943]"></a>md5_update</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lwip_md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_md5_make_response
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_hook_tcp_isn
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_random_bytes
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_churnrand
</UL>

<P><STRONG><a name="[944]"></a>md5_finish</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, lwip_md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_md5_make_response
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_hook_tcp_isn
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_random_bytes
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_churnrand
</UL>

<P><STRONG><a name="[98f]"></a>md5</STRONG> (Thumb, 38 bytes, Stack size 104 bytes, lwip_md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
</UL>

<P><STRONG><a name="[999]"></a>lwip_seed_random</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip_random.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_core_init
</UL>

<P><STRONG><a name="[ac1]"></a>lwip_add_random_seed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip_random.o(.text), UNUSED)

<P><STRONG><a name="[87e]"></a>lwip_get_random</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lwip_random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_core_init
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_churnrand
</UL>

<P><STRONG><a name="[990]"></a>lwip_init_tcp_isn</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwip_tcp_isn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_init_tcp_isn &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_core_init
</UL>

<P><STRONG><a name="[8ea]"></a>lwip_hook_tcp_isn</STRONG> (Thumb, 146 bytes, Stack size 136 bytes, lwip_tcp_isn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = lwip_hook_tcp_isn &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
</UL>

<P><STRONG><a name="[991]"></a>mbed_lwip_get_ip_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lwip_stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed_lwip_get_ip_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_ipv4_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_link_status
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_netif_status_irq
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_ip_address
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dns_addr
</UL>

<P><STRONG><a name="[994]"></a>add_dns_addr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lwip_stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = add_dns_addr &rArr; mbed_lwip_get_ip_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ip_addr_type
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dns_addr_to_dns_list_index
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_ip_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_link_set_connected
</UL>

<P><STRONG><a name="[ac2]"></a>mbed_lwip_get_mac_address</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip_stack.o(.text), UNUSED)

<P><STRONG><a name="[996]"></a>mbed_lwip_get_ip_address</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lwip_stack.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_ip_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsapi_ppp_get_ip_addr
</UL>

<P><STRONG><a name="[997]"></a>mbed_lwip_get_netmask</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip_stack.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsapi_ppp_get_netmask
</UL>

<P><STRONG><a name="[998]"></a>mbed_lwip_get_gateway</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip_stack.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsapi_ppp_get_gw_addr
</UL>

<P><STRONG><a name="[4b8]"></a>mbed_lwip_core_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lwip_stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mbed_lwip_core_init &rArr; tcpip_init &rArr; lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_get_random
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init_tcp_isn
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_seed_random
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringup
</UL>

<P><STRONG><a name="[4cb]"></a>mbed_lwip_ppp_bringup</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lwip_stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = mbed_lwip_ppp_bringup &rArr; ppp_lwip_if_init &rArr; pppos_create &rArr; ppp_new &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_core_init
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_callback
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_status_callback
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_err_remap
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_lwip_if_init
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_lwip_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4c4]"></a>mbed_lwip_ppp_link_status</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip_stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed_lwip_ppp_link_status &rArr; mbed_lwip_get_ip_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_ip_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4c5]"></a>mbed_lwip_ppp_link_set_connected</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip_stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed_lwip_ppp_link_set_connected &rArr; add_dns_addr &rArr; mbed_lwip_get_ip_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dns_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[99f]"></a>mbed_lwip_ppp_bringdown</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lwip_stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = mbed_lwip_ppp_bringdown &rArr; ppp_lwip_disconnect &rArr; ppp_close &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_err_remap
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_lwip_is_dead
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_lwip_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsapi_ppp_disconnect
</UL>

<P><STRONG><a name="[9a4]"></a>handle_modem_hangup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ppp_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_close
</UL>

<P><STRONG><a name="[9a0]"></a>ppp_lwip_is_dead</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ppp_lwip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringdown
</UL>

<P><STRONG><a name="[99d]"></a>ppp_lwip_connect</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ppp_lwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ppp_lwip_connect &rArr; ppp_connect &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_connect
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_set_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringup
</UL>

<P><STRONG><a name="[9a1]"></a>ppp_lwip_disconnect</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ppp_lwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ppp_lwip_disconnect &rArr; ppp_close &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringdown
</UL>

<P><STRONG><a name="[99a]"></a>ppp_lwip_if_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ppp_lwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = ppp_lwip_if_init &rArr; pppos_create &rArr; ppp_new &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringup
</UL>

<P><STRONG><a name="[ac3]"></a>nsapi_ppp_error_code</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ppp_lwip.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>nsapi_ppp_connect</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, ppp_lwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nsapi_ppp_connect &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[4bd]"></a>nsapi_ppp_disconnect</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ppp_lwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = nsapi_ppp_disconnect &rArr; mbed_lwip_ppp_bringdown &rArr; ppp_lwip_disconnect &rArr; ppp_close &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringdown
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[9a8]"></a>nsapi_ppp_get_ip_addr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ppp_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_ip_address
</UL>

<P><STRONG><a name="[9a9]"></a>nsapi_ppp_get_netmask</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ppp_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_netmask
</UL>

<P><STRONG><a name="[9aa]"></a>nsapi_ppp_get_gw_addr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ppp_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_gateway
</UL>

<P><STRONG><a name="[386]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_update
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_check
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ac4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[438]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_vslprintf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[e4]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[439]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
</UL>

<P><STRONG><a name="[720]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrand
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_get_random
</UL>

<P><STRONG><a name="[ac5]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[ac6]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hs_psk
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_psk
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_append
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedules_Status_DeltaCallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line4_Status_DeltaCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line3_Status_DeltaCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2_Status_DeltaCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line1_Status_DeltaCallback
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_ReLoad
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterConvertData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_URC_CLIP_Process
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Sms_SendMsg
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_utf8_string
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseStringValue
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_store_named_data
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bitstring
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckStatusCallback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_delta_callback
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_drbg_self_test_entropy
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_line_by_line
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_self_test_entropy
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_secret
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init_tcp_isn
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_vslprintf
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_singlebuf
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_random_bytes
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_reqci
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_reqci
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_respond
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmdNow
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_start
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_connect
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_shadow_thing_start
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData1
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd606_process
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterCmd_Task
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_backup_start
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_init
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_rejci
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_nakci
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_resetci
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_rejci
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_nakci
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_resetci
</UL>

<P><STRONG><a name="[77f]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[ac7]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ac8]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_bitmask_set
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Load
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIoStatus_Load
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_dummy_source
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init_element
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ac9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[aca]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNTP_Task
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReportSmsToUser
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_alloc_wrap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_calloc
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init_tcp_isn
</UL>

<P><STRONG><a name="[3f3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_connect
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Sms_SendMsg
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p255
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_connect
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_create
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_new
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_reqci
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_nakci
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_reqci
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_nakci
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_resetci
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_respond
</UL>

<P><STRONG><a name="[acb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9ac]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[401]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReportSmsToUser
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
</UL>

<P><STRONG><a name="[408]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedules_Cmd_Status_DeltaCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedules_wD_Status_DeltaCallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line4_Status_DeltaCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line3_Status_DeltaCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2_Status_DeltaCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line1_Status_DeltaCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData2
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvCmdGetP0
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packetforhis
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckStatusCallback
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAckForMyThingName
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[562]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;topicNameFromThingAndAction
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractClientToken
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToAckWaitList
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_strlcpy
</UL>

<P><STRONG><a name="[241]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_alpn_protocols
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsoneq
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_shadow_footer_reported
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shahow_add_reported_header
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_connect
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_fields
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_finalize_json_document
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_add_object
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedules_Status_DeltaCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packetforhis
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterConvertData
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bcc_funs
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsText
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReportSmsToUser
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber_1
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsTextPolling
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePhoneNumber
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribeFromAcceptedAndRejected
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceivedJsonValid
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isJsonValidAndParse
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_reported
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_desired
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_add_object_from_buffer
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emptyJsonWithClientToken
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToShadowActionAcks
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishToShadowAction
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractClientToken
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerJsonTokenOnDelta
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnstr
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_secret
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_vslprintf
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_strlcat
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_strlcpy
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_close
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_respond
</UL>

<P><STRONG><a name="[46f]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_string
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_unsubscribe
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckStatusCallback
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findIndexOfSubscriptionList
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSubscriptionPresent
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementSubscriptionCnt
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_string
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_name
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_secret
</UL>

<P><STRONG><a name="[3eb]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_find_named_data
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_cipher_alg_from_asn1
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[240]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Load
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd606_process
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterConvertData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_strlcpy
</UL>

<P><STRONG><a name="[4f8]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsoneq
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_deliver_message
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnstr
</UL>

<P><STRONG><a name="[0]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[40b]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedules_Time_Status_DeltaCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData2
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetCSQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDoubleValue
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFloatValue
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseInteger8Value
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseInteger16Value
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseInteger32Value
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUnsignedInteger8Value
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUnsignedInteger16Value
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUnsignedInteger32Value
</UL>

<P><STRONG><a name="[9ae]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[9c5]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[9c4]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[9b3]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[46b]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd606_process
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[469]"></a>atoll</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterConvertData
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[45f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[43e]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDataToString
</UL>

<P><STRONG><a name="[460]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSensor_Task
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[acc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[9d1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9ab]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[acd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[9af]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[9ad]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[e1]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[9b6]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[9b7]"></a>__strtoll</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, __strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoll
</UL>

<P><STRONG><a name="[ace]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9b9]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[acf]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[9b8]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9bd]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[9be]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[9c0]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9c1]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9b2]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[9b1]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[9c2]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9ce]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a8]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ad0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9bf]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ad1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[9ba]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[9bb]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[9bc]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[ad2]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ad3]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[9c6]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ad4]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[6ca]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_status
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_calloc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_header
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_chain
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_header
</UL>

<P><STRONG><a name="[ad5]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[ad6]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[9c8]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ad7]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3ee]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_self_test
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_self_test
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_start
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNTP_Task
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmInternetSetDisconnect
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmds_Status_DeltaCallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line4_Status_DeltaCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line3_Status_DeltaCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2_Status_DeltaCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line1_Status_DeltaCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShadowUpdateStatusCallback
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSmartLightMainTask
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_backup_stop
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Check
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsWatchdogFeed
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display_mem
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarShow
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetSimCID
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetSimCIMI
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetSimCPOS
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsAddMsg
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingProcess
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetIMEI
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetATI
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetTime
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Gsm_Error
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_disconnect
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_is_autoreconnect_enabled
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_is_client_connected
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseStringValue
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseBooleanValue
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDoubleValue
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFloatValue
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseInteger8Value
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseInteger16Value
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseInteger32Value
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUnsignedInteger8Value
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUnsignedInteger16Value
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUnsignedInteger32Value
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsPolling
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_self_test
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_write
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_destroy
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_tls_verify_cert
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckStatusCallback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_delta_callback
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceivedJsonValid
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isJsonValidAndParse
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractClientToken
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_self_test
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_self_test
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display_sys
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_display_proto
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_link_status
</UL>

<P><STRONG><a name="[ad8]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ad9]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9c9]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ada]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[545]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_shadow_footer_reported
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shahow_add_reported_header
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_init_json_document
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_connect
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_fields
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_finalize_json_document
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_add_object
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_tls_connect
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;topicNameFromThingAndAction
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillWithClientTokenSize
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_reported
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_desired
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_add_object_from_buffer
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDataToString
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerJsonTokenOnDelta
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_numeric_string
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
</UL>

<P><STRONG><a name="[adb]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[adc]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[9ca]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[add]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[242]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdog
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterRecvData2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmd2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmd1
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmdP2
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmdGetP0
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmdStop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElsterWriteCmdStart
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterParse
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elsterConvertData
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterElterTasks
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_process_action_task
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReportSmsToUser
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Task
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emptyJsonWithClientToken
</UL>

<P><STRONG><a name="[ade]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[adf]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[9cb]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ae0]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[ae1]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[ae2]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[630]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>

<P><STRONG><a name="[9cc]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ae3]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[ae4]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[ae5]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[462]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bcc_funs
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
</UL>

<P><STRONG><a name="[9b5]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoll
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[ae6]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[ae7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ae8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ae9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9b4]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[9a6]"></a>fread</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fread.o(i.fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fread &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
</UL>

<P><STRONG><a name="[1]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[9a2]"></a>fwrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fwrite.o(i.fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fwrite &rArr; fputc &rArr; fputc_stdout &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_output
</UL>

<P><STRONG><a name="[4f0]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSmsPolling
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpmGsm_SendSms
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1ad]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1ac]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1b6]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1b8]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ba]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1bb]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c3]"></a>prvInitialiseMutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[1c7]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1c8]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[5f]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[1e5]"></a>makeFreeRtosPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1ee]"></a>makeCmsisPriority</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[1e2]"></a>inHandlerMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageDelete
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageWaiting
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[224]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[225]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[227]"></a>prvInitialiseNewTask</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[22d]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[22b]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[22f]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[233]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[234]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[60]"></a>prvIdleTask</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[23a]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[23b]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[23f]"></a>prvWriteNameToBuffer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[272]"></a>FLASH_MassErase</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase_IT
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[27b]"></a>FLASH_OB_BOR_LevelConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[276]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[277]"></a>FLASH_OB_RDP_LevelConfig</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[278]"></a>FLASH_OB_DisableWRP</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[279]"></a>FLASH_OB_EnableWRP</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[280]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[27f]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[27e]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[27d]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[28c]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[28b]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[28f]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[65]"></a>ADC_MultiModeDMAError</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_MultiModeDMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc_ex.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>ADC_MultiModeDMAHalfConvCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_MultiModeDMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc_ex.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>ADC_MultiModeDMAConvCplt</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_MultiModeDMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc_ex.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>TIM_DMAPeriodElapsedCplt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TIM_DMAPeriodElapsedCplt &rArr; HAL_TIM_PeriodElapsedCallback &rArr; SysWatchdog &rArr; mUART5_PutString &rArr; mUART5_PutChar &rArr; UART5_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[2f7]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[2f6]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[2f4]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[2fc]"></a>TIM_TI4_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[2fb]"></a>TIM_TI3_SetConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[2fa]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[6a]"></a>TIM_DMATriggerCplt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMATriggerCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[304]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigOCrefClear
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[307]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[306]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[308]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[309]"></a>TIM_SlaveTimer_SetConfig</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchronization_IT
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchronization
</UL>

<P><STRONG><a name="[30c]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[316]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[31a]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[319]"></a>UART_EndTxTransfer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[6e]"></a>UART_DMAError</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>UART_DMARxAbortCallback</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>UART_DMATxAbortCallback</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>UART_DMATxOnlyAbortCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxOnlyAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>UART_DMARxOnlyAbortCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxOnlyAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[32d]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[330]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[32e]"></a>UART_Receive_IT</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[347]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[346]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetPriorityGrouping
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[357]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop_IT
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start_IT
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_DMA
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_DMA
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_IT
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_DMA
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_DMA
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_IT
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_IT
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start
</UL>

<P><STRONG><a name="[36d]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[372]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program_IT
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[371]"></a>FLASH_Program_Word</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program_IT
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[370]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program_IT
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[36f]"></a>FLASH_Program_Byte</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program_IT
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[37a]"></a>ADC_Init</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[78]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(.text)
</UL>
<P><STRONG><a name="[391]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[392]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>

<P><STRONG><a name="[396]"></a>SPI_CloseTx_ISR</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_CloseTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_16BIT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_8BIT
</UL>

<P><STRONG><a name="[7a]"></a>SPI_TxISR_8BIT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_TxISR_8BIT &rArr; SPI_CloseTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>SPI_TxISR_16BIT</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_TxISR_16BIT &rArr; SPI_CloseTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[399]"></a>SPI_CloseRx_ISR</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_16BIT
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_8BIT
</UL>

<P><STRONG><a name="[80]"></a>SPI_RxISR_8BIT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_RxISR_8BIT &rArr; SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>SPI_RxISR_16BIT</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_RxISR_16BIT &rArr; SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[39b]"></a>SPI_CloseRxTx_ISR</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_16BIT
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_16BIT
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_8BIT
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_8BIT
</UL>

<P><STRONG><a name="[7e]"></a>SPI_2linesTxISR_8BIT</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2linesTxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>SPI_2linesRxISR_8BIT</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2linesRxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>SPI_2linesTxISR_16BIT</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2linesTxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>SPI_2linesRxISR_16BIT</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2linesRxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>SPI_DMAError</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_DMATransmitCplt &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_DMATransmitReceiveCplt &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>SPI_AbortRx_ISR</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_AbortRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>SPI_AbortTx_ISR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>SPI_DMARxAbortCallback</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMARxAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>SPI_DMATxAbortCallback</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_DMATxAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[3b6]"></a>MX_SPI1_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b8]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b9]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ba]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bb]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bc]"></a>MX_UART5_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bd]"></a>MX_UART4_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3be]"></a>MX_RTC_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c1]"></a>MX_RNG_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_RNG_Init &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c2]"></a>MX_IWDG_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c3]"></a>MX_ADC1_Init</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c6]"></a>MX_DMA_Init</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c7]"></a>MX_GPIO_Init</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3dd]"></a>NVIC_SystemReset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuTask
</UL>

<P><STRONG><a name="[3e9]"></a>GetSector</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, system_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[3e7]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceCfg_Load
</UL>

<P><STRONG><a name="[8d]"></a>ShadowUpdateStatusCallback</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ShadowUpdateStatusCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shadow_thing.o(.text)
</UL>
<P><STRONG><a name="[3ef]"></a>shadow_thing_init</STRONG> (Thumb, 318 bytes, Stack size 72 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = shadow_thing_init &rArr; aws_iot_shadow_connect &rArr; aws_iot_mqtt_subscribe &rArr; _aws_iot_mqtt_internal_subscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_set_autoreconnect_status
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_connect
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_thread
</UL>

<P><STRONG><a name="[ef]"></a>shadow_thing_thread</STRONG> (Thumb, 7100 bytes, Stack size 8512 bytes, shadow_thing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 9148<LI>Call Chain = shadow_thing_thread &rArr; aws_iot_shadow_update &rArr; aws_iot_shadow_internal_action &rArr; publishToShadowAction &rArr; aws_iot_mqtt_publish &rArr; _aws_iot_mqtt_internal_publish &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_free
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_shadow_footer_reported
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shahow_add_reported_header
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_yield
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_update
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_register_delta
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_init_json_document
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_disconnect
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_fields
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_finalize_json_document
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_add_object
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWatchdogFeed
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmInternetSetDisconnect
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGPRS_IsWorking
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_GetSize
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_thing_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shadow_thing.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>vNTP_Task</STRONG> (Thumb, 770 bytes, Stack size 16 bytes, ntp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = vNTP_Task &rArr; lwip_net_send &rArr; lwip_write &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRtcTime
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_send
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_recv_timeout
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_free
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_connect
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGPRS_IsWorking
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntp_server.o(.constdata)
</UL>
<P><STRONG><a name="[42e]"></a>vWatchdog_Task</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, watchdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[440]"></a>SST25__Status</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__GlobalProtect
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteDisable
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
</UL>

<P><STRONG><a name="[442]"></a>SST25__WriteEnable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
</UL>

<P><STRONG><a name="[444]"></a>SST25__WriteEAR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sst25.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
</UL>

<P><STRONG><a name="[44c]"></a>SST25__CmdRead</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sst25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>

<P><STRONG><a name="[44d]"></a>SST25__CmdWrite</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SST25__CmdWrite &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
</UL>

<P><STRONG><a name="[44e]"></a>SST25__CmdReadBuf</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SST25__CmdReadBuf &rArr; halSpiWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
</UL>

<P><STRONG><a name="[44f]"></a>SST25__WriteDisable</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sst25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>

<P><STRONG><a name="[450]"></a>SST25__GlobalProtect</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sst25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>

<P><STRONG><a name="[454]"></a>CheckSum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ota_backup_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Task
</UL>

<P><STRONG><a name="[f4]"></a>vOTA_Backup_Task</STRONG> (Thumb, 1436 bytes, Stack size 104 bytes, ota_backup_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = vOTA_Backup_Task &rArr; lwip_net_send &rArr; lwip_write &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_send
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_recv_timeout
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_free
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_connect
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGPRS_IsWorking
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsResetIntervalCnt
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgParserPacket
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOTA_Backup_Check
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_backup_server.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>status_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>ppp_output_cb</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ppp_output_cb &rArr; COMM_Putc &rArr; mUSART1_PutChar &rArr; USART1_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.text)
</UL>
<P><STRONG><a name="[4ed]"></a>SwapDecimalNibble</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
</UL>

<P><STRONG><a name="[4ea]"></a>EncodePDUMessage</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EncodePDUMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
</UL>

<P><STRONG><a name="[4ee]"></a>DecodePDUMessage</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
</UL>

<P><STRONG><a name="[4e9]"></a>EncodePhoneNumber</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EncodePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
</UL>

<P><STRONG><a name="[4ec]"></a>DecodePhoneNumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
</UL>

<P><STRONG><a name="[511]"></a>_aws_iot_mqtt_internal_decode_packet_remaining_len</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _aws_iot_mqtt_internal_decode_packet_remaining_len
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_read_packet
</UL>

<P><STRONG><a name="[50f]"></a>_aws_iot_mqtt_internal_read_packet</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _aws_iot_mqtt_internal_read_packet &rArr; _aws_iot_mqtt_internal_decode_packet_remaining_len
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_decode_packet_remaining_len
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_cycle_read
</UL>

<P><STRONG><a name="[514]"></a>_aws_iot_mqtt_internal_is_topic_matched</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _aws_iot_mqtt_internal_is_topic_matched
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_deliver_message
</UL>

<P><STRONG><a name="[513]"></a>_aws_iot_mqtt_internal_deliver_message</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _aws_iot_mqtt_internal_deliver_message &rArr; _aws_iot_mqtt_internal_is_topic_matched
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_is_topic_matched
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_handle_publish
</UL>

<P><STRONG><a name="[515]"></a>_aws_iot_mqtt_internal_handle_publish</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, aws_iot_mqtt_client_common_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_ack
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_publish
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_deliver_message
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_cycle_read
</UL>

<P><STRONG><a name="[51f]"></a>_aws_iot_get_connect_packet_length</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, aws_iot_mqtt_client_connect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
</UL>

<P><STRONG><a name="[51e]"></a>_aws_iot_mqtt_serialize_connect</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, aws_iot_mqtt_client_connect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _aws_iot_mqtt_serialize_connect &rArr; aws_iot_mqtt_internal_write_utf8_string &rArr; aws_iot_mqtt_internal_write_uint_16
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_get_connect_packet_length
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_init_header
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_utf8_string
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_char
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_uint_16
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
</UL>

<P><STRONG><a name="[521]"></a>_aws_iot_mqtt_deserialize_connack</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, aws_iot_mqtt_client_connect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _aws_iot_mqtt_deserialize_connack &rArr; aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_char
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_connect
</UL>

<P><STRONG><a name="[526]"></a>_aws_iot_mqtt_is_client_state_valid_for_connect</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aws_iot_mqtt_client_connect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
</UL>

<P><STRONG><a name="[524]"></a>_aws_iot_mqtt_internal_connect</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, aws_iot_mqtt_client_connect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _aws_iot_mqtt_internal_connect &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_connack
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_connect
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_sec
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_connect_params
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_connect
</UL>

<P><STRONG><a name="[52b]"></a>_aws_iot_mqtt_read_string_with_len</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, aws_iot_mqtt_client_publish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_publish
</UL>

<P><STRONG><a name="[52d]"></a>_aws_iot_mqtt_internal_serialize_publish</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, aws_iot_mqtt_client_publish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _aws_iot_mqtt_internal_serialize_publish &rArr; aws_iot_mqtt_internal_write_utf8_string &rArr; aws_iot_mqtt_internal_write_uint_16
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_init_header
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_utf8_string
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_char
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_uint_16
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_publish
</UL>

<P><STRONG><a name="[52f]"></a>_aws_iot_mqtt_internal_publish</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, aws_iot_mqtt_client_publish.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = _aws_iot_mqtt_internal_publish &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_ack
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_serialize_publish
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_publish
</UL>

<P><STRONG><a name="[532]"></a>_aws_iot_mqtt_serialize_subscribe</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, aws_iot_mqtt_client_subscribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _aws_iot_mqtt_serialize_subscribe &rArr; aws_iot_mqtt_internal_write_utf8_string &rArr; aws_iot_mqtt_internal_write_uint_16
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_init_header
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_utf8_string
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_char
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_uint_16
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
</UL>

<P><STRONG><a name="[533]"></a>_aws_iot_mqtt_deserialize_suback</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, aws_iot_mqtt_client_subscribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _aws_iot_mqtt_deserialize_suback &rArr; aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_char
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_read_uint16_t
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
</UL>

<P><STRONG><a name="[535]"></a>_aws_iot_mqtt_get_free_message_handler_index</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, aws_iot_mqtt_client_subscribe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_resubscribe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_subscribe
</UL>

<P><STRONG><a name="[534]"></a>_aws_iot_mqtt_internal_subscribe</STRONG> (Thumb, 260 bytes, Stack size 96 bytes, aws_iot_mqtt_client_subscribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _aws_iot_mqtt_internal_subscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_get_free_message_handler_index
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_suback
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_subscribe
</UL>

<P><STRONG><a name="[537]"></a>_aws_iot_mqtt_internal_resubscribe</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, aws_iot_mqtt_client_subscribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_get_free_message_handler_index
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_suback
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_subscribe
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_resubscribe
</UL>

<P><STRONG><a name="[538]"></a>_aws_iot_mqtt_serialize_unsubscribe</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, aws_iot_mqtt_client_unsubscribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _aws_iot_mqtt_serialize_unsubscribe &rArr; aws_iot_mqtt_internal_write_utf8_string &rArr; aws_iot_mqtt_internal_write_uint_16
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_init_header
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_utf8_string
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_char
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_uint_16
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_write_len_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_unsubscribe
</UL>

<P><STRONG><a name="[539]"></a>_aws_iot_mqtt_deserialize_unsuback</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, aws_iot_mqtt_client_unsubscribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _aws_iot_mqtt_deserialize_unsuback &rArr; aws_iot_mqtt_internal_deserialize_ack &rArr; aws_iot_mqtt_internal_decode_remaining_length_from_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_deserialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_unsubscribe
</UL>

<P><STRONG><a name="[53a]"></a>_aws_iot_mqtt_internal_unsubscribe</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, aws_iot_mqtt_client_unsubscribe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _aws_iot_mqtt_internal_unsubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_deserialize_unsuback
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_serialize_unsubscribe
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_wait_for_read
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_next_packet_id
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_unsubscribe
</UL>

<P><STRONG><a name="[53d]"></a>_aws_iot_mqtt_force_client_disconnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, aws_iot_mqtt_client_yield.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _aws_iot_mqtt_force_client_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_disconnect
</UL>

<P><STRONG><a name="[53c]"></a>_aws_iot_mqtt_handle_disconnect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, aws_iot_mqtt_client_yield.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _aws_iot_mqtt_handle_disconnect &rArr; aws_iot_mqtt_disconnect &rArr; _aws_iot_mqtt_internal_disconnect &rArr; aws_iot_mqtt_internal_serialize_zero &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_force_client_disconnect
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
</UL>

<P><STRONG><a name="[53e]"></a>_aws_iot_mqtt_handle_reconnect</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, aws_iot_mqtt_client_yield.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _aws_iot_mqtt_handle_reconnect &rArr; aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_attempt_reconnect
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
</UL>

<P><STRONG><a name="[53f]"></a>_aws_iot_mqtt_keep_alive</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, aws_iot_mqtt_client_yield.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _aws_iot_mqtt_keep_alive &rArr; _aws_iot_mqtt_handle_disconnect &rArr; aws_iot_mqtt_disconnect &rArr; _aws_iot_mqtt_internal_disconnect &rArr; aws_iot_mqtt_internal_serialize_zero &rArr; aws_iot_mqtt_internal_init_header
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_disconnect
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_sec
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_serialize_zero
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_internal_yield
</UL>

<P><STRONG><a name="[540]"></a>_aws_iot_mqtt_internal_yield</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, aws_iot_mqtt_client_yield.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _aws_iot_mqtt_internal_yield &rArr; _aws_iot_mqtt_handle_reconnect &rArr; aws_iot_mqtt_attempt_reconnect &rArr; aws_iot_mqtt_resubscribe &rArr; _aws_iot_mqtt_internal_resubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_keep_alive
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_reconnect
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aws_iot_mqtt_handle_disconnect
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_timer_expired
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_internal_cycle_read
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_set_client_state
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_yield
</UL>

<P><STRONG><a name="[556]"></a>emptyJsonWithClientToken</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, aws_iot_shadow_json.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillWithClientToken
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_get_request_json
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_internal_delete_request_json
</UL>

<P><STRONG><a name="[559]"></a>convertDataToString</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = convertDataToString &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReturnValueOfSnPrintf
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_fields
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_add_object
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_reported
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_desired
</UL>

<P><STRONG><a name="[558]"></a>checkReturnValueOfSnPrintf</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, aws_iot_shadow_json.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_shadow_footer_reported
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shahow_add_reported_header
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_init_json_document
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_fields
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_finalize_json_document
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_add_object
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_fill_with_client_token
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_reported
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_shadow_add_desired
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_add_object_from_buffer
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDataToString
</UL>

<P><STRONG><a name="[95]"></a>shadow_delta_callback</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = shadow_delta_callback &rArr; isJsonKeyMatchingAndUpdateValue &rArr; UpdateValueIfNoObject &rArr; parseDoubleValue &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractVersionNumber
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isJsonKeyMatchingAndUpdateValue
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isJsonValidAndParse
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_iot_shadow_records.o(.text)
</UL>
<P><STRONG><a name="[568]"></a>getNextFreeIndexOfSubscriptionList</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToShadowActionAcks
</UL>

<P><STRONG><a name="[564]"></a>topicNameFromThingAndAction</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = topicNameFromThingAndAction &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribeFromAcceptedAndRejected
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToShadowActionAcks
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishToShadowAction
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSubscriptionPresent
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementSubscriptionCnt
</UL>

<P><STRONG><a name="[565]"></a>isAckForMyThingName</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = isAckForMyThingName &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckStatusCallback
</UL>

<P><STRONG><a name="[566]"></a>findIndexOfSubscriptionList</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = findIndexOfSubscriptionList &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribeFromAcceptedAndRejected
</UL>

<P><STRONG><a name="[567]"></a>unsubscribeFromAcceptedAndRejected</STRONG> (Thumb, 706 bytes, Stack size 184 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = unsubscribeFromAcceptedAndRejected &rArr; aws_iot_mqtt_unsubscribe &rArr; _aws_iot_mqtt_internal_unsubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_iot_mqtt_unsubscribe
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findIndexOfSubscriptionList
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;topicNameFromThingAndAction
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExpiredResponseCallbacks
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckStatusCallback
</UL>

<P><STRONG><a name="[96]"></a>AckStatusCallback</STRONG> (Thumb, 370 bytes, Stack size 160 bytes, aws_iot_shadow_records.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = AckStatusCallback &rArr; unsubscribeFromAcceptedAndRejected &rArr; aws_iot_mqtt_unsubscribe &rArr; _aws_iot_mqtt_internal_unsubscribe &rArr; aws_iot_mqtt_internal_wait_for_read &rArr; aws_iot_mqtt_internal_cycle_read &rArr; _aws_iot_mqtt_internal_handle_publish &rArr; aws_iot_mqtt_internal_deserialize_publish &rArr; _aws_iot_mqtt_read_string_with_len &rArr; aws_iot_mqtt_internal_read_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribeFromAcceptedAndRejected
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAckForMyThingName
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractVersionNumber
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isJsonValidAndParse
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractClientToken
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_iot_shadow_records.o(.text)
</UL>
<P><STRONG><a name="[56a]"></a>net_prepare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_socket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
</UL>

<P><STRONG><a name="[573]"></a>net_would_block</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_would_block &rArr; lwip_fcntl
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
</UL>

<P><STRONG><a name="[57b]"></a>jsmn_alloc_token</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, jsmn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_string
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_primitive
</UL>

<P><STRONG><a name="[57c]"></a>jsmn_fill_token</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jsmn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jsmn_fill_token
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_string
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_primitive
</UL>

<P><STRONG><a name="[57a]"></a>jsmn_parse_primitive</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, jsmn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = jsmn_parse_primitive &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_fill_token
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
</UL>

<P><STRONG><a name="[57d]"></a>jsmn_parse_string</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, jsmn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_fill_token
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
</UL>

<P><STRONG><a name="[99]"></a>_iot_tls_verify_cert</STRONG> (Thumb, 166 bytes, Stack size 1048 bytes, network_mbedtls_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1484<LI>Call Chain = _iot_tls_verify_cert &rArr; mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_mbedtls_wrapper.o(.text)
</UL>
<P><STRONG><a name="[5aa]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>

<P><STRONG><a name="[5be]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>

<P><STRONG><a name="[5d7]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[5e0]"></a>mbedtls_clz</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>

<P><STRONG><a name="[5ee]"></a>mpi_get_digit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[5e5]"></a>mpi_sub_hlp</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[5eb]"></a>mpi_mul_hlp</STRONG> (Thumb, 1584 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[5f3]"></a>mbedtls_int_div_int</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_int_div_int &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[5f6]"></a>mpi_write_hlp</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_int
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_int
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[5fd]"></a>mpi_montg_init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_montg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[5fa]"></a>mpi_montmul</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[5fb]"></a>mpi_montred</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[60a]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
</UL>

<P><STRONG><a name="[60b]"></a>ccm_auth_crypt</STRONG> (Thumb, 860 bytes, Stack size 120 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
</UL>

<P><STRONG><a name="[612]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>

<P><STRONG><a name="[9f]"></a>get_no_padding</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cipher.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>get_pkcs_padding</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>add_pkcs_padding</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[617]"></a>mbedtls_cipher_get_block_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[132]"></a>gcm_ctx_alloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcm_ctx_alloc &rArr; mbedtls_gcm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>gcm_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gcm_ctx_free &rArr; mbedtls_gcm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>ccm_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ccm_ctx_alloc &rArr; mbedtls_ccm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>ccm_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ccm_ctx_free &rArr; mbedtls_ccm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>aes_crypt_cbc_wrap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = aes_crypt_cbc_wrap &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>aes_ctx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aes_ctx_alloc &rArr; mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>aes_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aes_ctx_free &rArr; mbedtls_aes_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>gcm_aes_setkey_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>ccm_aes_setkey_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ccm_aes_setkey_wrap &rArr; mbedtls_ccm_setkey &rArr; mbedtls_cipher_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[62a]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
</UL>

<P><STRONG><a name="[626]"></a>ctr_drbg_update_internal</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ctr_drbg_update_internal &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_update
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
</UL>

<P><STRONG><a name="[627]"></a>block_cipher_df</STRONG> (Thumb, 292 bytes, Stack size 840 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_update
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
</UL>

<P><STRONG><a name="[a0]"></a>ctr_drbg_self_test_entropy</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ctr_drbg_self_test_entropy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctr_drbg.o(.text)
</UL>
<P><STRONG><a name="[631]"></a>debug_send_line</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = debug_send_line
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_line_by_line
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
</UL>

<P><STRONG><a name="[636]"></a>debug_print_pk</STRONG> (Thumb, 222 bytes, Stack size 96 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_debug
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[638]"></a>debug_print_line_by_line</STRONG> (Thumb, 96 bytes, Stack size 552 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = debug_print_line_by_line &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[651]"></a>derive_mpi</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = derive_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[65a]"></a>ecdsa_signature_to_asn1</STRONG> (Thumb, 140 bytes, Stack size 176 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ecdsa_signature_to_asn1 &rArr; mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[66b]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>

<P><STRONG><a name="[684]"></a>ecp_get_type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ecp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[672]"></a>ecp_modp</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
</UL>

<P><STRONG><a name="[673]"></a>ecp_normalize_jac</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[674]"></a>ecp_normalize_jac_many</STRONG> (Thumb, 780 bytes, Stack size 64 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
</UL>

<P><STRONG><a name="[675]"></a>ecp_safe_invert_jac</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
</UL>

<P><STRONG><a name="[676]"></a>ecp_double_jac</STRONG> (Thumb, 1534 bytes, Stack size 72 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[677]"></a>ecp_add_mixed</STRONG> (Thumb, 1378 bytes, Stack size 112 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[678]"></a>ecp_randomize_jac</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[679]"></a>ecp_comb_fixed</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecp_comb_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[67a]"></a>ecp_precompute_comb</STRONG> (Thumb, 294 bytes, Stack size 176 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[67b]"></a>ecp_select_comb</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ecp_select_comb &rArr; ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[67c]"></a>ecp_mul_comb_core</STRONG> (Thumb, 202 bytes, Stack size 96 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[67d]"></a>ecp_mul_comb</STRONG> (Thumb, 486 bytes, Stack size 368 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[67e]"></a>ecp_normalize_mxz</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ecp_normalize_mxz &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[67f]"></a>ecp_randomize_mxz</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = ecp_randomize_mxz &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[680]"></a>ecp_double_add_mxz</STRONG> (Thumb, 1240 bytes, Stack size 144 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ecp_double_add_mxz &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_mxz
</UL>

<P><STRONG><a name="[681]"></a>ecp_mul_mxz</STRONG> (Thumb, 388 bytes, Stack size 96 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = ecp_mul_mxz &rArr; ecp_randomize_mxz &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_swap
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_add_mxz
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_mxz
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_mxz
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[682]"></a>ecp_check_pubkey_sw</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[683]"></a>ecp_check_pubkey_mx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecp_check_pubkey_mx &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[686]"></a>mbedtls_ecp_mul_shortcuts</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[68b]"></a>ecp_group_load</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mpi_load
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[68d]"></a>ecp_use_curve25519</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[a4]"></a>ecp_mod_p255</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p255 &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[68e]"></a>fix_negative</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
</UL>

<P><STRONG><a name="[690]"></a>sub32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub32
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
</UL>

<P><STRONG><a name="[68f]"></a>add32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add32
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
</UL>

<P><STRONG><a name="[a3]"></a>ecp_mod_p384</STRONG> (Thumb, 1538 bytes, Stack size 96 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p384 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>ecp_mod_p256</STRONG> (Thumb, 1184 bytes, Stack size 80 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ecp_mod_p256 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[68c]"></a>ecp_mpi_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>

<P><STRONG><a name="[693]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
</UL>

<P><STRONG><a name="[694]"></a>entropy_update</STRONG> (Thumb, 76 bytes, Stack size 96 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_update_manual
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>

<P><STRONG><a name="[698]"></a>entropy_gather_internal</STRONG> (Thumb, 168 bytes, Stack size 160 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_gather
</UL>

<P><STRONG><a name="[a6]"></a>entropy_dummy_source</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = entropy_dummy_source
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entropy.o(.text)
</UL>
<P><STRONG><a name="[69b]"></a>mbedtls_entropy_source_self_test_gather</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
</UL>

<P><STRONG><a name="[69d]"></a>mbedtls_entropy_source_self_test_check_bits</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
</UL>

<P><STRONG><a name="[6a1]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>

<P><STRONG><a name="[69f]"></a>gcm_gen_table</STRONG> (Thumb, 404 bytes, Stack size 80 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[6a0]"></a>gcm_mult</STRONG> (Thumb, 448 bytes, Stack size 44 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[6ae]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
</UL>

<P><STRONG><a name="[a7]"></a>hmac_drbg_self_test_entropy</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hmac_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hmac_drbg_self_test_entropy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmac_drbg.o(.text)
</UL>
<P><STRONG><a name="[6b2]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[137]"></a>sha1_starts_wrap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>sha1_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>sha1_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>sha1_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha1_ctx_alloc &rArr; mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>sha1_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>sha1_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha1_ctx_free &rArr; mbedtls_sha1_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>sha1_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>sha224_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>sha224_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>sha224_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>sha224_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>sha224_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha224_ctx_alloc &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>sha224_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha224_ctx_free &rArr; mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>sha224_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>sha224_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>sha256_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha256_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>sha256_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>sha384_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha384_starts_wrap &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>sha384_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = sha384_update_wrap &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>sha384_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = sha384_finish_wrap &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>sha384_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = sha384_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>sha384_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha384_ctx_alloc &rArr; mbedtls_sha512_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>sha384_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha384_ctx_free &rArr; mbedtls_sha512_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>sha384_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha384_clone_wrap &rArr; mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>sha384_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = sha384_process_wrap &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>sha512_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha512_starts_wrap &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>sha512_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = sha512_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6d1]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memory_buffer_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_free
</UL>

<P><STRONG><a name="[6c9]"></a>debug_header</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, memory_buffer_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_chain
</UL>

<P><STRONG><a name="[6cb]"></a>debug_chain</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, memory_buffer_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_header
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_status
</UL>

<P><STRONG><a name="[6cc]"></a>verify_header</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, memory_buffer_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = verify_header &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
</UL>

<P><STRONG><a name="[6cd]"></a>verify_chain</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, memory_buffer_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = verify_chain &rArr; verify_header &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_header
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_verify
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_calloc
</UL>

<P><STRONG><a name="[a9]"></a>buffer_alloc_calloc</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, memory_buffer_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = buffer_alloc_calloc &rArr; verify_chain &rArr; verify_header &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memory_buffer_alloc.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>buffer_alloc_free</STRONG> (Thumb, 924 bytes, Stack size 24 bytes, memory_buffer_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = buffer_alloc_free &rArr; verify_chain &rArr; verify_header &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_header
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memory_buffer_alloc.o(.text)
</UL>
<P><STRONG><a name="[6d3]"></a>check_pointer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, memory_buffer_alloc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_self_test
</UL>

<P><STRONG><a name="[6d4]"></a>check_all_free</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, memory_buffer_alloc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_self_test
</UL>

<P><STRONG><a name="[6d5]"></a>oid_x520_attr_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
</UL>

<P><STRONG><a name="[6d7]"></a>oid_x509_ext_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
</UL>

<P><STRONG><a name="[6d9]"></a>oid_ext_key_usage_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
</UL>

<P><STRONG><a name="[6db]"></a>oid_sig_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
</UL>

<P><STRONG><a name="[6de]"></a>oid_pk_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>

<P><STRONG><a name="[6e0]"></a>oid_grp_id_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>

<P><STRONG><a name="[6e2]"></a>oid_cipher_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_cipher_alg
</UL>

<P><STRONG><a name="[6e4]"></a>oid_md_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
</UL>

<P><STRONG><a name="[6e9]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
</UL>

<P><STRONG><a name="[6eb]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>

<P><STRONG><a name="[6ec]"></a>pk_hashlen_helper</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
</UL>

<P><STRONG><a name="[6f0]"></a>mbedtls_pk_get_len</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_get_len &rArr; mbedtls_pk_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[6fb]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_free_wrap
</UL>

<P><STRONG><a name="[154]"></a>rsa_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>rsa_get_bitlen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>rsa_verify_wrap</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3456<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>rsa_sign_wrap</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>rsa_alloc_wrap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alloc_wrap &rArr; mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>rsa_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>rsa_debug</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>eckey_can_do</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>eckey_get_bitlen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>ecdsa_verify_wrap</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>eckey_verify_wrap</STRONG> (Thumb, 70 bytes, Stack size 216 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = eckey_verify_wrap &rArr; ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>ecdsa_sign_wrap</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2392<LI>Call Chain = ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>eckey_sign_wrap</STRONG> (Thumb, 72 bytes, Stack size 232 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2624<LI>Call Chain = eckey_sign_wrap &rArr; ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>eckey_check_pair</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = eckey_check_pair &rArr; mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>eckey_alloc_wrap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eckey_alloc_wrap &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>eckey_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eckey_free_wrap &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>eckey_debug</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>eckeydh_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>ecdsa_can_do</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>ecdsa_alloc_wrap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecdsa_alloc_wrap &rArr; mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>ecdsa_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ecdsa_free_wrap &rArr; mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>rsa_alt_can_do</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>rsa_alt_get_bitlen</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rsa_alt_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>rsa_alt_sign_wrap</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rsa_alt_sign_wrap
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>rsa_alt_decrypt_wrap</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rsa_alt_decrypt_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>rsa_alt_check_pair</STRONG> (Thumb, 164 bytes, Stack size 1096 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4552<LI>Call Chain = rsa_alt_check_pair &rArr; rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_sign_wrap
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_get_bitlen
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_get_bitlen
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>rsa_alt_alloc_wrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsa_alt_alloc_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>rsa_alt_free_wrap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rsa_alt_free_wrap &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6fc]"></a>pk_get_ecparams</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[6fd]"></a>pk_use_ecparams</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pk_use_ecparams &rArr; mbedtls_ecp_group_load &rArr; ecp_use_curve25519 &rArr; mbedtls_mpi_read_string &rArr; mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[6fe]"></a>pk_get_ecpubkey</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[6ff]"></a>pk_get_rsapubkey</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[701]"></a>pk_get_pk_alg</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[705]"></a>pk_parse_key_pkcs1_der</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[707]"></a>pk_parse_key_sec1_der</STRONG> (Thumb, 422 bytes, Stack size 64 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecparams
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[708]"></a>pk_parse_key_pkcs8_unencrypted_der</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[2]"></a>platform_exit_uninit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[714]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[70e]"></a>rsa_prepare_blinding</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[710]"></a>mgf_mask</STRONG> (Thumb, 138 bytes, Stack size 120 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mgf_mask &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[aa]"></a>myrand</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = myrand
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rsa.o(.text)
</UL>
<P><STRONG><a name="[722]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>

<P><STRONG><a name="[724]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>

<P><STRONG><a name="[726]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>

<P><STRONG><a name="[75f]"></a>mbedtls_ssl_own_key</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_cli.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[73e]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
</UL>

<P><STRONG><a name="[762]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
</UL>

<P><STRONG><a name="[72d]"></a>ssl_write_hostname_ext</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ssl_write_hostname_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[72e]"></a>ssl_write_renegotiation_ext</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_renegotiation_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[72f]"></a>ssl_write_signature_algorithms_ext</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ssl_write_signature_algorithms_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[731]"></a>ssl_write_supported_elliptic_curves_ext</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ssl_write_supported_elliptic_curves_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[732]"></a>ssl_write_supported_point_formats_ext</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_supported_point_formats_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[733]"></a>ssl_write_max_fragment_length_ext</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_max_fragment_length_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[734]"></a>ssl_write_encrypt_then_mac_ext</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_encrypt_then_mac_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[735]"></a>ssl_write_extended_ms_ext</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_extended_ms_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[736]"></a>ssl_write_session_ticket_ext</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ssl_write_session_ticket_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[737]"></a>ssl_write_alpn_ext</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ssl_write_alpn_ext &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[738]"></a>ssl_generate_random</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_generate_random &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[739]"></a>ssl_write_client_hello</STRONG> (Thumb, 1606 bytes, Stack size 64 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypt_then_mac_ext
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_max_fragment_length_ext
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[73d]"></a>ssl_parse_renegotiation_info</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ssl_parse_renegotiation_info &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[740]"></a>ssl_parse_max_fragment_length_ext</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ssl_parse_max_fragment_length_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[741]"></a>ssl_parse_encrypt_then_mac_ext</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ssl_parse_encrypt_then_mac_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[742]"></a>ssl_parse_extended_ms_ext</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ssl_parse_extended_ms_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[743]"></a>ssl_parse_session_ticket_ext</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ssl_parse_session_ticket_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[744]"></a>ssl_parse_supported_point_formats_ext</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = ssl_parse_supported_point_formats_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[745]"></a>ssl_parse_alpn_ext</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = ssl_parse_alpn_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[746]"></a>ssl_parse_hello_verify_request</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ssl_parse_hello_verify_request &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[74b]"></a>ssl_parse_server_hello</STRONG> (Thumb, 3750 bytes, Stack size 80 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = ssl_parse_server_hello &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_session_ticket_ext
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypt_then_mac_ext
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[74f]"></a>ssl_check_server_ecdh_params</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[751]"></a>ssl_parse_server_ecdh_params</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = ssl_parse_server_ecdh_params &rArr; ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[752]"></a>ssl_parse_server_psk_hint</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_parse_server_psk_hint &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[753]"></a>ssl_parse_signature_algorithm</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_parse_signature_algorithm &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_pk_alg_from_sig
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_md_alg_from_hash
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_sig_hash
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[757]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 1644 bytes, Stack size 136 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = ssl_parse_server_key_exchange &rArr; ssl_parse_server_ecdh_params &rArr; ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_psk_hint
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[759]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 918 bytes, Stack size 64 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = ssl_parse_certificate_request &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[75a]"></a>ssl_parse_server_hello_done</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = ssl_parse_server_hello_done &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[75b]"></a>ssl_write_client_key_exchange</STRONG> (Thumb, 634 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_uses_psk
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[75e]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 972 bytes, Stack size 104 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[761]"></a>ssl_parse_new_session_ticket</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ssl_parse_new_session_ticket &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[747]"></a>mbedtls_ssl_hs_hdr_len</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_cli.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
</UL>

<P><STRONG><a name="[795]"></a>mbedtls_ssl_own_cert</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
</UL>

<P><STRONG><a name="[77a]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
</UL>

<P><STRONG><a name="[772]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
</UL>

<P><STRONG><a name="[76d]"></a>ssl_set_timer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer_cb
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[76e]"></a>ssl_check_timer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_check_timer &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</UL>

<P><STRONG><a name="[76f]"></a>ssl_double_retransmit_timeout</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_double_retransmit_timeout &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</UL>

<P><STRONG><a name="[770]"></a>ssl_reset_retransmit_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_reset_retransmit_timeout &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
</UL>

<P><STRONG><a name="[773]"></a>ssl_session_copy</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_session
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_session
</UL>

<P><STRONG><a name="[775]"></a>tls_prf_generic</STRONG> (Thumb, 278 bytes, Stack size 264 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha384
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
</UL>

<P><STRONG><a name="[af]"></a>tls_prf_sha256</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>tls_prf_sha384</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tls_prf_sha384 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>ssl_calc_finished_tls_sha256</STRONG> (Thumb, 190 bytes, Stack size 184 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>ssl_calc_verify_tls_sha256</STRONG> (Thumb, 412 bytes, Stack size 136 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>ssl_calc_finished_tls_sha384</STRONG> (Thumb, 206 bytes, Stack size 312 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = ssl_calc_finished_tls_sha384 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>ssl_calc_verify_tls_sha384</STRONG> (Thumb, 110 bytes, Stack size 248 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = ssl_calc_verify_tls_sha384 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[777]"></a>ssl_encrypt_buf</STRONG> (Thumb, 1844 bytes, Stack size 96 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[779]"></a>ssl_decrypt_buf</STRONG> (Thumb, 2874 bytes, Stack size 128 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ssl_decrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_ep_len
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_process
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
</UL>

<P><STRONG><a name="[77e]"></a>ssl_flight_append</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_flight_append &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[780]"></a>ssl_swap_epochs</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_swap_epochs &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
</UL>

<P><STRONG><a name="[782]"></a>ssl_flight_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_flight_free
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
</UL>

<P><STRONG><a name="[783]"></a>ssl_bitmask_set</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssl_bitmask_set
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
</UL>

<P><STRONG><a name="[785]"></a>ssl_bitmask_check</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssl_bitmask_check
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
</UL>

<P><STRONG><a name="[784]"></a>ssl_reassemble_dtls_handshake</STRONG> (Thumb, 976 bytes, Stack size 56 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ssl_reassemble_dtls_handshake &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_bitmask_check
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_bitmask_set
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>

<P><STRONG><a name="[79a]"></a>ssl_dtls_replay_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
</UL>

<P><STRONG><a name="[789]"></a>ssl_load_six_bytes</STRONG> (Thumb, 642 bytes, Stack size 12 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssl_load_six_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_update
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_check
</UL>

<P><STRONG><a name="[78c]"></a>ssl_parse_record_header</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_check
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hdr_len
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[78d]"></a>ssl_prepare_record_content</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_update
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hdr_len
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[791]"></a>ssl_handshake_wrapup_free_hs_transform</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[b3]"></a>ssl_update_checksum_sha256</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>ssl_update_checksum_sha384</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_update_checksum_sha384 &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>ssl_update_checksum_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[79b]"></a>ssl_handshake_params_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_handshake_params_init &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_hash_set_const_hash
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[79d]"></a>ssl_transform_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_transform_init &rArr; mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[79f]"></a>ssl_handshake_init</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ssl_handshake_init &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
</UL>

<P><STRONG><a name="[7a0]"></a>ssl_session_reset_int</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_dtls_replay_reset
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset
</UL>

<P><STRONG><a name="[7a5]"></a>ssl_append_key_cert</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hs_own_cert
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
</UL>

<P><STRONG><a name="[7ac]"></a>ssl_start_renegotiation</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3976<LI>Call Chain = ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[7ae]"></a>ssl_check_ctr_renegotiate</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4024<LI>Call Chain = ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_ep_len
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[7af]"></a>ssl_write_real</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_write_real &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_frag_len
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[7b3]"></a>ssl_key_cert_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_key_cert_free
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
</UL>

<P><STRONG><a name="[778]"></a>mbedtls_cipher_get_cipher_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
</UL>

<P><STRONG><a name="[77d]"></a>mbedtls_ssl_hdr_len</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
</UL>

<P><STRONG><a name="[787]"></a>mbedtls_ssl_hs_hdr_len</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[77c]"></a>ssl_ep_len</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>

<P><STRONG><a name="[7b7]"></a>x509_get_attr_type_value</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
</UL>

<P><STRONG><a name="[7ba]"></a>x509_parse_int</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[7bb]"></a>x509_date_is_valid</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[7b9]"></a>x509_parse_time</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_date_is_valid
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>

<P><STRONG><a name="[7d0]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>

<P><STRONG><a name="[7da]"></a>x509_profile_check_md_alg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[7db]"></a>x509_profile_check_pk_alg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[7c6]"></a>x509_profile_check_key</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = x509_profile_check_key &rArr; mbedtls_pk_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[7c7]"></a>x509_get_version</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_get_version &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7c8]"></a>x509_get_dates</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = x509_get_dates &rArr; mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7c9]"></a>x509_get_uid</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_uid &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7ca]"></a>x509_get_basic_constraints</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[7cb]"></a>x509_get_ns_cert_type</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = x509_get_ns_cert_type &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[7cc]"></a>x509_get_key_usage</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[7cd]"></a>x509_get_ext_key_usage</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_ext_key_usage &rArr; mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[7ce]"></a>x509_get_subject_alt_name</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_subject_alt_name &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[7cf]"></a>x509_get_crt_ext</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = x509_get_crt_ext &rArr; x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7d1]"></a>x509_crt_parse_der_core</STRONG> (Thumb, 826 bytes, Stack size 80 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[7d6]"></a>x509_info_subject_alt_name</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = x509_info_subject_alt_name
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[7d2]"></a>x509_info_cert_type</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_cert_type &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[7d3]"></a>x509_info_key_usage</STRONG> (Thumb, 676 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_key_usage &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[7d4]"></a>x509_info_ext_key_usage</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = x509_info_ext_key_usage &rArr; mbedtls_oid_get_extended_key_usage &rArr; oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[7d9]"></a>x509_crt_verifycrl</STRONG> (Thumb, 530 bytes, Stack size 112 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3448<LI>Call Chain = x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</UL>

<P><STRONG><a name="[7de]"></a>x509_memcasecmp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[7dd]"></a>x509_check_wildcard</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[7df]"></a>x509_string_cmp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
</UL>

<P><STRONG><a name="[7e0]"></a>x509_name_cmp</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
</UL>

<P><STRONG><a name="[7e1]"></a>x509_crt_check_parent</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_crt_check_parent &rArr; x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[7e2]"></a>x509_crt_verify_top</STRONG> (Thumb, 496 bytes, Stack size 152 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3600<LI>Call Chain = x509_crt_verify_top &rArr; x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[7e3]"></a>x509_crt_verify_child</STRONG> (Thumb, 548 bytes, Stack size 152 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3752 + In Cycle
<LI>Call Chain = x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[7e5]"></a>netconn_apimsg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[7fa]"></a>netconn_close_shutdown</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[7fb]"></a>netconn_recv_data</STRONG> (Thumb, 966 bytes, Stack size 40 bytes, lwip_api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
</UL>

<P><STRONG><a name="[c6]"></a>recv_udp</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_msg.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>recv_tcp</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_msg.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>err_tcp</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_msg.o(.text)
</UL>
<P><STRONG><a name="[80e]"></a>lwip_netconn_do_writemore</STRONG> (Thumb, 1044 bytes, Stack size 56 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
</UL>

<P><STRONG><a name="[c2]"></a>sent_tcp</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_msg.o(.text)
</UL>
<P><STRONG><a name="[811]"></a>lwip_netconn_do_close_internal</STRONG> (Thumb, 778 bytes, Stack size 56 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
</UL>

<P><STRONG><a name="[c3]"></a>poll_tcp</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_msg.o(.text)
</UL>
<P><STRONG><a name="[81b]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[c8]"></a>accept_function</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_msg.o(.text)
</UL>
<P><STRONG><a name="[81f]"></a>pcb_new</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[823]"></a>netconn_drain</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[c7]"></a>lwip_netconn_do_connected</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwip_netconn_do_connected &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_msg.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>lwip_netconn_do_dns_found</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lwip_api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_api_msg.o(.text)
</UL>
<P><STRONG><a name="[843]"></a>get_socket</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lwip_sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_register_membership
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[851]"></a>tryget_socket</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lwip_sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>

<P><STRONG><a name="[841]"></a>alloc_socket</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = alloc_socket &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[842]"></a>free_socket</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[ca]"></a>event_callback</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = event_callback &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_sockets.o(.text)
</UL>
<P><STRONG><a name="[847]"></a>lwip_socket_drop_registered_memberships</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[850]"></a>lwip_selscan</STRONG> (Thumb, 660 bytes, Stack size 64 bytes, lwip_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lwip_selscan &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[852]"></a>lwip_getaddrname</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>

<P><STRONG><a name="[855]"></a>lwip_getsockopt_impl</STRONG> (Thumb, 1092 bytes, Stack size 40 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>

<P><STRONG><a name="[857]"></a>lwip_socket_unregister_membership</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[858]"></a>lwip_socket_register_membership</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[859]"></a>lwip_setsockopt_impl</STRONG> (Thumb, 1046 bytes, Stack size 48 bytes, lwip_sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_register_membership
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>
<BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>

<P><STRONG><a name="[cc]"></a>tcpip_thread</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, lwip_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcpip_thread &rArr; sys_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_tcpip.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>pbuf_free_int</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, lwip_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pbuf_free_int &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_tcpip.o(.text)
</UL>
<P><STRONG><a name="[86a]"></a>net_prepare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip_net_socket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_connect
</UL>

<P><STRONG><a name="[86d]"></a>net_would_block</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip_net_socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_would_block &rArr; lwip_fcntl
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_send
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_net_recv
</UL>

<P><STRONG><a name="[878]"></a>dns_call_found</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[879]"></a>dns_send</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[87d]"></a>dns_create_txid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dns_create_txid &rArr; lwip_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_get_random
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[87f]"></a>dns_check_entry</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[880]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[881]"></a>dns_lookup</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dns_lookup &rArr; lwip_strnicmp
</UL>
<BR>[Calls]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[883]"></a>dns_compare_name</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dns_compare_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[885]"></a>dns_skip_name</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dns_skip_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[886]"></a>dns_correct_response</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dns_correct_response &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[cf]"></a>dns_recv</STRONG> (Thumb, 482 bytes, Stack size 72 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dns_recv &rArr; dns_correct_response &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_dns.o(.text)
</UL>
<P><STRONG><a name="[888]"></a>dns_alloc_random_port</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_get_random
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
</UL>

<P><STRONG><a name="[889]"></a>dns_alloc_pcb</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dns_alloc_pcb &rArr; dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[88a]"></a>dns_enqueue</STRONG> (Thumb, 410 bytes, Stack size 64 bytes, lwip_dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[88d]"></a>inet_cksum_pseudo_base</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lwip_inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[890]"></a>inet_cksum_pseudo_partial_base</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, lwip_inet_chksum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[89f]"></a>plug_holes</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, lwip_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = plug_holes &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[8aa]"></a>memp_sanity</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lwip_memp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[8a3]"></a>memp_overflow_check_element_overflow</STRONG> (Thumb, 72 bytes, Stack size 152 bytes, lwip_memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = memp_overflow_check_element_overflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
</UL>

<P><STRONG><a name="[8a4]"></a>memp_overflow_check_element_underflow</STRONG> (Thumb, 70 bytes, Stack size 152 bytes, lwip_memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
</UL>

<P><STRONG><a name="[8a5]"></a>memp_overflow_init_element</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lwip_memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memp_overflow_init_element
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>

<P><STRONG><a name="[8a7]"></a>do_memp_malloc_pool_fn</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lwip_memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool_fn
</UL>

<P><STRONG><a name="[8a9]"></a>do_memp_free_pool</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lwip_memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_sanity
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
</UL>

<P><STRONG><a name="[8ad]"></a>netif_issue_reports</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lwip_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = netif_issue_reports &rArr; igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer &rArr; lwip_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[8bf]"></a>pbuf_header_impl</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_header_impl &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>

<P><STRONG><a name="[8c7]"></a>pbuf_skip_const</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lwip_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>

<P><STRONG><a name="[8d8]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[8dc]"></a>tcp_remove_listener</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lwip_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
</UL>

<P><STRONG><a name="[8db]"></a>tcp_listen_closed</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_listen_closed &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[8dd]"></a>tcp_close_shutdown</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[8e5]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[d0]"></a>tcp_accept_null</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = tcp_accept_null &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_tcp.o(.text)
</UL>
<P><STRONG><a name="[8ed]"></a>tcp_kill_prio</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[8ee]"></a>tcp_kill_state</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[8ef]"></a>tcp_kill_timewait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[8f2]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lwip_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[8f3]"></a>tcp_receive</STRONG> (Thumb, 1992 bytes, Stack size 40 bytes, lwip_tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[8f8]"></a>tcp_getoptbyte</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lwip_tcp_in.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[8f7]"></a>tcp_parseopt</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, lwip_tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[8f9]"></a>tcp_process</STRONG> (Thumb, 1670 bytes, Stack size 32 bytes, lwip_tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[8fb]"></a>tcp_listen_input</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, lwip_tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[8fc]"></a>tcp_timewait_input</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lwip_tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[8ff]"></a>tcp_output_alloc_header</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[900]"></a>tcp_create_segment</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[901]"></a>tcp_write_checks</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_write_checks &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[903]"></a>tcp_output_segment</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, lwip_tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[d1]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip_timeouts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_timeouts.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>cyclic_timer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwip_timeouts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = cyclic_timer &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_timeouts.o(.text)
</UL>
<P><STRONG><a name="[906]"></a>sys_check_timeouts</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lwip_timeouts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[908]"></a>sys_timeouts_sleeptime</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lwip_timeouts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_timeouts_sleeptime &rArr; sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[90c]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[90a]"></a>udp_input_local_match</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, lwip_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udp_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[912]"></a>icmp_send_response</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, lwip_icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[914]"></a>igmp_lookup_group</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = igmp_lookup_group &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>

<P><STRONG><a name="[916]"></a>igmp_start_timer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = igmp_start_timer &rArr; lwip_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_get_random
</UL>
<BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>

<P><STRONG><a name="[917]"></a>igmp_delaying_member</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = igmp_delaying_member &rArr; igmp_start_timer &rArr; lwip_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
</UL>

<P><STRONG><a name="[91e]"></a>igmp_remove_group</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_remove_group
</UL>
<BR>[Called By]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>

<P><STRONG><a name="[919]"></a>igmp_ip_output_if</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>

<P><STRONG><a name="[91b]"></a>igmp_send</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>

<P><STRONG><a name="[91f]"></a>igmp_timeout</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lwip_igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>

<P><STRONG><a name="[928]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lwip_ip4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[929]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, lwip_ip4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>

<P><STRONG><a name="[92a]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lwip_ip4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[92b]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lwip_ip4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[92c]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 750 bytes, Stack size 48 bytes, lwip_ip4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[92d]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwip_ip4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[92e]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip_ip4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[d3]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwip_ip4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ip4_frag.o(.text)
</UL>
<P><STRONG><a name="[937]"></a>network_phase</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = network_phase &rArr; start_networks &rArr; continue_networks &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_networks
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_success
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_established
</UL>

<P><STRONG><a name="[176]"></a>chap_md5_make_response</STRONG> (Thumb, 80 bytes, Stack size 128 bytes, lwip_chap-md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = chap_md5_make_response &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_chap-md5.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>chap_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip_chap-new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lwip_chap-new.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>chap_lowerup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip_chap-new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lwip_chap-new.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>chap_lowerdown</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip_chap-new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lwip_chap-new.o(.constdata)
</UL>
<P><STRONG><a name="[946]"></a>chap_respond</STRONG> (Thumb, 288 bytes, Stack size 192 bytes, lwip_chap-new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = chap_respond &rArr; get_secret &rArr; ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_warn
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_secret
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_write
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_slprintf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_input
</UL>

<P><STRONG><a name="[949]"></a>chap_handle_status</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lwip_chap-new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = chap_handle_status &rArr; auth_withpeer_success &rArr; network_phase &rArr; start_networks &rArr; continue_networks &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_error
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_success
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_fail
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_info
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_input
</UL>

<P><STRONG><a name="[178]"></a>chap_input</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lwip_chap-new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = chap_input &rArr; chap_respond &rArr; get_secret &rArr; ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_handle_status
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chap_respond
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_chap-new.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>chap_protrej</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lwip_chap-new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = chap_protrej &rArr; auth_withpeer_fail &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_error
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_fail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_chap-new.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>fsm_timeout</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = fsm_timeout &rArr; ppp_warn &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_warn
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_fsm.o(.text)
</UL>
<P><STRONG><a name="[94c]"></a>fsm_sconfreq</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = fsm_sconfreq &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_open
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerup
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfreq
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfack
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfnakrej
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermack
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timeout
</UL>

<P><STRONG><a name="[950]"></a>terminate_layer</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = terminate_layer &rArr; fsm_sdata &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_protreject
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_close
</UL>

<P><STRONG><a name="[952]"></a>fsm_rcoderej</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = fsm_rcoderej &rArr; ppp_warn &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_warn
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[953]"></a>fsm_rtermack</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = fsm_rtermack &rArr; fsm_sconfreq &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[954]"></a>fsm_rtermreq</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = fsm_rtermreq &rArr; ppp_info &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_info
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[955]"></a>fsm_rconfnakrej</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = fsm_rconfnakrej &rArr; ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_error
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[956]"></a>fsm_rconfack</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = fsm_rconfack &rArr; ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_error
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[957]"></a>fsm_rconfreq</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, lwip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = fsm_rconfreq &rArr; fsm_sdata &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[186]"></a>ipcp_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipcp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>ipcp_open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ipcp_open &rArr; fsm_open &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>ipcp_close</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ipcp_close &rArr; fsm_close &rArr; terminate_layer &rArr; fsm_sdata &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_close
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>ipcp_lowerup</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ipcp_lowerup &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>ipcp_lowerdown</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ipcp_lowerdown &rArr; fsm_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>ipcp_input</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ipcp_input &rArr; fsm_input &rArr; fsm_rconfnakrej &rArr; ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>ipcp_protrej</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ipcp_protrej &rArr; fsm_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>ipcp_resetci</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipcp_resetci &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>ipcp_cilen</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipcp_cilen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>ipcp_addci</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipcp_addci
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>ipcp_ackci</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipcp_ackci
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>ipcp_nakci</STRONG> (Thumb, 1066 bytes, Stack size 112 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ipcp_nakci &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>ipcp_rejci</STRONG> (Thumb, 466 bytes, Stack size 56 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ipcp_rejci &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>ipcp_reqci</STRONG> (Thumb, 984 bytes, Stack size 96 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ipcp_reqci &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>ipcp_up</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ipcp_up &rArr; sifaddr &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_warn
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_notice
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_error
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_up
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifup
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifaddr
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdns
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[95f]"></a>ipcp_clear_addrs</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = ipcp_clear_addrs &rArr; cifaddr &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL>

<P><STRONG><a name="[184]"></a>ipcp_down</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ipcp_down &rArr; ipcp_clear_addrs &rArr; cifaddr &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_down
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifdown
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdns
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_clear_addrs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>ipcp_finished</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip_ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ipcp_finished &rArr; np_finished &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_finished
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ipcp.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>lcp_init</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>lcp_finished</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_terminated
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>lcp_delayed_up</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lcp_delayed_up &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.text)
</UL>
<P><STRONG><a name="[19a]"></a>lcp_input</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lcp_input &rArr; fsm_input &rArr; fsm_rconfnakrej &rArr; ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[965]"></a>lcp_received_echo_reply</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lcp_received_echo_reply &rArr; ppp_warn &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_warn
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_dbglog
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_extcode
</UL>

<P><STRONG><a name="[967]"></a>lcp_rprotrej</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lcp_rprotrej &rArr; ppp_warn &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_warn
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_dbglog
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_extcode
</UL>

<P><STRONG><a name="[198]"></a>lcp_extcode</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lcp_extcode &rArr; lcp_rprotrej &rArr; ppp_warn &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_rprotrej
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_received_echo_reply
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>lcp_protrej</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lcp_protrej &rArr; ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_error
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_protreject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>lcp_resetci</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = lcp_resetci &rArr; magic &rArr; magic_random_bytes &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>lcp_cilen</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcp_cilen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>lcp_addci</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lcp_addci &rArr; ppp_error &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>lcp_ackci</STRONG> (Thumb, 580 bytes, Stack size 32 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcp_ackci
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>lcp_nakci</STRONG> (Thumb, 1244 bytes, Stack size 136 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = lcp_nakci &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_notice
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>lcp_rejci</STRONG> (Thumb, 598 bytes, Stack size 80 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lcp_rejci &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>lcp_reqci</STRONG> (Thumb, 1260 bytes, Stack size 96 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lcp_reqci &rArr; ppp_dbglog &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_dbglog
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>LcpEchoTimeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = LcpEchoTimeout &rArr; LcpEchoCheck &rArr; LcpSendEchoRequest &rArr; LcpLinkFailure &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.text)
</UL>
<P><STRONG><a name="[96b]"></a>LcpLinkFailure</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LcpLinkFailure &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_notice
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_info
</UL>
<BR>[Called By]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpSendEchoRequest
</UL>

<P><STRONG><a name="[96c]"></a>LcpSendEchoRequest</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = LcpSendEchoRequest &rArr; LcpLinkFailure &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpLinkFailure
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
</UL>
<BR>[Called By]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
</UL>

<P><STRONG><a name="[96a]"></a>LcpEchoCheck</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = LcpEchoCheck &rArr; LcpSendEchoRequest &rArr; LcpLinkFailure &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_warn
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpSendEchoRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_echo_lowerup
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoTimeout
</UL>

<P><STRONG><a name="[96d]"></a>lcp_echo_lowerup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lcp_echo_lowerup &rArr; LcpEchoCheck &rArr; LcpSendEchoRequest &rArr; LcpLinkFailure &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_up
</UL>

<P><STRONG><a name="[194]"></a>lcp_up</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = lcp_up &rArr; lcp_echo_lowerup &rArr; LcpEchoCheck &rArr; LcpSendEchoRequest &rArr; LcpLinkFailure &rArr; lcp_close &rArr; lcp_finished &rArr; link_terminated &rArr; ppp_notice &rArr; ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_established
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_send_config
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_recv_config
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_mtu
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_echo_lowerup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[96f]"></a>lcp_echo_lowerdown</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lcp_echo_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_down
</UL>

<P><STRONG><a name="[195]"></a>lcp_down</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lcp_down &rArr; lcp_echo_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_down
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_send_config
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_recv_config
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_echo_lowerdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>lcp_starting</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, lwip_lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcp_starting
</UL>
<BR>[Calls]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_lcp.o(.constdata)
</UL>
<P><STRONG><a name="[971]"></a>magic_churnrand</STRONG> (Thumb, 88 bytes, Stack size 112 bytes, lwip_magic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = magic_churnrand &rArr; md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_get_random
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_jiffies
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_randomize
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic_init
</UL>

<P><STRONG><a name="[d7]"></a>ppp_do_connect</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ppp_do_connect &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ppp.o(.text)
</UL>
<P><STRONG><a name="[979]"></a>ppp_netif_output</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ppp_netif_output &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_netif_output_ip4
</UL>

<P><STRONG><a name="[d8]"></a>ppp_netif_output_ip4</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ppp_netif_output_ip4 &rArr; ppp_netif_output &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_netif_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_ppp.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>ppp_netif_init_cb</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lwip_ppp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lwip_ppp.o(.text)
</UL>
<P><STRONG><a name="[985]"></a>pppos_output_append</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pppos_output_append
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_netif_output
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_write
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_output_last
</UL>

<P><STRONG><a name="[984]"></a>pppos_output_last</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pppos_output_last &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_output_append
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_netif_output
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_write
</UL>

<P><STRONG><a name="[1a3]"></a>pppos_write</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pppos_write &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_output_last
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_output_append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_pppos.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>pppos_netif_output</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pppos_netif_output &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_output_last
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_output_append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_pppos.o(.constdata)
</UL>
<P><STRONG><a name="[986]"></a>pppos_input_free_current_packet</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pppos_input_free_current_packet &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input_drop
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_destroy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_connect
</UL>

<P><STRONG><a name="[1a0]"></a>pppos_connect</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = pppos_connect &rArr; ppp_start &rArr; lcp_lowerup &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input_free_current_packet
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_start
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_pppos.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>pppos_disconnect</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pppos_disconnect &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_link_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_pppos.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>pppos_destroy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pppos_destroy &rArr; pppos_input_free_current_packet &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input_free_current_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_pppos.o(.constdata)
</UL>
<P><STRONG><a name="[987]"></a>pppos_input_drop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pppos_input_drop &rArr; pppos_input_free_current_packet &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input_free_current_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input
</UL>

<P><STRONG><a name="[da]"></a>pppos_input_callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = pppos_input_callback &rArr; ppp_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_printf
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_pppos.o(.text)
</UL>
<P><STRONG><a name="[1a5]"></a>pppos_send_config</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pppos_send_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_pppos.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>pppos_recv_config</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, lwip_pppos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pppos_recv_config &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_pppos.o(.constdata)
</UL>
<P><STRONG><a name="[98d]"></a>ppp_log_write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_logit
</UL>

<P><STRONG><a name="[98c]"></a>ppp_logit</STRONG> (Thumb, 92 bytes, Stack size 280 bytes, lwip_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ppp_logit &rArr; ppp_vslprintf &rArr; ppp_slprintf &rArr;  ppp_vslprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_vslprintf
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_log_write
</UL>
<BR>[Called By]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_warn
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_notice
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_error
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_dbglog
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_info
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_fatal
</UL>

<P><STRONG><a name="[98e]"></a>md5_process</STRONG> (Thumb, 2326 bytes, Stack size 84 bytes, lwip_md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
</UL>

<P><STRONG><a name="[992]"></a>mbed_lwip_get_ipv4_addr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lwip_stack.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_ip_addr
</UL>

<P><STRONG><a name="[993]"></a>add_dns_addr_to_dns_list_index</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lwip_stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_dns_addr_to_dns_list_index
</UL>
<BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dns_addr
</UL>

<P><STRONG><a name="[995]"></a>get_ip_addr_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip_stack.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dns_addr
</UL>

<P><STRONG><a name="[db]"></a>mbed_lwip_tcpip_init_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip_stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbed_lwip_tcpip_init_irq &rArr; sys_sem_signal &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_stack.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>mbed_lwip_netif_link_irq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwip_stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbed_lwip_netif_link_irq &rArr; sys_sem_signal &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_stack.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>mbed_lwip_netif_status_irq</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lwip_stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbed_lwip_netif_status_irq &rArr; sys_sem_signal &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_get_ip_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_stack.o(.text)
</UL>
<P><STRONG><a name="[99e]"></a>mbed_lwip_err_remap</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, lwip_stack.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringup
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_lwip_ppp_bringdown
</UL>

<P><STRONG><a name="[df]"></a>ppp_output</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ppp_lwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ppp_output &rArr; fwrite &rArr; fputc &rArr; fputc_stdout &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ppp_lwip.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>ppp_link_status</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, ppp_lwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ppp_link_status &rArr; sys_sem_signal &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ppp_lwip.o(.text)
</UL>
<P><STRONG><a name="[9a5]"></a>ppp_input</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ppp_lwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ppp_input &rArr; pppos_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_cb
</UL>

<P><STRONG><a name="[e0]"></a>stream_cb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ppp_lwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = stream_cb &rArr; ppp_input &rArr; pppos_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; assert_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ppp_lwip.o(.text)
</UL>
<P><STRONG><a name="[9cd]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9c7]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[9d0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9cf]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e6]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[e7]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[9b0]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[e3]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
